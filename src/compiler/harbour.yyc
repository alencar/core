/* A Bison parser, made by GNU Bison 3.0.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         hb_comp_yyparse
#define yylex           hb_comp_yylex
#define yyerror         hb_comp_yyerror
#define yydebug         hb_comp_yydebug
#define yynerrs         hb_comp_yynerrs


/* Copy the first part of user declarations.  */
#line 5 "harbour.y" /* yacc.c:339  */

/*
 * Compiler YACC rules and actions
 *
 * Copyright 1999 Antonio Linares <alinares@fivetech.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA (or visit
 * their web site at http://www.gnu.org/).
 *
 */

/* TODO list
 * 1) Change the pcode generated by ::cVar from Self:cVar to QSELF():cVar
 *    The major problem to solve is how to support QSELF() inside a codeblock.
 */


#include "hbcomp.h"

/* Compile using: bison -d -v harbour.y */

/* to pacify some meaningless warnings */
#if defined( __BORLANDC__ )
#  if ! defined( __STDC__ )
#     define __STDC__
#  endif
#  pragma warn -aus
#  pragma warn -ccc
#  pragma warn -rch
#elif defined( __WATCOMC__ )
#  pragma warning 13 9
#  pragma warning 368 9
#elif defined( _MSC_VER )
#  pragma warning( disable : 4244 )
#  pragma warning( disable : 4702 )
#endif

#undef alloca
#define alloca  hb_xgrab
#undef malloc
#define malloc  hb_xgrab
#undef realloc
#define realloc hb_xrealloc
#undef free
#define free    hb_xfree

/* NOTE: these symbols are used internally in bison.simple
 */
#undef YYFREE
#define YYFREE hb_xfree
#undef YYMALLOC
#define YYMALLOC hb_xgrab

#define NO_YYERROR

/* NOTE: these symbols are defined explicitly to pacify warnings */
#define YYENABLE_NLS          0
#define YYLTYPE_IS_TRIVIAL    0

/* NOTE: increase the maximum size of bison stack size */
#define YYMAXDEPTH 100000

static void hb_compLoopStart( HB_COMP_DECL, HB_BOOL );
static void hb_compLoopEnd( HB_COMP_DECL );
static void hb_compLoopLoop( HB_COMP_DECL );
static void hb_compLoopExit( HB_COMP_DECL );
static void hb_compLoopHere( HB_COMP_DECL );
static long hb_compLoopCount( HB_COMP_DECL );

static void * hb_compElseIfGen( HB_COMP_DECL, void * pFirstElseIf, HB_SIZE nOffset ); /* generates a support structure for elseifs pcode fixups */
static void hb_compElseIfFix( HB_COMP_DECL, void * pIfElseIfs ); /* implements the ElseIfs pcode fixups */

static void hb_compRTVariableAdd( HB_COMP_DECL, PHB_EXPR, HB_BOOL );
static void hb_compRTVariableGen( HB_COMP_DECL, const char * );

static PHB_EXPR hb_compArrayDimPush( PHB_EXPR pInitValue, HB_COMP_DECL );
static void hb_compVariableDim( const char *, PHB_EXPR, HB_COMP_DECL );

static void hb_compForStart( HB_COMP_DECL, const char *szVarName, int iForEachDir );
static void hb_compForEnd( HB_COMP_DECL, const char *szVarName );
static void hb_compEnumStart( HB_COMP_DECL, PHB_EXPR pVars, PHB_EXPR pExprs, int descend );
static void hb_compEnumNext( HB_COMP_DECL, PHB_EXPR pExpr, int descend );
static void hb_compEnumEnd( HB_COMP_DECL, PHB_EXPR pExpr );

static void hb_compSwitchStart( HB_COMP_DECL, PHB_EXPR );
static void hb_compSwitchAdd( HB_COMP_DECL, PHB_EXPR );
static void hb_compSwitchEnd( HB_COMP_DECL );

static PHB_EXPR hb_compCheckMethod( HB_COMP_DECL, PHB_EXPR pExpr );
static PHB_EXPR hb_compCheckPassByRef( HB_COMP_DECL, PHB_EXPR pExpr );

static void hb_compErrStru( HB_COMP_DECL, int iError );

#ifdef HB_YYDEBUG
   #define YYDEBUG        1 /* Parser debug information support */
#endif

/* Controls if passing by reference '@' is allowed */
#define HB_PASSBYREF_OFF      0
#define HB_PASSBYREF_FUNCALL  1
#define HB_PASSBYREF_ARRAY    2

static void hb_compDebugStart( void ) { }


#line 190 "harboury.c" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "harboury.h".  */
#ifndef YY_HB_COMP_YY_HARBOURY_H_INCLUDED
# define YY_HB_COMP_YY_HARBOURY_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int hb_comp_yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    FUNCTION = 258,
    PROCEDURE = 259,
    IDENTIFIER = 260,
    RETURN = 261,
    NIL = 262,
    NUM_DOUBLE = 263,
    INASSIGN = 264,
    NUM_LONG = 265,
    LOCAL = 266,
    STATIC = 267,
    IIF = 268,
    IF = 269,
    ELSE = 270,
    ELSEIF = 271,
    END = 272,
    ENDIF = 273,
    LITERAL = 274,
    TRUEVALUE = 275,
    FALSEVALUE = 276,
    ANNOUNCE = 277,
    EXTERN = 278,
    DYNAMIC = 279,
    INIT = 280,
    EXIT = 281,
    AND = 282,
    OR = 283,
    NOT = 284,
    PUBLIC = 285,
    EQ = 286,
    NE1 = 287,
    NE2 = 288,
    INC = 289,
    DEC = 290,
    ALIASOP = 291,
    DOCASE = 292,
    CASE = 293,
    OTHERWISE = 294,
    ENDCASE = 295,
    ENDDO = 296,
    MEMVAR = 297,
    WHILE = 298,
    LOOP = 299,
    FOR = 300,
    NEXT = 301,
    TO = 302,
    STEP = 303,
    LE = 304,
    GE = 305,
    FIELD = 306,
    IN = 307,
    PARAMETERS = 308,
    PLUSEQ = 309,
    MINUSEQ = 310,
    MULTEQ = 311,
    DIVEQ = 312,
    POWER = 313,
    EXPEQ = 314,
    MODEQ = 315,
    PRIVATE = 316,
    BEGINSEQ = 317,
    BREAK = 318,
    RECOVER = 319,
    RECOVERUSING = 320,
    ALWAYS = 321,
    ENDSEQ = 322,
    DO = 323,
    WITH = 324,
    SELF = 325,
    LINE = 326,
    MACROVAR = 327,
    MACROTEXT = 328,
    AS_ARRAY = 329,
    AS_BLOCK = 330,
    AS_CHARACTER = 331,
    AS_CLASS = 332,
    AS_DATE = 333,
    AS_LOGICAL = 334,
    AS_NUMERIC = 335,
    AS_OBJECT = 336,
    AS_VARIANT = 337,
    DECLARE = 338,
    OPTIONAL = 339,
    DECLARE_CLASS = 340,
    DECLARE_MEMBER = 341,
    AS_ARRAY_ARRAY = 342,
    AS_BLOCK_ARRAY = 343,
    AS_CHARACTER_ARRAY = 344,
    AS_CLASS_ARRAY = 345,
    AS_DATE_ARRAY = 346,
    AS_LOGICAL_ARRAY = 347,
    AS_NUMERIC_ARRAY = 348,
    AS_OBJECT_ARRAY = 349,
    PROCREQ = 350,
    CBSTART = 351,
    DOIDENT = 352,
    FOREACH = 353,
    DESCEND = 354,
    DOSWITCH = 355,
    ENDSWITCH = 356,
    WITHOBJECT = 357,
    ENDWITH = 358,
    NUM_DATE = 359,
    TIMESTAMP = 360,
    EPSILON = 361,
    HASHOP = 362,
    THREAD = 363,
    POST = 364,
    UNARY = 365,
    PRE = 366
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE YYSTYPE;
union YYSTYPE
{
#line 124 "harbour.y" /* yacc.c:355  */

   const char * string; /* to hold a string returned by lex */
   int     iNumber;     /* to hold a temporary integer number */
   HB_SIZE sNumber;     /* to hold a temporary HB_SIZE values */
   HB_MAXINT lNumber;   /* to hold a temporary long number */
   HB_BOOL bTrue;
   PHB_EXPR asExpr;
   void * pVoid;        /* to hold any memory structure we may need */
   struct
   {
      HB_MAXINT lNumber;   /* to hold a long number returned by lex */
      HB_UCHAR  bWidth;    /* to hold the width of the value */
   } valLong;
   struct
   {
      double   dNumber;    /* to hold a double number returned by lex */
      HB_UCHAR bWidth;     /* to hold the width of the value */
      HB_UCHAR bDec;       /* to hold the number of decimal points in the value */
   } valDouble;
   struct
   {
      long     date;
      long     time;
   } valTimeStamp;
   struct
   {
      char *   string;
      HB_SIZE  length;
      HB_BOOL  dealloc;
   } valChar;
   struct
   {
      char *   string;
      HB_SIZE  length;
      int      flags;   /* Flag for early {|| &macro} (1) or late {|| &(macro)} (2) binding */
   } asCodeblock;
   PHB_VARTYPE asVarType;

#line 381 "harboury.c" /* yacc.c:355  */
};
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif



int hb_comp_yyparse (PHB_COMP pComp);

#endif /* !YY_HB_COMP_YY_HARBOURY_H_INCLUDED  */

/* Copy the second part of user declarations.  */
#line 163 "harbour.y" /* yacc.c:358  */

/* This must be placed after the above union - the union is
 * typedef-ined to YYSTYPE
 */
extern int  yylex( YYSTYPE *, HB_COMP_DECL );    /* main lex token function, called by yyparse() */
extern void yyerror( HB_COMP_DECL, const char * );     /* parsing error management function */

#line 402 "harboury.c" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  280
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   8556

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  134
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  249
/* YYNRULES -- Number of rules.  */
#define YYNRULES  661
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  1004

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   366

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     123,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,   113,   118,   121,     2,
     126,   127,   116,   114,   125,   115,     2,   117,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   130,   124,
     111,   110,   112,     2,   122,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   132,     2,   131,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   128,   133,   129,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   119,   120
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   290,   290,   291,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   308,   311,   316,   324,
     324,   325,   325,   326,   326,   327,   327,   330,   331,   332,
     333,   336,   337,   338,   339,   342,   343,   346,   347,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   372,   373,   381,
     382,   383,   384,   385,   386,   392,   393,   394,   395,   396,
     397,   398,   399,   401,   401,   407,   408,   409,   422,   422,
     443,   445,   443,   449,   451,   449,   455,   456,   457,   458,
     459,   460,   460,   466,   469,   477,   496,   496,   499,   500,
     501,   502,   503,   504,   517,   518,   519,   520,   523,   524,
     525,   526,   529,   530,   533,   534,   537,   538,   541,   542,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   568,
     569,   572,   575,   578,   579,   584,   587,   592,   598,   603,
     608,   609,   612,   617,   620,   631,   634,   639,   642,   645,
     646,   649,   652,   653,   658,   661,   666,   667,   670,   675,
     678,   681,   682,   689,   690,   695,   696,   697,   698,   699,
     700,   701,   702,   703,   704,   705,   706,   707,   708,   711,
     712,   715,   716,   717,   718,   719,   720,   721,   722,   723,
     724,   725,   726,   727,   728,   729,   730,   731,   732,   733,
     734,   743,   744,   745,   746,   747,   748,   753,   754,   755,
     756,   757,   758,   759,   760,   761,   762,   763,   764,   765,
     766,   767,   768,   769,   770,   773,   777,   780,   781,   785,
     788,   791,   792,   795,   796,   799,   800,   801,   802,   803,
     806,   807,   812,   813,   814,   820,   821,   824,   827,   832,
     835,   844,   845,   846,   847,   848,   849,   850,   851,   852,
     853,   854,   855,   856,   857,   858,   859,   860,   861,   862,
     863,   864,   865,   866,   867,   868,   869,   870,   871,   872,
     873,   874,   875,   878,   879,   880,   881,   882,   883,   886,
     887,   890,   891,   894,   895,   896,   897,   898,   899,   900,
     907,   908,   909,   910,   911,   912,   913,   914,   915,   916,
     917,   918,   919,   920,   921,   922,   923,   924,   925,   926,
     927,   933,   934,   937,   940,   941,   944,   945,   946,   949,
     952,   955,   958,   961,   964,   967,   970,   973,   974,   975,
     976,   977,   978,   981,   982,   983,   984,   985,   986,   989,
     990,   993,   994,   995,   996,   997,   998,   999,  1000,  1001,
    1004,  1010,  1011,  1012,  1015,  1016,  1019,  1019,  1025,  1026,
    1027,  1028,  1031,  1032,  1035,  1036,  1040,  1043,  1039,  1046,
    1045,  1082,  1083,  1085,  1088,  1097,  1101,  1104,  1104,  1106,
    1106,  1108,  1108,  1110,  1110,  1120,  1121,  1124,  1125,  1133,
    1134,  1136,  1140,  1147,  1165,  1165,  1194,  1200,  1203,  1204,
    1205,  1208,  1208,  1215,  1216,  1219,  1220,  1223,  1223,  1226,
    1227,  1230,  1230,  1249,  1249,  1250,  1251,  1252,  1253,  1253,
    1256,  1257,  1260,  1261,  1262,  1263,  1266,  1266,  1285,  1285,
    1340,  1341,  1342,  1343,  1346,  1347,  1348,  1349,  1350,  1351,
    1352,  1355,  1356,  1359,  1362,  1363,  1364,  1365,  1366,  1367,
    1370,  1371,  1372,  1373,  1374,  1375,  1378,  1379,  1380,  1381,
    1382,  1383,  1384,  1385,  1388,  1391,  1394,  1397,  1400,  1403,
    1406,  1409,  1410,  1411,  1412,  1416,  1418,  1415,  1423,  1423,
    1427,  1429,  1427,  1437,  1439,  1437,  1448,  1456,  1457,  1458,
    1459,  1460,  1461,  1462,  1463,  1466,  1470,  1474,  1477,  1483,
    1490,  1491,  1492,  1493,  1494,  1495,  1496,  1497,  1500,  1500,
    1503,  1504,  1512,  1513,  1512,  1524,  1525,  1524,  1537,  1537,
    1537,  1539,  1539,  1544,  1549,  1543,  1563,  1572,  1576,  1577,
    1578,  1579,  1580,  1581,  1582,  1583,  1587,  1600,  1605,  1586,
    1653,  1654,  1657,  1658,  1661,  1669,  1670,  1671,  1672,  1673,
    1674,  1675,  1676,  1677,  1680,  1681,  1684,  1685,  1688,  1689,
    1692,  1693,  1698,  1704,  1714,  1697,  1733,  1734,  1738,  1737,
    1750,  1757,  1765,  1766,  1767,  1768,  1769,  1770,  1771,  1772,
    1776,  1775,  1786,  1787,  1796,  1796,  1799,  1799,  1802,  1804,
    1807,  1807,  1807,  1812,  1820,  1831,  1841,  1811,  1872,  1873,
    1874,  1875,  1876,  1877,  1878,  1879,  1882,  1883,  1891,  1892,
    1895,  1904,  1905,  1906,  1909,  1920,  1938,  1942,  1950,  1951,
    1954,  1955,  1956,  1957,  1958,  1961,  1962,  1963,  1964,  1965,
    1969,  1968,  1991,  1992,  1993,  1994,  1995,  1996,  1997,  1998,
    2001,  2002
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "FUNCTION", "PROCEDURE", "IDENTIFIER",
  "RETURN", "NIL", "NUM_DOUBLE", "INASSIGN", "NUM_LONG", "LOCAL", "STATIC",
  "IIF", "IF", "ELSE", "ELSEIF", "END", "ENDIF", "LITERAL", "TRUEVALUE",
  "FALSEVALUE", "ANNOUNCE", "EXTERN", "DYNAMIC", "INIT", "EXIT", "AND",
  "OR", "NOT", "PUBLIC", "EQ", "NE1", "NE2", "INC", "DEC", "ALIASOP",
  "DOCASE", "CASE", "OTHERWISE", "ENDCASE", "ENDDO", "MEMVAR", "WHILE",
  "LOOP", "FOR", "NEXT", "TO", "STEP", "LE", "GE", "FIELD", "IN",
  "PARAMETERS", "PLUSEQ", "MINUSEQ", "MULTEQ", "DIVEQ", "POWER", "EXPEQ",
  "MODEQ", "PRIVATE", "BEGINSEQ", "BREAK", "RECOVER", "RECOVERUSING",
  "ALWAYS", "ENDSEQ", "DO", "WITH", "SELF", "LINE", "MACROVAR",
  "MACROTEXT", "AS_ARRAY", "AS_BLOCK", "AS_CHARACTER", "AS_CLASS",
  "AS_DATE", "AS_LOGICAL", "AS_NUMERIC", "AS_OBJECT", "AS_VARIANT",
  "DECLARE", "OPTIONAL", "DECLARE_CLASS", "DECLARE_MEMBER",
  "AS_ARRAY_ARRAY", "AS_BLOCK_ARRAY", "AS_CHARACTER_ARRAY",
  "AS_CLASS_ARRAY", "AS_DATE_ARRAY", "AS_LOGICAL_ARRAY",
  "AS_NUMERIC_ARRAY", "AS_OBJECT_ARRAY", "PROCREQ", "CBSTART", "DOIDENT",
  "FOREACH", "DESCEND", "DOSWITCH", "ENDSWITCH", "WITHOBJECT", "ENDWITH",
  "NUM_DATE", "TIMESTAMP", "EPSILON", "HASHOP", "THREAD", "POST", "'='",
  "'<'", "'>'", "'$'", "'+'", "'-'", "'*'", "'/'", "'%'", "UNARY", "PRE",
  "'&'", "'@'", "'\\n'", "';'", "','", "'('", "')'", "'{'", "'}'", "':'",
  "']'", "'['", "'|'", "$accept", "Main", "Source", "Line", "Function",
  "$@1", "$@2", "$@3", "$@4", "FunScope", "Params", "AsType",
  "AsArrayType", "StrongType", "AsArray", "ParamList", "Statement", "$@5",
  "$@6", "$@7", "$@8", "$@9", "$@10", "$@11", "CompTimeStr", "CrlfStmnt",
  "$@12", "LineStat", "ControlError", "FunScopeId", "Statements",
  "EmptyStats", "ExtList", "DynList", "IdentName", "NumValue", "DateValue",
  "TimeStampValue", "NumAlias", "NilValue", "NilAlias", "LiteralValue",
  "LiteralAlias", "CodeBlockAlias", "Logical", "LogicalAlias", "SelfValue",
  "SelfAlias", "Array", "ArrayAlias", "ArrayAt", "ArrayAtAlias", "Hash",
  "HashAlias", "HashList", "Variable", "VarAlias", "MacroVar",
  "MacroVarAlias", "MacroExpr", "MacroExprAlias", "MacroAny", "FieldAlias",
  "FieldVarAlias", "AliasId", "AliasVar", "AliasExpr", "VariableAt",
  "VariableAtAlias", "FunIdentCall", "FunCall", "FunRef", "FunCallAlias",
  "ArgList", "Argument", "RefArgument", "ExtArgument", "ObjectData",
  "SendId", "ObjectRef", "ObjectDataAlias", "ObjectMethod",
  "ObjectMethodAlias", "SimpleExpression", "Expression", "ExtExpression",
  "EmptyExpression", "LValue", "LeftExpression", "PostOp", "ExprPostOp",
  "ExprPreOp", "ExprUnary", "ExprEqual", "ExprAssign", "ExprPlusEq",
  "ExprMinusEq", "ExprMultEq", "ExprDivEq", "ExprModEq", "ExprExpEq",
  "ExprOperEq", "ExprMath", "ExprBool", "ExprRelation", "ArrayIndex",
  "IndexList", "ElemList", "BlockHead", "@13", "BlockVars", "BlockVarList",
  "BlockExpList", "CodeBlock", "@14", "$@15", "@16", "ExpList",
  "PareExpList", "PareExpListAlias", "IfInline", "IfInlineAlias",
  "VarDefs", "$@17", "$@18", "$@19", "$@20", "VarList", "ExtVarList",
  "ExtVarDef", "VarDef", "@21", "DimList", "DimIndex", "FieldsDef", "$@22",
  "FieldList", "InAlias", "MemvarDef", "$@23", "MemvarList", "Declaration",
  "$@24", "$@25", "$@26", "DecDataList", "ClassInfo", "DecMethod", "$@27",
  "DecData", "$@28", "DecList", "DecListExt", "DummyArgList",
  "DummyArgument", "FormalList", "OptList", "ExecFlow", "ErrEndFor",
  "ErrEndCase", "ErrEndIf", "ErrEndWith", "ErrEndSeq", "ErrEndWhile",
  "ErrEndSwitch", "IfEndif", "IfBegin", "$@29", "@30", "IfElse", "$@31",
  "IfElseIf", "$@32", "@33", "$@34", "@35", "EndIf", "EndIfID", "DoCase",
  "EndCase", "EndCaseID", "DoCaseStart", "$@36", "DoCaseBegin", "Cases",
  "$@37", "@38", "$@39", "@40", "Otherwise", "$@41", "$@42", "$@43",
  "DoWhile", "@44", "$@45", "WhileBegin", "EndWhile", "EndWhileID",
  "ForNext", "@46", "@47", "@48", "ForAssign", "StepExpr", "ForStatements",
  "EndForID", "ForVar", "ForList", "ForExpr", "ForArgs", "ForEach", "$@49",
  "@50", "@51", "Descend", "DoSwitch", "$@52", "EndSwitch", "EndSwitchID",
  "SwitchStart", "$@53", "SwitchBegin", "SwitchCases", "$@54", "$@55",
  "SwitchDefault", "$@56", "$@57", "BeginSeq", "@58", "@59", "$@60",
  "$@61", "EndSeqID", "BlockSeq", "AlwaysSeq", "Always", "RecoverSeq",
  "RecoverEmpty", "RecoverUsing", "DoProc", "DoArgs", "DoArgList",
  "DoArgument", "WithObject", "@62", "EndWithID", "Crlf", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
      61,    60,    62,    36,    43,    45,    42,    47,    37,   365,
     366,    38,    64,    10,    59,    44,    40,    41,   123,   125,
      58,    93,    91,   124
};
# endif

#define YYPACT_NINF -880

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-880)))

#define YYTABLE_NINF -650

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
    4580,   220,  -880,   251,  -880,    53,    63,  1044,   542,   -19,
    6884,  -880,  -880,  -880,  3160,  3160,  3160,  -880,   122,  1376,
    6884,  6884,  -880,  1523,  -880,   251,  4039,  -880,  -880,   123,
    -880,  1672,  1788,  -880,   251,   283,  -880,   157,  -880,  -880,
    3160,  -880,  3160,  2143,   208,  -880,   171,  4039,  -880,  -880,
    6884,  -880,  -880,   240,   134,  -880,  -880,  7008,  6388,  8042,
     264,  4711,  -880,  -880,   363,  -880,    49,   140,   140,   140,
    7668,    58,  8042,    70,  8042,  8042,    77,  8042,    80,  8042,
      82,  8042,   253,  8042,    83,  8042,   140,  7668,   284,  7668,
     296,  7668,   265,  3550,  8042,   140,   124,   301,  8042,  -880,
      46,  8042,    62,   222,  8042,    75,  8042,  1266,  -880,  -880,
    -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,   220,
      88,    87,  7668,   126,  8042,  -880,  -880,  -880,  -880,  -880,
    -880,   987,  -880,  5110,  1316,  -880,  6884,  -880,  -880,  -880,
    5238,   467,  -880,  -880,  -880,  -880,  -880,  6884,  -880,   220,
    -880,  -880,  3160,  3160,  6884,  -880,  -880,  -880,  -880,  -880,
    -880,  6884,  -880,  -880,  -880,   123,  -880,  -880,  -880,  -880,
    6884,  6884,  3160,   572,  1840,  2052,   227,  1080,  2177,  7333,
    2358,    86,  2625,  7577,   926,  1688,   -64,  2246,  2980,   836,
    7394,  -880,  3701,  7455,  -880,  3925,  1492,  -880,  -880,  -880,
    -880,  -880,  -880,  -880,  -880,  2657,   257,  7516,  2911,  -880,
     320,  -880,   328,  -880,  -880,  8086,  -880,  -880,   220,  3160,
    -880,    38,    34,    45,   -81,   140,    67,    96,     1,   135,
      55,   269,     4,   137,   339,  3160,  3160,  8086,   333,  6884,
    -880,  -880,  -880,   171,    29,   292,  7712,  8451,   311,   220,
     308,   313,  3415,  6512,  -880,   244,   -81,   198,  -880,    -8,
    6884,  8244,  -880,  6884,  -880,  3160,   -49,  -880,   334,  4039,
     108,  -880,  -880,  -880,  4415,  -880,   181,  -880,  -880,  -880,
    -880,   220,  -880,  -880,  -880,  -880,  -880,  3160,  3160,  -880,
    6636,  6760,  -880,   -34,  -880,  -880,  -880,  -880,  -880,  -880,
    -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,
    -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,
    -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,
    6636,  -880,  -880,    53,    63,   438,  -880,   439,  -880,   441,
    -880,  -880,   444,  -880,   445,  -880,    82,  -880,   253,  -880,
     447,  -880,  -880,  -880,  -880,  -880,   450,   454,  -880,   455,
    -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,
    -880,  -880,  6636,  -880,  8042,  -880,  -880,  -880,  -880,  -880,
    6884,  -880,  -880,  6884,  6884,  6884,  6884,  6884,  6884,  6884,
    8042,  -880,  -880,  -880,  -880,  -880,  -880,  6884,  -880,  -880,
    -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,
    -880,   220,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,
    -880,  -880,  -880,  -880,  -880,  -880,  -880,   487,  1227,  -880,
    -880,  -880,   934,  -880,   147,  -880,  -880,  -880,  -880,   430,
    5366,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,
    -880,  -880,  -880,  -880,  -880,  -880,  1572,   421,   331,  5494,
    -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,   408,  -880,
    -880,  -880,  8244,  -880,  8321,   375,  -880,   375,  4122,  7325,
    -880,  -880,   323,  -880,  -880,  -880,  -880,  3160,  -880,  -880,
    -880,  -880,  -880,  -880,  -880,  -880,  3160,  -880,  -880,  -880,
    -880,  -880,  -880,  -880,  -880,  -880,  -880,  6884,  6884,  6884,
    6884,  6884,  6884,  6884,  6884,  6884,  6884,  6884,  6884,  6884,
    6884,  6884,  6884,  6884,  6884,   220,  -880,   220,  3160,  -880,
    3160,  -880,  8321,   353,  -880,  -880,  -880,  8451,   413,  -880,
    -880,  6884,  -880,  8451,   105,   413,   353,  6884,   220,  8244,
    -880,   425,  -880,  -880,  3160,   220,  -880,  -880,  -880,  -880,
    -880,   474,   220,  -880,  8451,   361,   371,  7132,   239,   461,
    -880,   494,  3925,  4217,   376,  -880,  7256,  4039,  8244,  -880,
    3160,   343,  -880,  -880,    99,   168,   -81,    67,    50,     1,
    6884,  -880,  6884,  6636,  -880,  -880,   384,   389,   188,  -880,
    3925,  -880,  3925,  -880,  6760,   370,   200,   223,  -880,  3925,
    3925,  3925,  3925,  3925,  3925,  3925,  3925,  -880,  3925,   394,
    6262,  -880,  6884,  -880,  -880,   487,  -880,  3160,  3160,  -880,
    6884,   220,  -880,  -880,   421,  -880,  -880,  -880,  6884,  -880,
    1909,  -880,  -880,  6884,   512,   684,   160,  3160,  -880,  -880,
    7132,  -880,  -880,  8316,  3925,  7325,  7325,  7325,  3241,  3241,
     468,  7325,  3241,  3241,  3241,   263,   263,   277,   277,   277,
    3925,  -880,  -880,  -880,  -880,   521,   684,  8086,   220,  -880,
    3160,  -880,  3925,  -880,  3160,  3160,   220,  -880,   220,  3925,
    4982,  -880,   520,  -880,  7864,   311,  7712,  -880,  -880,  -880,
    3160,  7757,  -880,  -880,  -880,  -880,  8131,  -880,  7132,  3160,
    3925,  -880,   427,  -880,  -880,  6134,   375,  -880,  8276,  -880,
    -880,   220,   429,   220,   431,  6636,  -880,  -880,  6760,  -880,
    -880,  6884,   436,  4852,   451,  6134,   331,  6884,  -880,   260,
     302,   331,  -880,  6884,  -880,   220,  6134,  3925,   220,  6884,
    -880,  -880,  3925,   550,  -880,  -880,  6884,   435,  -880,   446,
    5622,  6884,  -880,  -880,  -880,  8451,   526,  -880,  8451,  -880,
    -880,  -880,   220,  7908,  3160,  8451,   460,   449,   464,  8451,
    -880,  -880,  -880,  -880,   189,  -880,  -880,   473,   466,   464,
    -880,  8451,  -880,   323,  7256,   495,   838,  -880,  6884,  -880,
    8175,  -880,  8175,  -880,  -880,  3925,  -880,  -880,  -880,  -880,
     331,  8175,  -880,  8175,  -880,  -880,  5878,   331,  5878,  -880,
     220,  -880,  3925,  6884,  3925,  6884,  7132,  -880,  3925,  -880,
    6884,  -880,   393,  -880,  3160,  8451,  8367,  -880,  8451,  7953,
     519,  -880,  3160,   220,  8451,  7801,  -880,  -880,  -880,  -880,
    -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,
    -880,   478,   484,  8451,   483,  5622,  -880,   488,   493,  5750,
    -880,  -880,  -880,  1207,  5750,  5750,   220,  3925,  3925,   496,
      61,  -880,  3160,  -880,   220,   220,  8388,  -880,  6884,  -880,
     220,  3160,  8451,   464,  7997,  -880,  -880,  -880,  -880,   497,
     220,   220,  8238,  -880,   220,  -880,  5622,   220,   220,  -880,
    5750,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,
    -880,  -880,  -880,  5750,  -880,  6884,  -880,  -880,   555,  6006,
    6006,  6884,  -880,  -880,   281,  -880,  -880,  8409,  -880,  3160,
    8451,   170,  -880,  -880,  -880,  8451,  -880,  -880,  -880,  -880,
    -880,  -880,   257,   220,  -880,  -880,   220,  -880,  -880,   285,
    6884,  -880,  6884,  -880,  8430,  -880,  -880,  6134,  -880,  -880,
    1862,  6134,  -880,  -880,   289,  6884,  -880,  1941,  -880,  6134,
    -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,
    -880,   304,  -880,  3160,  -880,  -880,  -880,  -880,  -880,  -880,
    -880,  -880,  -880,  -880
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,     0,   120,    78,   145,   139,   140,   397,   399,     0,
       0,   147,   150,   151,   129,   127,   128,    29,   124,    80,
       0,     0,   528,   427,   546,   123,     0,   122,   121,   421,
     125,   403,    83,   613,    73,     0,   153,     0,   166,   167,
       0,   126,     0,     0,   136,   376,   638,     0,   137,   600,
       0,   141,   142,   138,     0,   660,   661,     0,   301,     0,
       0,     0,     8,     6,     0,     7,   164,   310,   312,   313,
       0,   311,     0,   314,     0,     0,   316,     0,   317,     0,
     318,     0,   319,     0,   320,     0,   324,     0,   171,     0,
     172,     0,   323,     0,     0,   321,   322,   325,     0,   237,
     327,     0,   329,     0,     0,   330,     0,     0,    96,    96,
      96,    96,   347,   348,   349,   350,   351,   352,    96,   386,
     315,   326,     0,   328,     0,    86,    87,    88,     5,    96,
     476,     0,   477,     0,     0,   478,     0,   479,   481,   482,
       0,   588,   480,    96,   483,     4,     9,     0,    77,     0,
     144,   143,     0,     0,     0,   130,   132,   129,   127,   128,
     124,     0,   134,   131,   123,     0,   135,   133,   136,   138,
       0,     0,     0,   261,   263,   264,   262,   265,   267,   268,
     270,   271,   272,   294,   275,   276,   323,   273,   274,   277,
     278,   298,   281,   283,   293,   391,     0,   287,   288,   289,
     285,   286,   290,   291,   292,   266,   495,   295,   280,    91,
       0,   116,     0,   118,    75,     0,   334,   335,     0,     0,
      76,   164,   171,   172,   304,   322,   308,   327,   307,   330,
       0,     0,   309,   328,   173,     0,     0,     0,   626,     0,
      72,   171,   172,   638,     0,   433,     0,    35,     0,     0,
      94,     0,   378,     0,   637,   164,   575,   326,   576,     0,
       0,     0,   401,     0,   169,     0,     0,   250,     0,     0,
       0,   251,   244,   374,   302,   243,     0,   255,   256,   254,
       1,     0,    14,    12,    13,    11,    10,     0,     0,   165,
     301,     0,   217,     0,   219,   220,   189,   190,   191,   211,
     146,   218,   195,   148,   221,   196,   198,   152,   223,   197,
     154,   225,   200,   156,   157,   201,   158,   202,   161,   224,
     199,   226,   208,   212,   168,   192,   213,   170,   193,   214,
     301,    64,   229,     0,     0,   189,   176,     0,   180,     0,
     181,   183,     0,   182,     0,   184,     0,   185,     0,   186,
       0,   187,   175,   178,   179,   209,     0,   216,   177,     0,
     188,   210,   227,    62,   228,   235,   203,   240,    61,   232,
     205,   258,   301,   230,     0,   206,   260,    63,   231,   207,
       0,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,   333,    67,    66,    69,    70,    68,     0,   389,   149,
     222,   394,    65,   234,   194,   215,   396,    60,   233,   204,
      59,     0,   500,   508,   507,   485,   489,   484,   488,   490,
     487,   509,   510,   512,   513,   511,   514,     0,     0,   491,
     506,   103,   399,   110,   124,   101,    99,   112,   102,     0,
       0,   100,    98,   521,   486,   532,   538,   520,   523,   522,
     525,   526,   524,   527,   517,   519,     0,     0,     0,     0,
     593,   592,   595,   596,   594,   598,   599,   597,     0,   590,
     591,    71,     0,    97,    35,     0,   405,     0,     0,   336,
     338,   337,     0,   239,    48,    43,    40,     0,    41,    42,
      39,    44,    46,    53,    54,    50,     0,    51,    52,    49,
      55,   269,    47,   296,   279,   282,   284,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   297,     0,     0,    89,
       0,    90,    35,    81,   407,   409,   529,    35,     0,   561,
     560,     0,   174,    35,   425,     0,    84,     0,     0,     0,
     636,     0,    16,   431,     0,     0,   435,   438,    36,   446,
     437,     0,     0,   379,    35,     0,   380,   640,   164,   298,
     646,   293,     0,   295,   639,   642,     0,     0,     0,   650,
       0,     0,   393,   159,   245,   246,   247,   249,   239,   248,
       0,   160,   301,   301,   155,    15,    19,    21,     0,   241,
     302,   299,   300,   371,     0,   370,     0,     0,   253,   340,
     341,   342,   343,   344,   346,   345,   339,   252,   384,   387,
       0,   498,     0,   492,   503,     0,   493,     0,     0,   113,
       0,     0,   535,   515,     0,   541,   516,   543,     0,   610,
       0,   608,    79,     0,   413,    37,     0,     0,   398,   400,
     301,    45,    56,   359,   360,   361,   366,   367,   364,   365,
     358,   369,   362,   363,   368,   353,   354,   355,   356,   357,
     392,   496,    92,   117,   119,   410,    37,     0,     0,   429,
       0,   428,   556,   423,     0,     0,     0,   404,     0,   627,
       0,    74,     0,    17,   450,   448,     0,   442,   444,   436,
       0,   454,    95,    93,   382,   377,     0,   641,   643,     0,
     579,   580,   582,   577,   601,     0,     0,   257,     0,   162,
     375,     0,     0,     0,     0,   301,   236,   372,     0,   238,
     259,     0,     0,     0,     0,     0,     0,     0,   494,     0,
       0,     0,   539,     0,   518,     0,     0,   604,     0,     0,
     589,   609,   418,     0,   416,    38,     0,   417,   406,     0,
       0,     0,   412,   408,    82,    35,     0,   426,    35,   422,
      85,   614,     0,   126,     0,    35,     0,   451,   452,    35,
     443,   445,   434,   448,     0,   440,   457,     0,   455,   456,
     381,    35,   644,   578,     0,   586,     0,   402,   301,    20,
      31,    22,    31,   242,   373,   385,   388,   390,   499,   501,
       0,    31,   104,    31,   106,   533,     0,     0,     0,   544,
       0,   611,   606,     0,   419,     0,   301,   497,   411,   430,
       0,   424,   631,    18,     0,    35,    35,   464,    35,     0,
       0,   449,     0,     0,    35,     0,   383,   581,   587,   583,
     653,   652,   655,   656,   654,   658,   657,   659,   651,   163,
      32,     0,    33,    35,     0,     0,   504,     0,     0,     0,
     540,   536,   542,     0,     0,     0,     0,   415,   420,     0,
     562,   634,     0,   615,     0,     0,    35,   470,   301,   465,
       0,     0,    35,   453,     0,   441,   439,   447,   458,   459,
       0,     0,     0,    57,     0,   502,     0,     0,     0,   534,
       0,   549,   548,   551,   552,   550,   553,   554,   555,   545,
     547,   605,   612,     0,   395,     0,   557,   635,   628,     0,
       0,   301,   471,   463,     0,   461,   432,    35,   467,     0,
      35,     0,   584,    24,    34,    35,    26,   505,   105,   107,
     537,   607,   563,     0,   630,   616,     0,   632,   633,     0,
     301,   466,   301,   468,    35,   473,   460,     0,    58,   558,
       0,     0,   472,   462,     0,   301,   474,     0,   585,     0,
     619,   618,   621,   622,   620,   624,   623,   625,   617,   629,
     469,     0,   567,   565,   569,   568,   571,   572,   570,   573,
     564,   559,   475,   566
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -880,  -880,  -880,    93,   564,  -880,  -880,  -880,  -880,  -880,
    -545,  -196,   -46,   -78,  -604,  -880,   241,  -880,  -880,  -880,
    -880,  -880,  -880,  -880,  -880,   609,  -880,  -425,  -880,  -880,
     -74,   589,  -880,  -880,   -14,  1640,  1829,  1891,   543,   442,
     544,   754,   545,   548,   782,   551,   902,   552,  1050,   553,
    1126,   554,  1251,   556,  -880,  1907,   557,   102,   558,   218,
     560,   326,   401,  -880,  3808,  2007,  2142,  2209,  -880,  -165,
    2287,  -244,  -880,  -284,  -634,  -236,   -50,  2408,  -335,  -880,
    -880,  2476,  -880,  -229,  3815,  -572,  -539,  -880,  2792,  -880,
    2614,  2676,  -880,  -880,  2948,  -880,  -880,  -880,  -880,  -880,
    -880,  2994,  -880,  -880,  -880,  4312,  -880,  -880,  -880,  -880,
    -880,  -880,  -880,  1398,  -880,  -880,  -880,    -6,   471,   561,
    1624,   562,  -880,  -880,  -880,  -880,  -880,  -139,   419,   -20,
    -212,  -880,   127,  -880,  -880,  -880,  -880,  -880,  -880,  -880,
     424,   243,  -880,  -880,  -880,  -880,  -880,  -549,  -880,  -658,
    -880,  -880,  -880,  -879,  -299,   -39,  -679,  -880,   -84,  -131,
    -120,  -128,  -123,  -111,  -103,  -880,  -880,  -880,  -880,   236,
    -880,  -880,  -880,  -880,  -880,  -880,  -408,  -880,  -880,  -421,
    -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,   213,
    -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,
    -880,  -880,  -880,  -880,  -880,  -301,  -880,   104,  -880,  -110,
    -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,    43,  -880,
    -880,  -880,  -880,  -880,  -880,  -880,    48,  -880,  -880,  -880,
    -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,  -880,
    -880,  -880,   448,  -880,  -540,  -880,  -880,  -880,  3470
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    60,    61,   435,    63,   721,   723,   722,   724,    64,
     861,   557,   754,   558,   502,   862,   436,   239,   147,   215,
     678,   237,   688,   527,   251,   214,   149,   437,   438,   439,
     733,   977,   210,   212,    66,   173,   174,   175,    70,   176,
      72,   177,    74,    75,   178,    77,   179,    79,   180,    81,
     181,    83,   182,    85,   270,   183,    87,   184,    89,   185,
      91,   186,    93,    94,   298,   187,   188,   189,    98,    99,
     190,   191,   101,   598,   271,   272,   599,   192,   279,   103,
     104,   193,   106,   194,   600,   603,   275,   230,   196,   391,
     197,   198,   199,   110,   200,   112,   113,   114,   115,   116,
     117,   201,   202,   203,   204,   362,   293,   276,   119,   252,
     565,   566,   619,   205,   397,   732,   620,   266,   207,   122,
     208,   124,   125,   152,   153,   580,   236,   475,   533,   534,
     476,   753,   645,   646,   126,   235,   544,   686,   127,   219,
     538,   441,   694,   554,   700,   784,   696,   249,   701,   698,
     779,   776,   787,   934,   935,   777,   778,   129,   421,   422,
     449,   423,   424,   425,   426,   130,   131,   525,   760,   427,
     735,   428,   622,   865,   737,   906,   429,   430,   132,   454,
     455,   133,   218,   134,   456,   630,   869,   743,   910,   457,
     631,   816,   745,   135,   746,   873,   136,   919,   920,   137,
     766,   953,   979,   541,   926,   978,  1000,   258,   259,   711,
     712,   138,   795,   900,   967,   849,   139,   468,   469,   470,
     140,   260,   141,   640,   820,   876,   641,   748,   875,   142,
     238,   832,   928,   970,   988,   548,   955,   956,   883,   884,
     885,   143,   254,   574,   575,   144,   715,   858,   442
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     209,   211,   213,   535,   206,   697,   450,   483,   273,   569,
     463,   451,   221,   465,   477,   629,   759,   570,   466,   623,
     626,   464,   789,   452,   571,   535,   245,   707,   246,   248,
     467,   453,   727,   255,   629,   633,   636,   371,   781,   608,
     401,   755,   785,  -305,   576,   277,   606,  -303,   551,  -321,
     448,   291,   959,   719,  -306,   617,   296,   462,   296,   440,
     296,   296,   330,   296,   539,   296,   459,   296,   291,   296,
     324,   296,   755,   296,   289,   296,   524,   296,   582,   335,
     296,   327,   367,   974,   296,   289,  -237,   296,   607,   150,
     296,   604,   296,    62,   300,  -319,   991,   605,   371,   151,
     483,   501,    88,   365,   588,   503,   303,   154,   296,   925,
     296,   376,   504,   307,   505,   506,   310,   577,   313,   318,
    -319,  -319,   316,   401,   399,   -30,   -30,   372,   222,   526,
     458,  -329,   367,   291,  -326,   289,   291,   241,   474,   474,
    -319,  -319,  -319,  -319,  -305,  -319,  -319,   780,  -303,    88,
    -111,  -111,    55,    56,   282,  -306,   804,   684,   482,   234,
     893,   241,   406,    88,   290,   540,   899,   244,   792,   -96,
     -96,   376,   241,   406,   241,   290,   241,   241,   291,   241,
    -237,   241,  -237,   241,   895,   241,   524,   241,   372,   241,
     291,   241,   879,   241,   291,    88,   241,  -325,   -96,   -96,
     241,   474,   291,   241,   324,   537,   241,   291,   241,   291,
     -96,   -96,   291,   744,   291,   291,  -319,   738,    90,   291,
     291,   543,   537,   474,   241,   290,   241,   250,   291,  -164,
     685,  -164,   555,   590,   401,    88,  -311,   591,   564,   568,
     253,    65,    88,   128,   223,   -96,   -96,   -96,   -96,   -96,
     -96,   581,   262,   242,   894,   584,   291,   864,   291,   859,
     263,  -311,  -311,   300,   280,    90,   867,   291,   868,   291,
     -96,   -96,   291,   596,   597,   289,   966,   242,   644,    90,
     289,  -311,  -311,  -311,  -311,   756,  -311,  -311,   242,   316,
     242,   757,   242,   242,  -171,   242,  -574,   242,  -171,   242,
    -171,   242,   284,   242,   285,   242,   593,   242,   629,   242,
     594,    90,   242,   725,   842,   726,   242,   532,   843,   242,
     324,   514,   242,   569,   242,   725,    92,   729,   450,   450,
     291,   570,   327,   451,   451,   514,   675,   365,   571,   532,
     242,   679,   242,    55,    56,   452,   452,   683,   725,   933,
     730,    90,   374,   453,   453,    38,    39,  -311,    90,   291,
     277,   243,  -645,  -645,  -645,   290,   287,   288,   704,  -574,
     290,   585,   448,   448,   -96,   -96,   277,   519,   520,   521,
     522,   523,   524,    55,    56,   278,   811,    92,   -96,   -96,
     165,   330,   933,   521,   522,   523,   297,   291,   297,   390,
     297,   297,   547,   297,    54,   297,   960,   297,   961,   297,
     960,   297,   972,   297,   960,   297,   990,   297,   553,   297,
     297,   933,   561,   933,   297,    55,    56,   297,   813,   960,
     297,  1002,   297,   627,   628,   758,   933,   559,   443,   444,
     562,   716,    71,    55,    56,   528,   638,   639,   297,   290,
     297,    55,    56,   530,    55,    56,   524,   881,   882,    92,
     635,   447,   416,   583,   569,   535,    92,   417,    71,   290,
     717,   121,   570,   651,   289,   300,   241,   303,   677,   571,
     307,   310,   652,   318,   460,   444,   399,    90,   418,    71,
     401,   406,   241,   702,   705,   526,   706,   232,    55,    56,
     647,   708,   728,    71,   413,   414,   450,   415,   416,   463,
     -23,   451,   465,   417,   673,   -25,   674,   466,   257,   731,
     464,  -414,   419,   452,   420,   264,   514,   415,   416,   467,
     761,   453,   121,   417,   418,   337,    55,    56,   680,   772,
     695,   299,    88,   720,   483,   -28,   -28,   692,    55,    56,
     448,  -132,   794,   568,   418,   800,   462,   802,   323,   823,
     326,    88,   329,   255,   357,   806,   474,   825,   461,   829,
     420,   826,   831,   830,   839,    71,  -132,  -132,  -132,   837,
     807,  -310,    71,   841,  -647,  -647,  -647,   838,   419,   840,
     420,   845,   242,   405,   848,   846,  -132,  -132,  -132,  -132,
     844,  -132,  -132,   894,   121,   901,  -310,  -310,   242,   902,
     904,   121,   148,   739,   740,   907,   736,  -648,  -648,  -648,
     908,   954,   941,   924,   741,   283,  -310,  -310,  -310,  -310,
     762,  -310,  -310,   474,   220,   542,   336,   338,   340,   887,
     889,   341,   890,   240,   343,   345,   347,   349,   897,   351,
     352,   353,  -132,   354,   358,   360,   546,   763,    90,   676,
     545,   973,   788,   474,   625,   853,   765,   903,  -132,   634,
     767,   768,  -132,   855,  -132,   803,   854,    90,  1001,    88,
     775,   713,   695,   750,   847,   856,   783,   775,   751,     0,
     932,   550,   791,   857,   568,   793,   938,     0,     0,     0,
     278,   331,  -310,     0,   291,   363,     0,     0,     0,   368,
       0,    71,   852,     0,   377,     0,   278,   392,   393,   394,
     395,     0,    88,     0,   573,     0,     0,   396,     0,     0,
     402,   810,   407,     0,     0,     0,     0,   817,   410,     0,
     257,   963,   914,     0,   965,   916,     0,     0,     0,   968,
     917,     0,   471,   915,    73,     0,     0,     0,   484,   835,
     836,     0,     0,     0,     0,     0,    92,     0,   976,     0,
     918,   493,   494,   495,   496,   497,   498,   499,   500,   532,
      73,     0,    76,     0,     0,    92,   863,     0,   863,   913,
       0,     0,    88,     0,     0,    90,     0,   863,     0,   863,
       0,    73,     0,     0,     0,     0,     0,     0,    76,     0,
       0,     0,     0,     0,     0,    73,     0,    88,     0,     0,
     886,     0,     0,     0,   880,   892,     0,     0,   783,    76,
       0,   892,     0,     0,     0,    88,     0,    88,    90,   983,
       0,     0,   985,    76,     0,  -325,   994,   339,    88,   996,
     984,     0,     0,     0,   997,   850,   444,   995,     0,   986,
       0,     0,    88,     0,     0,     0,   998,   987,   927,     0,
    -325,  -325,   365,     0,   999,   342,     0,   937,   415,   416,
     940,     0,    71,     0,   417,     0,   982,    73,   945,     0,
    -325,  -325,  -325,  -325,    73,  -325,  -325,     0,     0,     0,
       0,    71,    78,     0,     0,   418,     0,     0,    90,     0,
       0,   121,     0,     0,     0,    76,     0,     0,    88,   952,
      88,     0,    76,     0,     0,   964,     0,     0,    78,     0,
     121,     0,     0,    90,     0,  -171,     0,  -109,  -109,   419,
       0,   851,     0,  -132,     0,     0,    92,     0,     0,    78,
       0,    90,     0,    90,     0,     0,     0,     0,     0,     0,
    -171,  -171,   324,    78,    90,     0,  -325,    88,  -132,  -132,
    -132,    88,     0,     0,     0,     0,    88,    88,    90,  1003,
    -171,  -171,  -171,  -171,     0,  -171,  -171,     0,  -132,  -132,
    -132,  -132,     0,  -132,  -132,   344,     0,     0,     0,     0,
       0,     0,   411,   412,   413,   414,     0,     0,    88,     0,
       0,     0,    88,     0,     0,     0,    92,     0,     0,    71,
       0,     0,     0,    73,     0,    88,     0,   415,   416,     0,
       0,    88,    88,   417,    90,    78,    90,     0,   573,     0,
       0,    92,    78,     0,  -132,     0,     0,     0,   257,     0,
      80,    76,  -171,  -130,   418,     0,  -171,     0,  -171,    92,
    -132,    92,    71,     0,  -132,     0,  -132,     0,     0,    88,
       0,     0,    92,    88,     0,     0,    80,     0,  -130,  -130,
    -130,    88,     0,    90,     0,     0,    92,    90,   419,  -314,
     420,   121,    90,    90,     0,     0,     0,    80,  -130,  -130,
    -130,  -130,     0,  -130,  -130,     0,     0,     0,     0,     0,
       0,    80,     0,     0,  -314,  -314,   303,     0,     0,     0,
       0,     0,     0,     0,    90,     0,    82,     0,    90,     0,
       0,     0,    71,     0,  -314,  -314,  -314,  -314,     0,  -314,
    -314,    90,    92,   346,    92,     0,     0,    90,    90,     0,
       0,     0,    82,     0,  -130,     0,     0,    71,     0,     0,
       0,   121,     0,     0,     0,     0,     0,     0,     0,     0,
    -130,    78,     0,    82,  -130,    71,  -130,    71,     0,   573,
       0,     0,     0,    80,     0,    90,   121,    82,    71,    90,
      80,    92,     0,     0,    73,    92,     0,    90,     0,     0,
      92,    92,    71,     0,   121,     0,   121,     0,     0,   734,
    -314,     0,   291,    73,     0,     0,     0,   121,     0,   348,
       0,     0,    76,     0,   911,   444,     0,     0,     0,     0,
       0,   121,    92,     0,     0,     0,    92,     0,     0,     0,
       0,    76,   411,   624,   413,   414,     0,   415,   912,    92,
       0,    84,     0,   417,     0,    92,    92,     0,    71,    82,
      71,     0,     0,     0,     0,     0,    82,   415,   416,     0,
       0,     0,     0,   417,   418,   380,     0,    84,     0,   771,
       0,     0,     0,     0,     0,     0,     0,   121,     0,   121,
       0,     0,     0,    92,   418,     0,     0,    92,    84,     0,
     381,   382,     0,     0,   796,    92,     0,    71,   419,     0,
     420,    71,    84,     0,     0,     0,    71,    71,     0,    80,
     383,   384,   385,   386,   808,   387,   388,     0,   419,     0,
     420,    73,     0,   443,   444,   819,   121,     0,     0,     0,
     121,     0,    78,     0,   350,   121,   121,     0,    71,   827,
       0,     0,    71,     0,   445,   446,   447,   416,     0,    76,
       0,    78,   417,     0,     0,    71,     0,     0,     0,     0,
       0,    71,    71,     0,    73,     0,   389,   121,     0,     0,
       0,   121,     0,   418,    84,  -134,     0,     0,     0,     0,
       0,    84,     0,     0,   121,    82,   390,     0,   120,     0,
     121,   121,    76,     0,     0,   870,     0,   872,     0,    71,
    -134,  -134,  -134,    71,     0,     0,     0,   419,     0,   420,
       0,    71,     0,     0,   120,     0,     0,     0,     0,     0,
    -134,  -134,  -134,  -134,     0,  -134,  -134,     0,   121,     0,
       0,     0,   121,     0,    73,   120,     0,     0,     0,     0,
     121,     0,     0,     0,   905,     0,     0,     0,   909,   120,
       0,     0,     0,   921,   922,     0,     0,     0,     0,    73,
       0,     0,    76,     0,     0,     0,     0,     0,     0,    78,
       0,     0,     0,     0,     0,     0,  -134,    73,     0,    73,
      80,   356,     0,     0,     0,   947,     0,    76,     0,   950,
      73,   380,  -134,     0,     0,     0,  -134,     0,  -134,    80,
       0,     0,   951,     0,    73,    76,     0,    76,   957,   958,
      84,     0,    78,     0,     0,     0,   381,   382,    76,     0,
       0,   120,  -131,     0,     0,     0,     0,     0,   120,     0,
       0,     0,    76,     0,     0,     0,   383,   384,   385,   386,
       0,   387,   388,     0,     0,     0,     0,  -131,  -131,  -131,
     989,     0,     0,     0,     0,     0,    82,     0,     0,     0,
      73,     0,    73,     0,     0,     0,     0,  -131,  -131,  -131,
    -131,     0,  -131,  -131,     0,    82,     0,     0,     0,   443,
     444,     0,    78,     0,     0,     0,     0,     0,    76,     0,
      76,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     632,   446,   447,   416,     0,     0,     0,    78,   417,    73,
       0,     0,   390,    73,   123,     0,     0,    80,    73,    73,
       0,     0,     0,  -131,     0,    78,     0,    78,     0,   418,
      67,     0,     0,     0,     0,     0,     0,    76,    78,  -131,
     233,    76,     0,  -131,     0,  -131,    76,    76,     0,     0,
      73,     0,    78,     0,    73,     0,    67,   120,     0,     0,
      80,   233,     0,   419,     0,   420,     0,    73,     0,     0,
       0,  -135,     0,    73,    73,   123,     0,    67,    76,     0,
       0,    84,    76,     0,     0,     0,     0,  -172,     0,     0,
       0,    67,     0,    82,     0,    76,  -135,  -135,  -135,     0,
      84,    76,    76,     0,     0,     0,     0,   359,    78,     0,
      78,    73,  -172,  -172,   327,    73,  -135,  -135,  -135,  -135,
       0,  -135,  -135,    73,     0,     0,     0,     0,     0,     0,
      80,     0,  -172,  -172,  -172,  -172,    82,  -172,  -172,    76,
       0,     0,     0,    76,     0,     0,     0,   123,     0,     0,
       0,    76,     0,     0,   123,    80,     0,    78,     0,     0,
       0,    78,     0,    67,     0,     0,    78,    78,     0,     0,
      67,     0,  -135,    80,     0,    80,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    80,  -133,  -135,     0,
       0,     0,  -135,     0,  -135,     0,     0,     0,    78,     0,
      80,     0,    78,     0,  -172,     0,    82,     0,  -172,     0,
    -172,     0,  -133,  -133,  -133,    78,     0,     0,    84,    68,
       0,    78,    78,     0,     0,     0,     0,     0,   120,     0,
       0,    82,  -133,  -133,  -133,  -133,     0,  -133,  -133,  -312,
       0,     0,     0,     0,     0,    68,     0,   120,     0,    82,
       0,    82,     0,     0,     0,     0,    80,     0,    80,    78,
       0,    84,    82,    78,  -312,  -312,    68,     0,     0,   980,
     444,    78,     0,     0,     0,     0,    82,     0,     0,     0,
      68,    69,     0,   233,  -312,  -312,  -312,  -312,  -133,  -312,
    -312,     0,   415,   416,     0,     0,     0,    86,   417,    67,
       0,     0,     0,     0,  -133,    80,     0,    69,  -133,    80,
    -133,     0,     0,     0,    80,    80,   460,   444,     0,   981,
       0,     0,     0,    86,     0,     0,     0,     0,    69,     0,
       0,    84,    82,     0,    82,     0,     0,   749,   639,   415,
     416,     0,    69,     0,    86,   417,    80,     0,   992,   444,
      80,     0,    68,   419,     0,   420,    84,     0,    86,    68,
    -312,     0,   291,    80,     0,   120,   418,     0,     0,    80,
      80,   415,   416,     0,    84,     0,    84,   993,     0,     0,
       0,    82,     0,     0,     0,    82,     0,    84,     0,     0,
      82,    82,     0,     0,     0,     0,     0,    95,   418,     0,
     461,    84,   420,     0,     0,     0,     0,    80,   120,     0,
       0,    80,     0,     0,    69,     0,     0,     0,     0,    80,
       0,    69,    82,   224,     0,     0,    82,     0,     0,     0,
      86,     0,   419,     0,   420,     0,     0,    86,     0,    82,
       0,     0,     0,     0,   256,    82,    82,     0,     0,     0,
       0,  -313,     0,     0,   123,     0,     0,    84,    95,    84,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      67,     0,     0,   123,     0,     0,  -313,  -313,   120,     0,
       0,     0,     0,    82,     0,     0,     0,    82,    68,    67,
       0,     0,     0,     0,     0,    82,  -313,  -313,  -313,  -313,
       0,  -313,  -313,   120,     0,     0,    84,     0,     0,     0,
      84,     0,     0,     0,     0,    84,    84,     0,     0,     0,
       0,   120,     0,   120,     0,     0,     0,     0,     0,     0,
      95,     0,    96,     0,   120,     0,     0,    95,     2,     0,
       0,     0,     0,     0,   155,   156,     0,    84,   120,     0,
      69,    84,     0,     0,     0,   157,   158,   159,   225,   160,
       0,     0,     0,   162,    84,     0,    86,     0,     0,     0,
      84,    84,  -313,     0,   291,   163,  -316,   164,     0,   225,
      27,    28,     0,     0,     0,    30,   166,     0,     0,     0,
       0,   233,     0,    96,   167,     0,     0,     0,     0,    97,
       0,  -316,  -316,   307,   120,     0,   120,    67,    84,     0,
       0,     0,    84,     0,     0,     0,     0,    41,     0,     0,
      84,  -316,  -316,  -316,  -316,   226,  -316,  -316,   168,     0,
       0,     0,    48,     0,   123,     0,     0,     0,     0,     0,
       0,   169,     0,     0,     0,  -321,    97,     0,     0,     0,
      67,     0,     0,   120,     0,     0,     0,   120,     0,    68,
      97,   247,   120,   120,     0,    96,   586,     0,     0,     0,
    -321,  -321,    96,     0,     0,     0,     0,   100,    68,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -321,  -321,  -321,  -321,   120,  -321,  -321,  -316,   120,   291,
       0,     0,     0,   227,   123,     0,     0,     0,     0,     0,
       0,   120,     0,     0,     0,     0,     0,   120,   120,     0,
      67,    69,     0,     0,   227,     0,     0,     0,     0,   123,
       0,     0,    97,     0,     0,     0,     0,    86,   100,    97,
      69,     0,     0,     0,     0,    67,     0,   123,     0,   123,
       0,     0,     0,     0,     0,   120,    86,  -318,     0,   120,
     123,     0,     0,    67,     0,    67,  -321,   120,   291,     0,
       0,     0,     0,     0,   123,     0,    67,     0,     0,     0,
       0,     0,  -318,  -318,   313,     0,     0,     0,     0,     0,
      67,     0,     0,     0,     0,     0,    68,     0,   102,     0,
       0,   225,  -318,  -318,  -318,  -318,     0,  -318,  -318,     0,
     100,     0,     0,     0,     0,     0,     0,   100,     0,     0,
       0,     0,     0,     0,   228,     0,     0,     0,     0,     0,
     123,     0,   123,     0,     0,     0,     0,    95,     0,    68,
       0,     0,     0,     0,     0,   102,    67,     0,    67,     0,
       0,     0,     0,     0,     0,     0,    95,     0,    69,   102,
       0,     0,     0,     0,     0,     0,   105,     0,   587,     0,
       0,     0,     0,     0,    86,     0,     0,     0,  -318,   123,
     291,     0,     0,   123,     0,     0,     0,     0,   123,   123,
       0,     0,   229,     0,     0,    67,     0,     0,     0,    67,
       0,    69,     0,     0,    67,    67,     0,     0,     0,    68,
       0,     0,     0,   229,     0,     0,     0,    86,     0,     0,
     123,     0,     0,     0,   123,     0,     0,   105,     0,     0,
       0,   102,     0,     0,    68,     0,    67,   123,   102,     0,
      67,     0,     0,   123,   123,     0,   227,     0,     0,     0,
       0,     0,    68,    67,    68,     0,     0,     0,     0,    67,
      67,     0,     0,     0,     0,    68,     0,     0,     0,     0,
       0,    69,    96,     0,   256,     0,     0,     0,     0,    68,
       0,   123,     0,     0,     0,   123,     0,    86,     0,     0,
       0,    96,     0,   123,     0,     0,    69,    67,     0,   105,
       0,    67,     0,     0,   108,     0,   105,     0,     0,    67,
       0,     0,    86,     0,    69,     0,    69,    95,     0,     0,
       0,     0,     0,     0,  -320,     0,     0,    69,     0,     0,
      86,     0,    86,     0,     0,    68,     0,    68,     0,    97,
       0,    69,     0,    86,     0,     0,     0,     0,     0,  -320,
    -320,   318,     0,     0,     0,     0,  -315,    86,    97,     0,
       0,     0,     0,     0,     0,   108,   109,   589,     0,  -320,
    -320,  -320,  -320,     0,  -320,  -320,     0,     0,     0,     0,
       0,  -315,  -315,   399,    68,     0,     0,    95,    68,     0,
       0,     0,     0,    68,    68,     0,     0,    69,     0,    69,
       0,  -315,  -315,  -315,  -315,     0,  -315,  -315,     0,   225,
       0,     0,    95,    86,     0,    86,     0,   100,     0,     0,
       0,     0,     0,     0,     0,    68,     0,   109,     0,    68,
      95,     0,    95,     0,     0,   229,   100,   108,     0,     0,
       0,     0,    68,    95,   108,  -320,    69,   291,    68,    68,
      69,     0,    96,     0,     0,    69,    69,    95,     0,     0,
       0,     0,    86,     0,     0,     0,    86,     0,     0,     0,
       0,    86,    86,     0,     0,     0,    97,  -315,     0,   291,
       0,     0,   107,     0,     0,     0,    68,    69,     0,     0,
      68,    69,     0,     0,     0,     0,     0,     0,    68,   109,
       0,     0,     0,    86,    69,     0,   109,    86,   231,     0,
      69,    69,     0,    95,     0,    95,     0,     0,     0,    97,
      86,     0,    96,     0,     0,     0,    86,    86,     0,   231,
       0,     0,     0,     0,     0,     0,     0,     0,   102,     0,
       0,     0,     0,   107,     0,     0,     0,    96,    69,     0,
       0,     0,    69,     0,   227,     0,     0,   102,     0,     0,
      69,     0,    95,     0,    86,    96,    95,    96,    86,     0,
       0,    95,    95,     0,     0,     0,    86,     0,    96,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    97,
       0,     0,    96,     0,     0,     0,     0,   100,     0,     0,
       0,     0,     0,    95,     0,     0,   105,    95,     0,     0,
    -328,     0,     0,     0,    97,   107,     0,     0,     0,     0,
      95,     0,   107,     0,     0,   105,    95,    95,     0,     0,
       0,     0,    97,     0,    97,  -328,  -328,   406,   111,     0,
       0,     0,     0,     0,     0,    97,     0,     0,    96,     0,
      96,     0,     0,     0,     0,  -328,  -328,  -328,  -328,    97,
    -328,  -328,     0,     0,    95,     0,     0,   100,    95,     0,
       0,     0,     0,     0,     0,   102,    95,     0,     0,  -322,
       0,     0,     0,     0,   118,     0,     0,     0,     0,     0,
       0,     0,   100,     0,     0,     0,     0,    96,     0,   111,
       0,    96,     0,     0,  -322,  -322,    96,    96,     0,     0,
     100,     0,   100,     0,     0,    97,     0,    97,   102,     0,
       0,     0,     0,   100,  -322,  -322,  -322,  -322,     0,  -322,
    -322,  -328,     0,   291,     0,     0,     0,   100,    96,     0,
       0,     0,    96,   229,   108,   118,     0,     0,     0,     0,
       0,   231,     0,     0,     0,    96,     0,     0,     0,     0,
       0,    96,    96,   108,    97,     0,     0,     0,    97,     0,
       0,   111,     0,    97,    97,     0,     0,     0,   111,     0,
       0,     0,     0,     0,     0,     0,   105,     0,   102,     0,
       0,     0,     0,   100,     0,   100,     0,     0,     0,    96,
    -322,     0,   291,    96,     0,    97,   109,     0,     0,    97,
       0,    96,     0,   102,     0,     0,     0,   118,     0,     0,
       0,     0,    97,     0,   118,   109,     0,     0,    97,    97,
       0,   102,     0,   102,     0,     0,     0,     0,     0,     0,
       0,     0,   100,     0,   102,     0,   100,     0,     0,     0,
       0,   100,   100,     0,     0,     2,   105,     0,   102,     0,
       0,   155,   156,     0,     0,     0,    97,     0,     0,     0,
      97,     0,   157,   158,   159,     0,   160,     0,    97,     0,
     162,   105,     0,   100,     0,     0,     0,   100,     0,     0,
       0,     0,   163,     0,   164,     0,     0,    27,    28,   105,
     100,   105,    30,   166,     0,     0,   100,   100,     0,     0,
       0,   167,   105,     0,   102,     0,   102,     0,     0,     0,
       0,     0,   107,     0,   108,     0,   105,     0,     0,     0,
       0,     0,     0,     0,    41,     0,     0,     0,     0,     0,
       0,   107,     0,     0,   100,   168,     0,     0,   100,    48,
       0,     0,     0,     0,     0,     0,   100,     0,   169,     0,
       0,     0,     0,   102,     0,     0,     0,   102,     0,     0,
       0,     0,   102,   102,     0,     0,     0,     0,     0,     0,
     512,   513,   105,     0,   105,     0,   109,     0,     0,   514,
       0,     0,     0,     0,   108,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   102,     0,     0,     0,   102,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
       0,   102,     0,     0,     0,     0,     0,   102,   102,     0,
       0,   105,     0,     0,     0,   105,     0,   108,     0,   108,
     105,   105,   516,   517,   518,   519,   520,   521,   522,   523,
     108,     0,     0,     0,     0,     0,   109,     0,     0,   231,
       0,     0,     0,     0,   108,   102,     0,     0,     0,   102,
       0,     0,   105,     0,     0,     0,   105,   102,   111,     0,
       0,   109,     0,     0,     0,     0,     0,     0,     0,   105,
       0,     0,     0,     0,     0,   105,   105,   111,     0,   109,
       0,   109,   107,     0,     0,     0,     0,     0,     0,     0,
       2,     0,   109,     0,     0,     0,   155,   156,     0,     0,
     108,     0,   108,     0,   118,     0,   109,   157,   158,   159,
       0,   160,     0,   105,     0,   162,     0,   105,     0,     0,
       0,     0,     0,   118,     0,   105,     0,   163,     0,   164,
       0,     0,    27,    28,     0,     0,     0,    30,   166,     0,
     145,   146,     0,     0,     0,     0,   167,     0,     0,   108,
       0,     0,   107,   108,     0,     0,     0,     0,   108,   108,
       0,     0,   109,     0,   109,     0,     0,     0,     0,    41,
       0,     0,     0,     0,     0,     0,     0,   107,     0,     0,
     168,     0,     0,     0,    48,     0,     0,     0,     0,     0,
     108,   563,     0,   169,   108,   107,     0,   107,     0,     0,
       0,   286,     0,     0,     0,     0,     0,   108,   107,     0,
       0,   109,     0,   108,   108,   109,     0,     0,     0,     0,
     109,   109,   107,     0,     0,     2,     0,     4,   333,     0,
     334,   155,   156,     9,     0,     0,     0,     0,   111,    11,
      12,    13,   157,   158,   159,     0,   160,     0,     0,     0,
     162,   108,   109,     0,     0,   108,   109,     0,     0,   398,
       0,     0,   163,   108,   164,     0,     0,    27,    28,   109,
       0,     0,    30,   166,     0,   109,   109,     0,   107,     0,
     107,   167,     0,     0,   118,     0,     0,     0,     0,   473,
      36,     0,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    41,     0,     0,     0,   111,     0,
       0,     0,     0,   109,     0,   168,    45,   109,     0,    48,
       0,     0,     0,     0,     0,   109,     0,   107,   169,     0,
       0,   107,     0,   111,     0,     0,   107,   107,     0,     0,
       0,    54,     0,     0,     0,     0,   263,     0,    58,     0,
     529,   111,   531,   111,   118,     0,     0,     0,   536,     0,
       0,     0,     0,     0,   111,     0,     0,     0,   107,     0,
       0,     0,   107,     0,     0,     0,     0,     0,   111,   118,
    -329,     0,     0,     0,   552,   107,   556,     0,     0,   560,
       0,   107,   107,     0,     0,     0,     0,   118,     0,   118,
       0,   579,     0,     0,     0,  -329,  -329,   371,     0,     0,
     118,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   595,     0,     0,   118,  -329,  -329,  -329,  -329,   107,
    -329,  -329,     0,   107,   111,     0,   111,     0,     0,     0,
       0,   107,     0,     0,     0,   484,   485,   486,   487,   488,
     489,   490,   491,   492,     0,     0,     0,     0,   493,   494,
     495,   496,   497,   498,   499,   500,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,     0,   118,   111,     0,     0,     0,   111,     0,     0,
       0,     0,   111,   111,     0,   195,     0,   372,     0,     0,
       0,  -329,     0,   291,     0,   216,   217,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,     0,     0,     0,   111,   118,
       0,     0,     0,   118,     0,   261,     0,     0,   118,   118,
       0,   111,   195,   274,     0,     0,     0,   111,   111,     0,
     302,   621,   305,   306,     0,   309,     0,   312,     0,   315,
       0,   317,     0,   320,     0,   322,     0,   325,     0,   328,
     118,   355,   361,     0,   118,     0,   366,     0,     0,   370,
       0,     0,   375,     0,   379,   111,     0,   118,     0,   111,
       0,     0,     0,   118,   118,     0,     0,   111,   637,     0,
     404,     0,   409,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   642,     0,     0,   648,     0,   649,     0,     0,
       0,   195,   507,   508,     0,     0,   509,   510,   511,     0,
       0,   118,   472,     0,     0,   118,     0,     0,     0,   478,
       0,     0,     0,   118,   512,   513,   479,     0,     0,     0,
       0,     0,     0,   514,     0,   480,   481,     0,     0,     0,
       0,     0,     0,     0,     0,   671,     0,   672,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   681,     0,
       0,     0,     0,     0,     0,   687,     0,     0,   690,   691,
       0,   693,     0,     0,     0,   699,     0,     0,     0,     0,
       0,     0,   703,     0,     0,   515,   516,   517,   518,   519,
     520,   521,   522,   523,     2,     0,     4,     5,   714,     6,
     155,   156,     9,     0,   549,     0,     0,     0,    11,    12,
      13,   157,   158,   159,     0,   160,     0,     0,   572,   162,
       0,     0,     0,     0,     0,   578,     0,     0,   195,     0,
       0,   163,     0,   164,     0,     0,    27,    28,     0,     0,
     165,    30,   166,     0,     0,     0,     0,     0,     0,     0,
     167,   742,     0,     0,     0,     0,   602,     0,     0,    36,
       0,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   168,    45,     0,     0,    48,     0,
       0,     0,     0,    51,    52,     0,     0,   169,   764,   507,
     508,     0,     0,   509,   510,   511,   769,     0,   770,     0,
      54,     0,     0,     0,     0,    57,   782,    58,     0,    59,
       0,   512,   513,     0,     0,     0,     0,     0,     0,     0,
     514,     0,     0,     0,     0,     0,   797,     0,     0,     0,
       0,   799,     0,   801,     0,   609,     0,     0,   610,   611,
     612,   613,   614,   615,   616,     0,   809,     0,     0,   812,
     814,   815,   618,     0,     0,   818,     0,     0,   821,     0,
       0,     0,     0,     0,     0,     0,  -326,     0,     0,     0,
       0,     0,   515,   516,   517,   518,   519,   520,   521,   522,
     523,     0,   833,     0,     0,     0,     0,   650,     0,     0,
       0,  -326,  -326,   401,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -326,  -326,  -326,  -326,     0,  -326,  -326,     0,     0,
     866,     0,     0,     0,     0,     0,     0,   871,     0,     0,
     874,   484,   485,   486,   487,   488,   489,   490,   491,   492,
       0,     0,     0,     0,   493,   494,   495,   496,   497,   498,
     499,   500,     0,   896,     0,     0,     0,     0,     0,     0,
       0,     0,   653,   654,   655,   656,   657,   658,   659,   660,
     661,   662,   663,   664,   665,   666,   667,   668,   669,   670,
    -649,  -649,  -649,     0,     0,     0,   923,  -326,     0,   291,
       0,     0,     0,     0,   929,   930,   682,     0,     0,     0,
     936,     0,   689,     0,     0,     0,     0,     0,     0,     0,
     942,   943,     0,     0,   946,     0,     0,   948,   949,   292,
     294,   295,   572,   301,     0,   304,     0,     0,   308,     0,
     311,   710,   314,     0,     0,     0,   319,     0,   321,     0,
       0,     0,     0,     0,   332,   718,     0,     0,   364,     0,
       0,     0,   369,     0,   373,     0,     0,   378,     0,   602,
       0,     0,     0,   969,     0,     0,   971,     0,     0,     0,
       0,     0,   400,   403,     0,   408,     0,   195,     0,     0,
       0,     0,   507,   508,     0,   195,   509,   510,   511,     0,
       0,     0,     0,   747,     0,     0,     0,     0,   752,     0,
       0,     0,     0,     0,   512,   513,     0,     0,     0,     0,
       0,     0,     0,   514,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   292,   294,   295,   301,   304,
     308,   311,   314,     0,   319,   321,     0,     0,   332,     0,
     364,     0,   369,     0,   373,   378,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   400,     0,   403,
     408,     0,   592,   572,     0,   515,   516,   517,   518,   519,
     520,   521,   522,   523,     0,     0,     0,   364,     0,   369,
     373,   378,     0,   602,   403,   408,   805,     0,     0,     0,
       0,     0,   195,     0,     0,     0,     0,     0,   195,     0,
       0,     0,     0,     0,   822,     0,     0,     0,     0,   403,
       0,   824,     0,     0,     0,     0,   828,     0,     0,     0,
      -3,     1,     0,   -27,   -27,     2,     3,     4,     5,     0,
       6,     7,     8,     9,    10,     0,     0,     0,     0,    11,
      12,    13,    14,    15,    16,    17,    18,     0,     0,   710,
      19,     0,     0,     0,    20,    21,     0,    22,     0,     0,
       0,     0,    23,    24,    25,    26,     0,    27,    28,     0,
       0,    29,    30,    31,     0,     0,     0,     0,   877,     0,
     878,    32,    33,    34,     0,   195,     0,     0,    35,     0,
      36,    37,    38,    39,     0,     0,     0,     0,   314,     0,
       0,     0,     0,    40,    41,    42,    43,     0,     0,     0,
       0,     0,     0,     0,     0,    44,    45,    46,    47,    48,
      49,     0,    50,     0,    51,    52,     0,     0,    53,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    54,     0,    55,    56,     0,    57,     0,    58,     0,
      59,    -2,   281,     0,   -27,   -27,     2,     3,     4,     5,
       0,     6,     7,     8,     9,    10,     0,     0,     0,     0,
      11,    12,    13,    14,    15,    16,    17,    18,     0,     0,
     195,    19,     0,     0,     0,    20,    21,     0,    22,     0,
       0,     0,     0,    23,    24,    25,    26,     0,    27,    28,
       0,     0,    29,    30,    31,     0,     0,     0,     0,     0,
       0,     0,    32,    33,    34,     0,     0,     0,     0,    35,
       0,    36,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,     0,     0,
       0,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,     0,    50,     0,    51,    52,     0,     0,    53,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    54,     0,    55,    56,     0,    57,     0,    58,
       0,    59,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   431,     0,  -108,  -108,     2,     3,     4,
       5,     0,     6,     7,   432,     9,    10,  -115,  -115,  -115,
    -115,    11,    12,    13,    14,    15,    16,   433,   434,     0,
       0,     0,    19,     0,     0,   403,    20,    21,     0,    22,
    -115,  -115,  -115,  -115,    23,    24,    25,    26,  -115,    27,
      28,   373,     0,    29,    30,    31,     0,     0,     0,     0,
       0,     0,     0,    32,    33,    34,  -115,  -115,  -115,  -115,
      35,     0,    36,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,    41,    42,    43,     0,
       0,     0,     0,     0,     0,     0,     0,    44,    45,    46,
      47,    48,    49,  -115,    50,  -115,    51,    52,     0,     0,
      53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    54,     0,    55,    56,     0,    57,     0,
      58,  -115,    59,   431,     0,  -108,  -108,     2,     3,     4,
       5,     0,     6,     7,   432,     9,    10,     0,     0,  -114,
    -114,    11,    12,    13,    14,    15,    16,   433,   434,     0,
       0,     0,    19,     0,     0,     0,    20,    21,     0,    22,
       0,     0,  -114,  -114,    23,    24,    25,    26,  -114,    27,
      28,     0,     0,    29,    30,    31,     0,     0,     0,     0,
       0,     0,     0,    32,    33,    34,  -114,  -114,  -114,  -114,
      35,     0,    36,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,    41,    42,    43,     0,
       0,     0,     0,     0,     0,     0,     0,    44,    45,    46,
      47,    48,    49,  -114,    50,  -114,    51,    52,     0,     0,
      53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    54,     0,    55,    56,     0,    57,     0,
      58,   431,    59,  -108,  -108,     2,     3,     4,     5,     0,
       6,     7,   432,     9,    10,     0,     0,  -530,  -530,    11,
      12,    13,    14,    15,    16,   433,   434,     0,     0,     0,
      19,     0,     0,     0,    20,    21,     0,    22,  -530,  -530,
    -530,  -530,    23,    24,    25,    26,  -530,    27,    28,     0,
       0,    29,    30,    31,     0,     0,     0,     0,     0,     0,
       0,    32,    33,    34,     0,     0,     0,  -530,    35,     0,
      36,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,    41,    42,    43,     0,     0,     0,
       0,     0,     0,     0,     0,    44,    45,    46,    47,    48,
      49,  -530,    50,  -530,    51,    52,     0,     0,    53,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    54,     0,    55,    56,     0,    57,     0,    58,   431,
      59,  -108,  -108,     2,     3,     4,     5,     0,     6,     7,
     432,     9,    10,     0,     0,  -602,  -602,    11,    12,    13,
      14,    15,    16,   433,   434,     0,     0,     0,    19,     0,
       0,     0,    20,    21,     0,    22,  -602,  -602,  -602,  -602,
      23,    24,    25,    26,  -602,    27,    28,     0,     0,    29,
      30,    31,     0,     0,     0,     0,     0,     0,     0,    32,
      33,    34,     0,     0,     0,  -602,    35,     0,    36,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,    41,    42,    43,     0,     0,     0,     0,     0,
       0,     0,     0,    44,    45,    46,    47,    48,    49,  -602,
      50,  -602,    51,    52,     0,     0,    53,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
       0,    55,    56,     0,    57,     0,    58,   431,    59,  -108,
    -108,     2,     3,     4,     5,     0,     6,     7,   432,     9,
      10,     0,     0,  -531,  -531,    11,    12,    13,    14,    15,
      16,   433,   434,     0,     0,     0,    19,     0,     0,     0,
      20,    21,     0,    22,  -531,  -531,  -531,  -531,    23,    24,
      25,    26,  -531,    27,    28,     0,     0,    29,    30,    31,
       0,     0,     0,     0,     0,     0,     0,    32,    33,    34,
       0,     0,     0,  -531,    35,     0,    36,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
      41,    42,    43,     0,     0,     0,     0,     0,     0,     0,
       0,    44,    45,    46,    47,    48,    49,  -531,    50,  -531,
      51,    52,     0,     0,    53,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    54,     0,    55,
      56,     0,    57,     0,    58,   431,    59,  -108,  -108,     2,
       3,     4,     5,     0,     6,     7,   432,     9,    10,     0,
       0,  -603,  -603,    11,    12,    13,    14,    15,    16,   433,
     434,     0,     0,     0,    19,     0,     0,     0,    20,    21,
       0,    22,  -603,  -603,  -603,  -603,    23,    24,    25,    26,
    -603,    27,    28,     0,     0,    29,    30,    31,     0,     0,
       0,     0,     0,     0,     0,    32,    33,    34,     0,     0,
       0,  -603,    35,     0,    36,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,    41,    42,
      43,     0,     0,     0,     0,     0,     0,     0,     0,    44,
      45,    46,    47,    48,    49,  -603,    50,  -603,    51,    52,
       0,     0,    53,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    54,     0,    55,    56,     0,
      57,     0,    58,   431,    59,  -108,  -108,     2,     3,     4,
       5,     0,     6,     7,   432,     9,    10,  -114,  -114,  -114,
    -114,    11,    12,    13,    14,    15,    16,   433,   434,     0,
       0,     0,    19,     0,     0,     0,    20,    21,     0,    22,
       0,     0,  -114,  -114,    23,    24,    25,    26,  -114,    27,
      28,     0,     0,    29,    30,    31,     0,     0,     0,     0,
       0,     0,     0,    32,    33,    34,     0,     0,     0,  -114,
      35,     0,    36,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,    41,    42,    43,     0,
       0,     0,     0,     0,     0,     0,     0,    44,    45,    46,
      47,    48,    49,  -114,    50,  -114,    51,    52,     0,     0,
      53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    54,     0,    55,    56,     0,    57,     0,
      58,   431,    59,  -108,  -108,     2,     3,     4,     5,     0,
       6,     7,   432,     9,    10,     0,     0,  -114,  -114,    11,
      12,    13,    14,    15,    16,   433,   434,     0,     0,     0,
      19,     0,     0,     0,    20,    21,     0,    22,  -114,  -114,
    -114,  -114,    23,    24,    25,    26,  -114,    27,    28,     0,
       0,    29,    30,    31,     0,     0,     0,     0,     0,     0,
       0,    32,    33,    34,     0,     0,     0,  -114,    35,     0,
      36,    37,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,    41,    42,    43,     0,     0,     0,
       0,     0,     0,     0,     0,    44,    45,    46,    47,    48,
      49,  -114,    50,  -114,    51,    52,     0,     0,    53,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    54,     0,    55,    56,     0,    57,     0,    58,   431,
      59,  -108,  -108,     2,     3,     4,     5,     0,     6,     7,
     432,     9,    10,     0,     0,  -114,  -114,    11,    12,    13,
      14,    15,    16,   433,   434,     0,     0,     0,    19,     0,
       0,     0,    20,    21,     0,    22,     0,  -114,  -114,  -114,
      23,    24,    25,    26,  -114,    27,    28,     0,     0,    29,
      30,    31,     0,     0,     0,     0,     0,     0,     0,    32,
      33,    34,     0,     0,     0,  -114,    35,     0,    36,    37,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    40,    41,    42,    43,     0,     0,     0,     0,     0,
       0,     0,     0,    44,    45,    46,    47,    48,    49,  -114,
      50,  -114,    51,    52,     0,     0,    53,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
       0,    55,    56,     0,    57,     0,    58,   431,    59,  -108,
    -108,     2,     3,     4,     5,     0,     6,     7,   432,     9,
      10,     0,     0,  -114,  -114,    11,    12,    13,    14,    15,
      16,   433,   434,     0,     0,     0,    19,     0,     0,     0,
      20,    21,     0,    22,     0,     0,  -114,  -114,    23,    24,
      25,    26,  -114,    27,    28,     0,     0,    29,    30,    31,
       0,     0,     0,     0,     0,     0,     0,    32,    33,    34,
       0,     0,  -114,  -114,    35,     0,    36,    37,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    40,
      41,    42,    43,     0,     0,     0,     0,     0,     0,     0,
       0,    44,    45,    46,    47,    48,    49,  -114,    50,  -114,
      51,    52,     0,     0,    53,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    54,     0,    55,
      56,     0,    57,     0,    58,   431,    59,  -108,  -108,     2,
       3,     4,     5,     0,     6,     7,   432,     9,    10,     0,
       0,  -114,  -114,    11,    12,    13,    14,    15,    16,   433,
     434,     0,     0,     0,    19,     0,     0,     0,    20,    21,
       0,    22,     0,     0,  -114,  -114,    23,    24,    25,    26,
    -114,    27,    28,     0,     0,    29,    30,    31,     0,     0,
       0,     0,     0,     0,     0,    32,    33,    34,     0,     0,
       0,  -114,    35,     0,    36,    37,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,    41,    42,
      43,     0,     0,     0,     0,     0,     0,     0,     0,    44,
      45,    46,    47,    48,    49,  -114,    50,  -114,    51,    52,
       0,     0,    53,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    54,     0,    55,    56,     0,
      57,     0,    58,   431,    59,  -108,  -108,     2,     3,     4,
       5,     0,     6,     7,   432,     9,    10,     0,     0,     0,
       0,    11,    12,    13,    14,    15,    16,   433,   434,     0,
       0,     0,    19,     0,     0,     0,    20,    21,     0,    22,
       0,     0,     0,     0,    23,    24,    25,    26,     0,    27,
      28,     0,     0,    29,    30,    31,     0,     0,     0,     0,
       0,     0,     0,    32,    33,    34,     0,     0,     0,     0,
      35,     0,    36,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,    41,    42,    43,     0,
       0,     0,     0,     0,     0,     0,     0,    44,    45,    46,
      47,    48,    49,     0,    50,     0,    51,    52,     0,     0,
      53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    54,     0,    55,    56,     0,    57,     0,
      58,  -114,    59,     2,     0,     4,     5,     0,     6,   155,
     156,     9,     0,     0,     0,     0,     0,    11,    12,    13,
     157,   158,   159,     0,   160,     0,     0,   161,   162,     0,
       0,     0,    20,    21,     0,     0,     0,     0,     0,     0,
     163,     0,   164,     0,     0,    27,    28,     0,     0,   165,
      30,   166,     0,     0,     0,     0,     0,     0,     0,   167,
       0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   168,    45,     0,     0,    48,     0,     0,
       0,     0,    51,    52,   267,   268,   169,     0,     0,     0,
       0,     0,   170,   171,     0,     0,     0,     0,     0,    54,
     269,     0,     0,     0,    57,     0,    58,     2,    59,     4,
       5,     0,     6,   155,   156,     9,     0,     0,     0,     0,
       0,    11,    12,    13,   157,   158,   159,     0,   160,     0,
       0,   161,   162,     0,     0,     0,    20,    21,     0,     0,
       0,     0,     0,     0,   163,     0,   164,     0,     0,    27,
      28,     0,     0,   165,    30,   166,     0,     0,     0,     0,
       0,     0,     0,   167,     0,     0,     0,     0,     0,     0,
       0,     0,    36,     0,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   168,    45,     0,
       0,    48,     0,     0,     0,     0,    51,    52,     0,     0,
     169,     0,     0,     0,     0,     0,   170,   171,     0,     0,
       0,     0,     0,    54,   269,     0,     0,   567,    57,     0,
      58,     2,    59,     4,     5,     0,     6,   155,   156,     9,
       0,     0,     0,     0,     0,    11,    12,    13,   157,   158,
     159,     0,   160,     0,     0,   161,   162,     0,     0,     0,
      20,    21,     0,     0,     0,     0,     0,     0,   163,     0,
     164,     0,     0,    27,    28,     0,     0,   165,    30,   166,
       0,     0,     0,     0,     0,     0,     0,   167,     0,     0,
       0,     0,     0,     0,     0,     0,    36,     0,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      41,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   168,    45,     0,     0,    48,     0,     0,     0,     0,
      51,    52,   267,     0,   169,     0,     0,     0,     0,     0,
     170,   171,     0,     0,     0,     0,     0,    54,   269,     0,
       0,     0,    57,     0,    58,     2,    59,     4,     5,     0,
       6,   155,   156,     9,     0,     0,     0,     0,     0,    11,
      12,    13,   157,   158,   159,     0,   160,     0,     0,   161,
     162,     0,     0,     0,    20,    21,     0,     0,     0,     0,
       0,     0,   163,     0,   164,     0,     0,    27,    28,     0,
       0,   165,    30,   166,     0,     0,     0,     0,     0,     0,
       0,   167,     0,     0,     0,     0,     0,     0,     0,     0,
      36,     0,    38,    39,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    41,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   168,    45,     0,     0,    48,
       0,     0,     0,     0,    51,    52,   601,     0,   169,     0,
       0,     0,     0,     0,   170,   171,     0,     0,     0,     0,
       0,    54,   172,     0,     0,     0,    57,     0,    58,     2,
      59,     4,     5,     0,     6,   155,   156,     9,     0,     0,
       0,     0,     0,    11,    12,    13,   157,   158,   159,     0,
     160,     0,     0,   161,   162,     0,     0,     0,    20,    21,
       0,     0,     0,     0,     0,     0,   163,     0,   164,     0,
       0,    27,    28,     0,     0,   165,    30,   166,     0,     0,
       0,     0,     0,     0,     0,   167,     0,     0,     0,     0,
       0,     0,     0,     0,    36,     0,    38,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    41,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   168,
      45,     0,     0,    48,     0,     0,     0,     0,    51,    52,
       0,     0,   169,     0,     0,     0,     0,     0,   170,   171,
       0,     0,     0,     0,     0,    54,   172,     0,     0,     0,
      57,     0,    58,     2,    59,     4,     5,     0,     6,   155,
     156,     9,     0,     0,     0,     0,     0,    11,    12,    13,
     157,   158,   159,     0,   160,     0,     0,   161,   162,     0,
       0,     0,    20,    21,     0,     0,     0,     0,     0,     0,
     163,     0,   164,     0,     0,    27,    28,     0,     0,   165,
      30,   166,     0,     0,     0,     0,     0,     0,     0,   167,
       0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
      38,    39,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    41,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   168,    45,     0,     0,    48,     0,     0,
       0,     0,    51,    52,     0,     0,   169,     0,     0,     0,
       0,     0,   170,   171,     0,     0,     0,     0,     0,    54,
     265,     0,     0,     0,    57,     0,    58,     2,    59,     4,
       5,     0,     6,   155,   156,     9,     0,     0,     0,     0,
       0,    11,    12,    13,   157,   158,   159,     0,   160,     0,
       0,   161,   162,     0,     0,     0,    20,    21,     0,     0,
       0,     0,     0,     0,   163,     0,   164,     0,     0,    27,
      28,     0,     0,   165,    30,   166,     0,     0,     0,     0,
       0,     0,     0,   167,     0,     0,     0,     0,     0,     0,
       0,     0,    36,     0,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   168,    45,     0,
       0,    48,     0,     0,     0,     0,    51,    52,     0,     0,
     169,     0,     0,     0,     0,     0,   170,   171,     0,     0,
       0,     0,     0,    54,   269,     0,     0,     0,    57,     0,
      58,     2,    59,     4,     5,     0,     6,   155,   156,     9,
       0,     0,     0,     0,     0,    11,    12,    13,   157,   158,
     159,     0,   160,     0,     0,   161,   162,     0,     0,     0,
      20,    21,     0,     0,     0,     0,     0,     0,   163,     0,
     164,     0,     0,    27,    28,     0,     0,   165,    30,   166,
       0,     0,     0,     0,     0,     0,     0,   167,     0,     0,
       0,     0,     0,     0,     0,     0,    36,     0,    38,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      41,     0,  -317,     0,     0,     0,     0,     0,     0,     0,
       0,   168,    45,     0,     0,    48,   509,   510,   511,     0,
      51,    52,     0,     0,   169,     0,     0,  -317,  -317,   310,
     170,   171,     0,     0,   512,   513,     0,    54,   709,     0,
       0,     0,    57,   514,    58,     0,    59,  -317,  -317,  -317,
    -317,     0,  -317,  -317,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -327,     0,     0,     0,   484,   485,   486,
     487,   488,   489,   490,   491,   492,     0,     0,     0,     0,
     493,   494,   495,   496,   497,   498,   499,   500,  -327,  -327,
     367,     0,     0,     0,     0,   515,   516,   517,   518,   519,
     520,   521,   522,   523,     0,     0,     0,     0,  -327,  -327,
    -327,  -327,     0,  -327,  -327,     0,     0,     0,     0,     0,
       0,     0,     0,  -317,  -330,   291,     0,     0,   484,   485,
     486,   487,   488,   489,   490,   491,   492,     0,     0,     0,
       0,   493,   494,   495,   496,   497,   498,   499,   500,  -330,
    -330,   376,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -330,
    -330,  -330,  -330,     0,  -330,  -330,     0,     0,     0,     0,
       0,     0,     0,     0,  -327,  -326,   291,     0,     0,   484,
     485,   486,   487,   488,   489,   490,   491,   492,     0,     0,
       0,     0,   493,   494,   495,   496,   497,   498,   499,   500,
    -326,  -326,   401,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    -326,  -326,  -326,  -326,     0,  -326,  -326,     0,     0,     0,
       0,     0,     0,     0,     0,  -330,  -324,   291,     0,     0,
     484,   485,   486,   487,   488,   489,   490,   491,   492,     0,
       0,     0,     0,   493,   494,   495,   496,   497,   498,   499,
     500,  -324,  -324,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -324,  -324,  -324,  -324,     0,  -324,  -324,     0,     0,
       0,     0,     0,     0,     0,     0,  -326,     0,   291,     0,
       0,   484,   485,   486,   487,   488,   489,   490,   491,   492,
       0,     0,     0,     0,   493,   494,   495,   496,   497,   498,
     499,   500,     0,     2,     0,     0,     0,     0,     0,   155,
     156,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     157,   158,   159,     0,   160,     0,     0,     0,   162,     0,
       0,     0,     0,     0,     0,     0,     0,  -324,     0,   291,
     163,     0,   164,     0,     0,    27,    28,     2,     0,     0,
      30,   166,     0,   155,   156,     0,     0,     0,     0,   167,
       0,     0,     0,     0,   157,   158,   159,     0,   160,     0,
      38,    39,   162,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    41,     0,   163,     0,   164,     0,     0,    27,
      28,     0,     2,   168,    30,   166,     0,    48,   155,   156,
       0,     0,     0,   167,     0,     0,   169,     0,     0,   157,
     158,   159,     0,   160,     0,     0,     0,   162,     0,    54,
       0,     0,     0,     0,   263,     0,    41,     0,     0,   163,
       0,   164,     0,     0,    27,    28,     2,   168,     0,    30,
     166,    48,   155,   156,     0,     0,     0,     0,   167,     0,
     169,     0,     0,   157,   158,   159,     0,   160,     0,     0,
       0,   162,     0,     0,     0,    55,    56,     0,     0,     0,
       0,   773,     0,   163,     0,   164,     0,     0,    27,    28,
       0,     0,   168,    30,   166,     0,    48,     0,     0,     0,
       0,     0,   167,   786,     0,   169,     0,     0,     0,     2,
       0,     0,     0,     0,     0,   155,   156,     0,     0,   774,
       0,     0,     0,     0,     0,   773,   157,   158,   159,     0,
     160,     0,     0,     0,   162,     0,   168,     0,     0,     0,
      48,     0,     0,     0,     0,     0,   163,   898,   164,   169,
       0,    27,    28,     2,     0,     0,    30,   166,     0,   155,
     156,     0,     0,   891,     0,   167,     0,     0,     0,     0,
     157,   158,   159,     0,   160,     0,     0,     0,   162,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   773,     0,
     163,     0,   164,     0,     0,    27,    28,     0,     2,   168,
      30,   166,     0,    48,   155,   156,     0,     0,     0,   167,
       0,     0,   169,     0,     0,   157,   158,   159,     0,   160,
       0,     0,     0,   162,     0,     0,   774,     0,     0,     0,
       0,     0,    41,     0,     0,   163,     0,   164,     0,     0,
      27,    28,     2,   168,     0,    30,   166,    48,   155,   156,
       0,     0,     0,     0,   167,     0,   169,     0,     0,   157,
     158,   159,     0,   160,     0,     0,     0,   162,     0,     0,
     834,     0,     0,     0,     0,     0,     0,   773,     0,   163,
       0,   164,     0,     0,    27,    28,     0,     2,   168,    30,
     166,     0,    48,   155,   156,     0,     0,     0,   167,     0,
       0,   169,     0,     0,   157,   158,   159,     0,   160,     0,
       0,     0,   162,     0,     0,   891,     0,     0,     0,     0,
       0,    41,     0,     0,   163,     0,   164,     0,     0,    27,
      28,     2,   168,     0,    30,   166,    48,   155,   156,     0,
       0,     0,     0,   167,     0,   169,     0,     0,   157,   158,
     159,     0,   160,     0,    38,    39,   162,     0,     0,   939,
       0,     0,     0,     0,     0,     0,    41,     0,   163,     0,
     164,     0,     0,    27,    28,     0,     2,   168,    30,   166,
       0,    48,   155,   156,     0,     0,     0,   167,     0,     0,
     169,     0,     0,   157,   158,   159,     0,   160,    38,    39,
       0,   162,     0,    54,     0,     0,     0,     0,     0,     0,
      41,     0,     0,   163,     0,   164,     0,     0,    27,    28,
       2,   168,     0,    30,   166,    48,   155,   156,     0,     0,
       0,     0,   167,     0,   169,     0,     0,   157,   158,   159,
       0,   160,     0,     0,     0,   162,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    41,     0,   163,     0,   164,
       0,     0,    27,    28,     0,     0,   168,    30,   166,     0,
      48,     0,     0,     0,     0,     0,   167,   790,     0,   169,
       0,     0,     0,     2,     0,     0,     0,     0,     0,   155,
     156,     0,     0,     0,     0,     0,     0,     0,     0,    41,
     157,   158,   159,     0,   160,     0,     0,     0,   162,     0,
     168,   507,   508,     0,    48,   509,   510,   511,     0,     0,
     163,   860,   164,   169,     0,    27,    28,     0,     0,     0,
      30,   166,     0,   512,   513,     0,     0,     0,     0,   167,
       0,     0,   514,   507,   508,     0,     0,   509,   510,   511,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    41,     0,     0,   512,   513,     0,     0,     0,
       0,     0,     0,   168,   514,     0,     0,    48,     0,     0,
       0,     0,     0,   507,   944,     0,   169,   509,   510,   511,
       0,     0,     0,     0,   515,   516,   517,   518,   519,   520,
     521,   522,   523,     0,     0,   512,   513,    55,    56,     0,
       0,     0,     0,     0,   514,     0,     0,     0,     0,     0,
       0,     0,     0,   798,     0,     0,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   484,   485,   486,   487,   488,
     489,   490,   491,   492,     0,     0,     0,     0,   493,   494,
     495,   496,   497,   498,   499,   500,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   515,   516,   517,   518,
     519,   520,   521,   522,   523,     0,     0,     0,     0,     0,
       0,   484,   485,   486,   487,   488,   489,   490,   491,   492,
       0,     0,     0,   643,   493,   494,   495,   496,   497,   498,
     499,   500,   484,   485,   486,   487,   488,   489,   490,   491,
     492,     0,     0,     0,     0,   493,   494,   495,   496,   497,
     498,   499,   500,   484,   485,   486,   487,   488,   489,   490,
     491,   492,     0,   888,     0,     0,   493,   494,   495,   496,
     497,   498,   499,   500,   484,   485,   486,   487,   488,   489,
     490,   491,   492,     0,   931,     0,     0,   493,   494,   495,
     496,   497,   498,   499,   500,   484,   485,   486,   487,   488,
     489,   490,   491,   492,     0,   962,     0,     0,   493,   494,
     495,   496,   497,   498,   499,   500,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   975
};

static const yytype_int16 yycheck[] =
{
      14,    15,    16,   215,    10,   554,   134,   172,    58,   253,
     141,   134,    26,   141,   153,   440,   650,   253,   141,   427,
     428,   141,   701,   134,   253,   237,    40,   567,    42,    43,
     141,   134,   604,    47,   459,   456,   457,    36,   696,   374,
      36,   645,   700,     9,    52,    59,   330,     9,    19,   130,
     134,   132,   931,   592,     9,   390,    70,   141,    72,   133,
      74,    75,   126,    77,     9,    79,   140,    81,   132,    83,
      36,    85,   676,    87,    36,    89,   125,    91,   127,    93,
      94,    36,    36,   962,    98,    36,    36,   101,   372,    36,
     104,   125,   106,     0,    36,     9,   975,   131,    36,    36,
     265,   179,     0,    36,   269,   183,    36,   126,   122,    48,
     124,    36,   190,    36,   192,   193,    36,   125,    36,    36,
      34,    35,    36,    36,    36,     3,     4,   126,    26,   207,
     136,   130,    36,   132,   130,    36,   132,    35,   152,   153,
      54,    55,    56,    57,   110,    59,    60,   696,   110,    47,
       3,     4,   123,   124,    61,   110,   728,    52,   172,    36,
     839,    59,    36,    61,   126,   110,   845,    10,   708,   123,
     124,    36,    70,    36,    72,   126,    74,    75,   132,    77,
     130,    79,   132,    81,   842,    83,   125,    85,   126,    87,
     132,    89,   826,    91,   132,    93,    94,   130,   123,   124,
      98,   215,   132,   101,    36,   219,   104,   132,   106,   132,
     123,   124,   132,   634,   132,   132,   130,   625,     0,   132,
     132,   235,   236,   237,   122,   126,   124,    19,   132,   130,
     125,   132,   246,   125,    36,   133,     9,   129,   252,   253,
      69,     0,   140,     0,    26,   123,   124,   123,   124,   123,
     124,   265,    12,    35,    84,   269,   132,   802,   132,   798,
     126,    34,    35,    36,     0,    47,   811,   132,   813,   132,
     123,   124,   132,   287,   288,    36,   106,    59,   474,    61,
      36,    54,    55,    56,    57,   125,    59,    60,    70,    36,
      72,   131,    74,    75,   126,    77,    52,    79,   130,    81,
     132,    83,    61,    85,    61,    87,   125,    89,   733,    91,
     129,    93,    94,   125,   125,   127,    98,   215,   129,   101,
      36,    58,   104,   567,   106,   125,     0,   127,   456,   457,
     132,   567,    36,   456,   457,    58,   532,    36,   567,   237,
     122,   537,   124,   123,   124,   456,   457,   543,   125,   888,
     127,   133,   130,   456,   457,    72,    73,   130,   140,   132,
     374,    35,   123,   124,   125,   126,     3,     4,   564,   125,
     126,   269,   456,   457,   123,   124,   390,   114,   115,   116,
     117,   118,   125,   123,   124,    59,   126,    61,   123,   124,
      51,   126,   931,   116,   117,   118,    70,   132,    72,   130,
      74,    75,    69,    77,   121,    79,   125,    81,   127,    83,
     125,    85,   127,    87,   125,    89,   127,    91,   126,    93,
      94,   960,   114,   962,    98,   123,   124,   101,   126,   125,
     104,   127,   106,     3,     4,   647,   975,   126,    17,    18,
     127,   580,     0,   123,   124,   125,    38,    39,   122,   126,
     124,   123,   124,   125,   123,   124,   125,    64,    65,   133,
      39,    40,    41,   129,   708,   677,   140,    46,    26,   126,
     127,     0,   708,   487,    36,    36,   374,    36,   125,   708,
      36,    36,   496,    36,    17,    18,    36,   269,    67,    47,
      36,    36,   390,    19,   133,   573,   125,    26,   123,   124,
     125,   125,   132,    61,    17,    18,   634,    40,    41,   640,
     126,   634,   640,    46,   528,   126,   530,   640,    47,   125,
     640,     9,   101,   634,   103,    54,    58,    40,    41,   640,
       9,   634,    61,    46,    67,    93,   123,   124,   125,    19,
     554,    70,   440,   593,   709,     3,     4,   122,   123,   124,
     634,     9,   125,   567,    67,   126,   640,   126,    87,     9,
      89,   459,    91,   577,    93,   129,   580,   132,   101,   765,
     103,   125,   768,    47,   125,   133,    34,    35,    36,   775,
     129,     9,   140,   779,   123,   124,   125,   127,   101,   125,
     103,   125,   374,   122,    99,   791,    54,    55,    56,    57,
     127,    59,    60,    84,   133,   127,    34,    35,   390,   125,
     127,   140,     3,   627,   628,   127,   622,   123,   124,   125,
     127,    66,   125,   127,   630,    61,    54,    55,    56,    57,
     676,    59,    60,   647,    25,   234,    93,    93,    93,   835,
     836,    93,   838,    34,    93,    93,    93,    93,   844,    93,
      93,    93,   110,    93,    93,    93,   237,   677,   440,   532,
     236,   960,   701,   677,   428,   796,   680,   863,   126,   456,
     684,   685,   130,   796,   132,   725,   796,   459,   979,   577,
     694,   577,   696,   640,   794,   796,   700,   701,   640,    -1,
     886,   243,   706,   796,   708,   709,   892,    -1,    -1,    -1,
     374,    92,   130,    -1,   132,    96,    -1,    -1,    -1,   100,
      -1,   269,   796,    -1,   105,    -1,   390,   108,   109,   110,
     111,    -1,   620,    -1,   253,    -1,    -1,   118,    -1,    -1,
     121,   737,   123,    -1,    -1,    -1,    -1,   743,   129,    -1,
     269,   937,   873,    -1,   940,   873,    -1,    -1,    -1,   945,
     873,    -1,   143,   873,     0,    -1,    -1,    -1,    74,   773,
     774,    -1,    -1,    -1,    -1,    -1,   440,    -1,   964,    -1,
     873,    87,    88,    89,    90,    91,    92,    93,    94,   677,
      26,    -1,     0,    -1,    -1,   459,   800,    -1,   802,   873,
      -1,    -1,   690,    -1,    -1,   577,    -1,   811,    -1,   813,
      -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    26,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    -1,   715,    -1,    -1,
     834,    -1,    -1,    -1,   830,   839,    -1,    -1,   842,    47,
      -1,   845,    -1,    -1,    -1,   733,    -1,   735,   620,   970,
      -1,    -1,   970,    61,    -1,     9,   977,    93,   746,   977,
     970,    -1,    -1,    -1,   977,    17,    18,   977,    -1,   970,
      -1,    -1,   760,    -1,    -1,    -1,   977,   970,   882,    -1,
      34,    35,    36,    -1,   977,    93,    -1,   891,    40,    41,
     894,    -1,   440,    -1,    46,    -1,   970,   133,   902,    -1,
      54,    55,    56,    57,   140,    59,    60,    -1,    -1,    -1,
      -1,   459,     0,    -1,    -1,    67,    -1,    -1,   690,    -1,
      -1,   440,    -1,    -1,    -1,   133,    -1,    -1,   816,   925,
     818,    -1,   140,    -1,    -1,   939,    -1,    -1,    26,    -1,
     459,    -1,    -1,   715,    -1,     9,    -1,     3,     4,   101,
      -1,   103,    -1,     9,    -1,    -1,   620,    -1,    -1,    47,
      -1,   733,    -1,   735,    -1,    -1,    -1,    -1,    -1,    -1,
      34,    35,    36,    61,   746,    -1,   130,   865,    34,    35,
      36,   869,    -1,    -1,    -1,    -1,   874,   875,   760,   993,
      54,    55,    56,    57,    -1,    59,    60,    -1,    54,    55,
      56,    57,    -1,    59,    60,    93,    -1,    -1,    -1,    -1,
      -1,    -1,    15,    16,    17,    18,    -1,    -1,   906,    -1,
      -1,    -1,   910,    -1,    -1,    -1,   690,    -1,    -1,   577,
      -1,    -1,    -1,   269,    -1,   923,    -1,    40,    41,    -1,
      -1,   929,   930,    46,   816,   133,   818,    -1,   567,    -1,
      -1,   715,   140,    -1,   110,    -1,    -1,    -1,   577,    -1,
       0,   269,   126,     9,    67,    -1,   130,    -1,   132,   733,
     126,   735,   620,    -1,   130,    -1,   132,    -1,    -1,   967,
      -1,    -1,   746,   971,    -1,    -1,    26,    -1,    34,    35,
      36,   979,    -1,   865,    -1,    -1,   760,   869,   101,     9,
     103,   620,   874,   875,    -1,    -1,    -1,    47,    54,    55,
      56,    57,    -1,    59,    60,    -1,    -1,    -1,    -1,    -1,
      -1,    61,    -1,    -1,    34,    35,    36,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   906,    -1,     0,    -1,   910,    -1,
      -1,    -1,   690,    -1,    54,    55,    56,    57,    -1,    59,
      60,   923,   816,    93,   818,    -1,    -1,   929,   930,    -1,
      -1,    -1,    26,    -1,   110,    -1,    -1,   715,    -1,    -1,
      -1,   690,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     126,   269,    -1,    47,   130,   733,   132,   735,    -1,   708,
      -1,    -1,    -1,   133,    -1,   967,   715,    61,   746,   971,
     140,   865,    -1,    -1,   440,   869,    -1,   979,    -1,    -1,
     874,   875,   760,    -1,   733,    -1,   735,    -1,    -1,   620,
     130,    -1,   132,   459,    -1,    -1,    -1,   746,    -1,    93,
      -1,    -1,   440,    -1,    17,    18,    -1,    -1,    -1,    -1,
      -1,   760,   906,    -1,    -1,    -1,   910,    -1,    -1,    -1,
      -1,   459,    15,    16,    17,    18,    -1,    40,    41,   923,
      -1,     0,    -1,    46,    -1,   929,   930,    -1,   816,   133,
     818,    -1,    -1,    -1,    -1,    -1,   140,    40,    41,    -1,
      -1,    -1,    -1,    46,    67,     9,    -1,    26,    -1,   690,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   816,    -1,   818,
      -1,    -1,    -1,   967,    67,    -1,    -1,   971,    47,    -1,
      34,    35,    -1,    -1,   715,   979,    -1,   865,   101,    -1,
     103,   869,    61,    -1,    -1,    -1,   874,   875,    -1,   269,
      54,    55,    56,    57,   735,    59,    60,    -1,   101,    -1,
     103,   577,    -1,    17,    18,   746,   865,    -1,    -1,    -1,
     869,    -1,   440,    -1,    93,   874,   875,    -1,   906,   760,
      -1,    -1,   910,    -1,    38,    39,    40,    41,    -1,   577,
      -1,   459,    46,    -1,    -1,   923,    -1,    -1,    -1,    -1,
      -1,   929,   930,    -1,   620,    -1,   110,   906,    -1,    -1,
      -1,   910,    -1,    67,   133,     9,    -1,    -1,    -1,    -1,
      -1,   140,    -1,    -1,   923,   269,   130,    -1,     0,    -1,
     929,   930,   620,    -1,    -1,   816,    -1,   818,    -1,   967,
      34,    35,    36,   971,    -1,    -1,    -1,   101,    -1,   103,
      -1,   979,    -1,    -1,    26,    -1,    -1,    -1,    -1,    -1,
      54,    55,    56,    57,    -1,    59,    60,    -1,   967,    -1,
      -1,    -1,   971,    -1,   690,    47,    -1,    -1,    -1,    -1,
     979,    -1,    -1,    -1,   865,    -1,    -1,    -1,   869,    61,
      -1,    -1,    -1,   874,   875,    -1,    -1,    -1,    -1,   715,
      -1,    -1,   690,    -1,    -1,    -1,    -1,    -1,    -1,   577,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   733,    -1,   735,
     440,    93,    -1,    -1,    -1,   906,    -1,   715,    -1,   910,
     746,     9,   126,    -1,    -1,    -1,   130,    -1,   132,   459,
      -1,    -1,   923,    -1,   760,   733,    -1,   735,   929,   930,
     269,    -1,   620,    -1,    -1,    -1,    34,    35,   746,    -1,
      -1,   133,     9,    -1,    -1,    -1,    -1,    -1,   140,    -1,
      -1,    -1,   760,    -1,    -1,    -1,    54,    55,    56,    57,
      -1,    59,    60,    -1,    -1,    -1,    -1,    34,    35,    36,
     971,    -1,    -1,    -1,    -1,    -1,   440,    -1,    -1,    -1,
     816,    -1,   818,    -1,    -1,    -1,    -1,    54,    55,    56,
      57,    -1,    59,    60,    -1,   459,    -1,    -1,    -1,    17,
      18,    -1,   690,    -1,    -1,    -1,    -1,    -1,   816,    -1,
     818,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,    40,    41,    -1,    -1,    -1,   715,    46,   865,
      -1,    -1,   130,   869,     0,    -1,    -1,   577,   874,   875,
      -1,    -1,    -1,   110,    -1,   733,    -1,   735,    -1,    67,
       0,    -1,    -1,    -1,    -1,    -1,    -1,   865,   746,   126,
      26,   869,    -1,   130,    -1,   132,   874,   875,    -1,    -1,
     906,    -1,   760,    -1,   910,    -1,    26,   269,    -1,    -1,
     620,    47,    -1,   101,    -1,   103,    -1,   923,    -1,    -1,
      -1,     9,    -1,   929,   930,    61,    -1,    47,   906,    -1,
      -1,   440,   910,    -1,    -1,    -1,    -1,     9,    -1,    -1,
      -1,    61,    -1,   577,    -1,   923,    34,    35,    36,    -1,
     459,   929,   930,    -1,    -1,    -1,    -1,    93,   816,    -1,
     818,   967,    34,    35,    36,   971,    54,    55,    56,    57,
      -1,    59,    60,   979,    -1,    -1,    -1,    -1,    -1,    -1,
     690,    -1,    54,    55,    56,    57,   620,    59,    60,   967,
      -1,    -1,    -1,   971,    -1,    -1,    -1,   133,    -1,    -1,
      -1,   979,    -1,    -1,   140,   715,    -1,   865,    -1,    -1,
      -1,   869,    -1,   133,    -1,    -1,   874,   875,    -1,    -1,
     140,    -1,   110,   733,    -1,   735,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   746,     9,   126,    -1,
      -1,    -1,   130,    -1,   132,    -1,    -1,    -1,   906,    -1,
     760,    -1,   910,    -1,   126,    -1,   690,    -1,   130,    -1,
     132,    -1,    34,    35,    36,   923,    -1,    -1,   577,     0,
      -1,   929,   930,    -1,    -1,    -1,    -1,    -1,   440,    -1,
      -1,   715,    54,    55,    56,    57,    -1,    59,    60,     9,
      -1,    -1,    -1,    -1,    -1,    26,    -1,   459,    -1,   733,
      -1,   735,    -1,    -1,    -1,    -1,   816,    -1,   818,   967,
      -1,   620,   746,   971,    34,    35,    47,    -1,    -1,    17,
      18,   979,    -1,    -1,    -1,    -1,   760,    -1,    -1,    -1,
      61,     0,    -1,   269,    54,    55,    56,    57,   110,    59,
      60,    -1,    40,    41,    -1,    -1,    -1,     0,    46,   269,
      -1,    -1,    -1,    -1,   126,   865,    -1,    26,   130,   869,
     132,    -1,    -1,    -1,   874,   875,    17,    18,    -1,    67,
      -1,    -1,    -1,    26,    -1,    -1,    -1,    -1,    47,    -1,
      -1,   690,   816,    -1,   818,    -1,    -1,    38,    39,    40,
      41,    -1,    61,    -1,    47,    46,   906,    -1,    17,    18,
     910,    -1,   133,   101,    -1,   103,   715,    -1,    61,   140,
     130,    -1,   132,   923,    -1,   577,    67,    -1,    -1,   929,
     930,    40,    41,    -1,   733,    -1,   735,    46,    -1,    -1,
      -1,   865,    -1,    -1,    -1,   869,    -1,   746,    -1,    -1,
     874,   875,    -1,    -1,    -1,    -1,    -1,     0,    67,    -1,
     101,   760,   103,    -1,    -1,    -1,    -1,   967,   620,    -1,
      -1,   971,    -1,    -1,   133,    -1,    -1,    -1,    -1,   979,
      -1,   140,   906,    26,    -1,    -1,   910,    -1,    -1,    -1,
     133,    -1,   101,    -1,   103,    -1,    -1,   140,    -1,   923,
      -1,    -1,    -1,    -1,    47,   929,   930,    -1,    -1,    -1,
      -1,     9,    -1,    -1,   440,    -1,    -1,   816,    61,   818,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     440,    -1,    -1,   459,    -1,    -1,    34,    35,   690,    -1,
      -1,    -1,    -1,   967,    -1,    -1,    -1,   971,   269,   459,
      -1,    -1,    -1,    -1,    -1,   979,    54,    55,    56,    57,
      -1,    59,    60,   715,    -1,    -1,   865,    -1,    -1,    -1,
     869,    -1,    -1,    -1,    -1,   874,   875,    -1,    -1,    -1,
      -1,   733,    -1,   735,    -1,    -1,    -1,    -1,    -1,    -1,
     133,    -1,     0,    -1,   746,    -1,    -1,   140,     5,    -1,
      -1,    -1,    -1,    -1,    11,    12,    -1,   906,   760,    -1,
     269,   910,    -1,    -1,    -1,    22,    23,    24,    26,    26,
      -1,    -1,    -1,    30,   923,    -1,   269,    -1,    -1,    -1,
     929,   930,   130,    -1,   132,    42,     9,    44,    -1,    47,
      47,    48,    -1,    -1,    -1,    52,    53,    -1,    -1,    -1,
      -1,   577,    -1,    61,    61,    -1,    -1,    -1,    -1,     0,
      -1,    34,    35,    36,   816,    -1,   818,   577,   967,    -1,
      -1,    -1,   971,    -1,    -1,    -1,    -1,    84,    -1,    -1,
     979,    54,    55,    56,    57,    26,    59,    60,    95,    -1,
      -1,    -1,    99,    -1,   620,    -1,    -1,    -1,    -1,    -1,
      -1,   108,    -1,    -1,    -1,     9,    47,    -1,    -1,    -1,
     620,    -1,    -1,   865,    -1,    -1,    -1,   869,    -1,   440,
      61,   128,   874,   875,    -1,   133,   269,    -1,    -1,    -1,
      34,    35,   140,    -1,    -1,    -1,    -1,     0,   459,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    55,    56,    57,   906,    59,    60,   130,   910,   132,
      -1,    -1,    -1,    26,   690,    -1,    -1,    -1,    -1,    -1,
      -1,   923,    -1,    -1,    -1,    -1,    -1,   929,   930,    -1,
     690,   440,    -1,    -1,    47,    -1,    -1,    -1,    -1,   715,
      -1,    -1,   133,    -1,    -1,    -1,    -1,   440,    61,   140,
     459,    -1,    -1,    -1,    -1,   715,    -1,   733,    -1,   735,
      -1,    -1,    -1,    -1,    -1,   967,   459,     9,    -1,   971,
     746,    -1,    -1,   733,    -1,   735,   130,   979,   132,    -1,
      -1,    -1,    -1,    -1,   760,    -1,   746,    -1,    -1,    -1,
      -1,    -1,    34,    35,    36,    -1,    -1,    -1,    -1,    -1,
     760,    -1,    -1,    -1,    -1,    -1,   577,    -1,     0,    -1,
      -1,   269,    54,    55,    56,    57,    -1,    59,    60,    -1,
     133,    -1,    -1,    -1,    -1,    -1,    -1,   140,    -1,    -1,
      -1,    -1,    -1,    -1,    26,    -1,    -1,    -1,    -1,    -1,
     816,    -1,   818,    -1,    -1,    -1,    -1,   440,    -1,   620,
      -1,    -1,    -1,    -1,    -1,    47,   816,    -1,   818,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   459,    -1,   577,    61,
      -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,   269,    -1,
      -1,    -1,    -1,    -1,   577,    -1,    -1,    -1,   130,   865,
     132,    -1,    -1,   869,    -1,    -1,    -1,    -1,   874,   875,
      -1,    -1,    26,    -1,    -1,   865,    -1,    -1,    -1,   869,
      -1,   620,    -1,    -1,   874,   875,    -1,    -1,    -1,   690,
      -1,    -1,    -1,    47,    -1,    -1,    -1,   620,    -1,    -1,
     906,    -1,    -1,    -1,   910,    -1,    -1,    61,    -1,    -1,
      -1,   133,    -1,    -1,   715,    -1,   906,   923,   140,    -1,
     910,    -1,    -1,   929,   930,    -1,   269,    -1,    -1,    -1,
      -1,    -1,   733,   923,   735,    -1,    -1,    -1,    -1,   929,
     930,    -1,    -1,    -1,    -1,   746,    -1,    -1,    -1,    -1,
      -1,   690,   440,    -1,   577,    -1,    -1,    -1,    -1,   760,
      -1,   967,    -1,    -1,    -1,   971,    -1,   690,    -1,    -1,
      -1,   459,    -1,   979,    -1,    -1,   715,   967,    -1,   133,
      -1,   971,    -1,    -1,     0,    -1,   140,    -1,    -1,   979,
      -1,    -1,   715,    -1,   733,    -1,   735,   620,    -1,    -1,
      -1,    -1,    -1,    -1,     9,    -1,    -1,   746,    -1,    -1,
     733,    -1,   735,    -1,    -1,   816,    -1,   818,    -1,   440,
      -1,   760,    -1,   746,    -1,    -1,    -1,    -1,    -1,    34,
      35,    36,    -1,    -1,    -1,    -1,     9,   760,   459,    -1,
      -1,    -1,    -1,    -1,    -1,    61,     0,   269,    -1,    54,
      55,    56,    57,    -1,    59,    60,    -1,    -1,    -1,    -1,
      -1,    34,    35,    36,   865,    -1,    -1,   690,   869,    -1,
      -1,    -1,    -1,   874,   875,    -1,    -1,   816,    -1,   818,
      -1,    54,    55,    56,    57,    -1,    59,    60,    -1,   577,
      -1,    -1,   715,   816,    -1,   818,    -1,   440,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   906,    -1,    61,    -1,   910,
     733,    -1,   735,    -1,    -1,   269,   459,   133,    -1,    -1,
      -1,    -1,   923,   746,   140,   130,   865,   132,   929,   930,
     869,    -1,   620,    -1,    -1,   874,   875,   760,    -1,    -1,
      -1,    -1,   865,    -1,    -1,    -1,   869,    -1,    -1,    -1,
      -1,   874,   875,    -1,    -1,    -1,   577,   130,    -1,   132,
      -1,    -1,     0,    -1,    -1,    -1,   967,   906,    -1,    -1,
     971,   910,    -1,    -1,    -1,    -1,    -1,    -1,   979,   133,
      -1,    -1,    -1,   906,   923,    -1,   140,   910,    26,    -1,
     929,   930,    -1,   816,    -1,   818,    -1,    -1,    -1,   620,
     923,    -1,   690,    -1,    -1,    -1,   929,   930,    -1,    47,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   440,    -1,
      -1,    -1,    -1,    61,    -1,    -1,    -1,   715,   967,    -1,
      -1,    -1,   971,    -1,   577,    -1,    -1,   459,    -1,    -1,
     979,    -1,   865,    -1,   967,   733,   869,   735,   971,    -1,
      -1,   874,   875,    -1,    -1,    -1,   979,    -1,   746,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   690,
      -1,    -1,   760,    -1,    -1,    -1,    -1,   620,    -1,    -1,
      -1,    -1,    -1,   906,    -1,    -1,   440,   910,    -1,    -1,
       9,    -1,    -1,    -1,   715,   133,    -1,    -1,    -1,    -1,
     923,    -1,   140,    -1,    -1,   459,   929,   930,    -1,    -1,
      -1,    -1,   733,    -1,   735,    34,    35,    36,     0,    -1,
      -1,    -1,    -1,    -1,    -1,   746,    -1,    -1,   816,    -1,
     818,    -1,    -1,    -1,    -1,    54,    55,    56,    57,   760,
      59,    60,    -1,    -1,   967,    -1,    -1,   690,   971,    -1,
      -1,    -1,    -1,    -1,    -1,   577,   979,    -1,    -1,     9,
      -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   715,    -1,    -1,    -1,    -1,   865,    -1,    61,
      -1,   869,    -1,    -1,    34,    35,   874,   875,    -1,    -1,
     733,    -1,   735,    -1,    -1,   816,    -1,   818,   620,    -1,
      -1,    -1,    -1,   746,    54,    55,    56,    57,    -1,    59,
      60,   130,    -1,   132,    -1,    -1,    -1,   760,   906,    -1,
      -1,    -1,   910,   577,   440,    61,    -1,    -1,    -1,    -1,
      -1,   269,    -1,    -1,    -1,   923,    -1,    -1,    -1,    -1,
      -1,   929,   930,   459,   865,    -1,    -1,    -1,   869,    -1,
      -1,   133,    -1,   874,   875,    -1,    -1,    -1,   140,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   620,    -1,   690,    -1,
      -1,    -1,    -1,   816,    -1,   818,    -1,    -1,    -1,   967,
     130,    -1,   132,   971,    -1,   906,   440,    -1,    -1,   910,
      -1,   979,    -1,   715,    -1,    -1,    -1,   133,    -1,    -1,
      -1,    -1,   923,    -1,   140,   459,    -1,    -1,   929,   930,
      -1,   733,    -1,   735,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   865,    -1,   746,    -1,   869,    -1,    -1,    -1,
      -1,   874,   875,    -1,    -1,     5,   690,    -1,   760,    -1,
      -1,    11,    12,    -1,    -1,    -1,   967,    -1,    -1,    -1,
     971,    -1,    22,    23,    24,    -1,    26,    -1,   979,    -1,
      30,   715,    -1,   906,    -1,    -1,    -1,   910,    -1,    -1,
      -1,    -1,    42,    -1,    44,    -1,    -1,    47,    48,   733,
     923,   735,    52,    53,    -1,    -1,   929,   930,    -1,    -1,
      -1,    61,   746,    -1,   816,    -1,   818,    -1,    -1,    -1,
      -1,    -1,   440,    -1,   620,    -1,   760,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,
      -1,   459,    -1,    -1,   967,    95,    -1,    -1,   971,    99,
      -1,    -1,    -1,    -1,    -1,    -1,   979,    -1,   108,    -1,
      -1,    -1,    -1,   865,    -1,    -1,    -1,   869,    -1,    -1,
      -1,    -1,   874,   875,    -1,    -1,    -1,    -1,    -1,    -1,
      49,    50,   816,    -1,   818,    -1,   620,    -1,    -1,    58,
      -1,    -1,    -1,    -1,   690,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   906,    -1,    -1,    -1,   910,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   715,
      -1,   923,    -1,    -1,    -1,    -1,    -1,   929,   930,    -1,
      -1,   865,    -1,    -1,    -1,   869,    -1,   733,    -1,   735,
     874,   875,   111,   112,   113,   114,   115,   116,   117,   118,
     746,    -1,    -1,    -1,    -1,    -1,   690,    -1,    -1,   577,
      -1,    -1,    -1,    -1,   760,   967,    -1,    -1,    -1,   971,
      -1,    -1,   906,    -1,    -1,    -1,   910,   979,   440,    -1,
      -1,   715,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   923,
      -1,    -1,    -1,    -1,    -1,   929,   930,   459,    -1,   733,
      -1,   735,   620,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       5,    -1,   746,    -1,    -1,    -1,    11,    12,    -1,    -1,
     816,    -1,   818,    -1,   440,    -1,   760,    22,    23,    24,
      -1,    26,    -1,   967,    -1,    30,    -1,   971,    -1,    -1,
      -1,    -1,    -1,   459,    -1,   979,    -1,    42,    -1,    44,
      -1,    -1,    47,    48,    -1,    -1,    -1,    52,    53,    -1,
       0,     1,    -1,    -1,    -1,    -1,    61,    -1,    -1,   865,
      -1,    -1,   690,   869,    -1,    -1,    -1,    -1,   874,   875,
      -1,    -1,   816,    -1,   818,    -1,    -1,    -1,    -1,    84,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   715,    -1,    -1,
      95,    -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,    -1,
     906,   106,    -1,   108,   910,   733,    -1,   735,    -1,    -1,
      -1,    61,    -1,    -1,    -1,    -1,    -1,   923,   746,    -1,
      -1,   865,    -1,   929,   930,   869,    -1,    -1,    -1,    -1,
     874,   875,   760,    -1,    -1,     5,    -1,     7,     8,    -1,
      10,    11,    12,    13,    -1,    -1,    -1,    -1,   620,    19,
      20,    21,    22,    23,    24,    -1,    26,    -1,    -1,    -1,
      30,   967,   906,    -1,    -1,   971,   910,    -1,    -1,   119,
      -1,    -1,    42,   979,    44,    -1,    -1,    47,    48,   923,
      -1,    -1,    52,    53,    -1,   929,   930,    -1,   816,    -1,
     818,    61,    -1,    -1,   620,    -1,    -1,    -1,    -1,   149,
      70,    -1,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,   690,    -1,
      -1,    -1,    -1,   967,    -1,    95,    96,   971,    -1,    99,
      -1,    -1,    -1,    -1,    -1,   979,    -1,   865,   108,    -1,
      -1,   869,    -1,   715,    -1,    -1,   874,   875,    -1,    -1,
      -1,   121,    -1,    -1,    -1,    -1,   126,    -1,   128,    -1,
     210,   733,   212,   735,   690,    -1,    -1,    -1,   218,    -1,
      -1,    -1,    -1,    -1,   746,    -1,    -1,    -1,   906,    -1,
      -1,    -1,   910,    -1,    -1,    -1,    -1,    -1,   760,   715,
       9,    -1,    -1,    -1,   244,   923,   246,    -1,    -1,   249,
      -1,   929,   930,    -1,    -1,    -1,    -1,   733,    -1,   735,
      -1,   261,    -1,    -1,    -1,    34,    35,    36,    -1,    -1,
     746,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   281,    -1,    -1,   760,    54,    55,    56,    57,   967,
      59,    60,    -1,   971,   816,    -1,   818,    -1,    -1,    -1,
      -1,   979,    -1,    -1,    -1,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    -1,    -1,    -1,    -1,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     816,    -1,   818,   865,    -1,    -1,    -1,   869,    -1,    -1,
      -1,    -1,   874,   875,    -1,    10,    -1,   126,    -1,    -1,
      -1,   130,    -1,   132,    -1,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   906,    -1,    -1,    -1,   910,   865,
      -1,    -1,    -1,   869,    -1,    50,    -1,    -1,   874,   875,
      -1,   923,    57,    58,    -1,    -1,    -1,   929,   930,    -1,
      72,   411,    74,    75,    -1,    77,    -1,    79,    -1,    81,
      -1,    83,    -1,    85,    -1,    87,    -1,    89,    -1,    91,
     906,    93,    94,    -1,   910,    -1,    98,    -1,    -1,   101,
      -1,    -1,   104,    -1,   106,   967,    -1,   923,    -1,   971,
      -1,    -1,    -1,   929,   930,    -1,    -1,   979,   458,    -1,
     122,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   472,    -1,    -1,   475,    -1,   477,    -1,    -1,
      -1,   136,    27,    28,    -1,    -1,    31,    32,    33,    -1,
      -1,   967,   147,    -1,    -1,   971,    -1,    -1,    -1,   154,
      -1,    -1,    -1,   979,    49,    50,   161,    -1,    -1,    -1,
      -1,    -1,    -1,    58,    -1,   170,   171,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   525,    -1,   527,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   538,    -1,
      -1,    -1,    -1,    -1,    -1,   545,    -1,    -1,   548,   549,
      -1,   551,    -1,    -1,    -1,   555,    -1,    -1,    -1,    -1,
      -1,    -1,   562,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,     5,    -1,     7,     8,   578,    10,
      11,    12,    13,    -1,   239,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    -1,    26,    -1,    -1,   253,    30,
      -1,    -1,    -1,    -1,    -1,   260,    -1,    -1,   263,    -1,
      -1,    42,    -1,    44,    -1,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      61,   631,    -1,    -1,    -1,    -1,   291,    -1,    -1,    70,
      -1,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,
      -1,    -1,    -1,   104,   105,    -1,    -1,   108,   678,    27,
      28,    -1,    -1,    31,    32,    33,   686,    -1,   688,    -1,
     121,    -1,    -1,    -1,    -1,   126,   696,   128,    -1,   130,
      -1,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      58,    -1,    -1,    -1,    -1,    -1,   716,    -1,    -1,    -1,
      -1,   721,    -1,   723,    -1,   380,    -1,    -1,   383,   384,
     385,   386,   387,   388,   389,    -1,   736,    -1,    -1,   739,
     740,   741,   397,    -1,    -1,   745,    -1,    -1,   748,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     9,    -1,    -1,    -1,
      -1,    -1,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   772,    -1,    -1,    -1,    -1,   125,    -1,    -1,
      -1,    34,    35,    36,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    54,    55,    56,    57,    -1,    59,    60,    -1,    -1,
     810,    -1,    -1,    -1,    -1,    -1,    -1,   817,    -1,    -1,
     820,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      -1,    -1,    -1,    -1,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,   843,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     123,   124,   125,    -1,    -1,    -1,   876,   130,    -1,   132,
      -1,    -1,    -1,    -1,   884,   885,   541,    -1,    -1,    -1,
     890,    -1,   547,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     900,   901,    -1,    -1,   904,    -1,    -1,   907,   908,    67,
      68,    69,   567,    71,    -1,    73,    -1,    -1,    76,    -1,
      78,   576,    80,    -1,    -1,    -1,    84,    -1,    86,    -1,
      -1,    -1,    -1,    -1,    92,   590,    -1,    -1,    96,    -1,
      -1,    -1,   100,    -1,   102,    -1,    -1,   105,    -1,   604,
      -1,    -1,    -1,   953,    -1,    -1,   956,    -1,    -1,    -1,
      -1,    -1,   120,   121,    -1,   123,    -1,   622,    -1,    -1,
      -1,    -1,    27,    28,    -1,   630,    31,    32,    33,    -1,
      -1,    -1,    -1,   638,    -1,    -1,    -1,    -1,   643,    -1,
      -1,    -1,    -1,    -1,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    58,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   173,   174,   175,   176,   177,
     178,   179,   180,    -1,   182,   183,    -1,    -1,   186,    -1,
     188,    -1,   190,    -1,   192,   193,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   205,    -1,   207,
     208,    -1,   107,   708,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,   225,    -1,   227,
     228,   229,    -1,   728,   232,   233,   731,    -1,    -1,    -1,
      -1,    -1,   737,    -1,    -1,    -1,    -1,    -1,   743,    -1,
      -1,    -1,    -1,    -1,   749,    -1,    -1,    -1,    -1,   257,
      -1,   756,    -1,    -1,    -1,    -1,   761,    -1,    -1,    -1,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,    -1,
      10,    11,    12,    13,    14,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    -1,   794,
      30,    -1,    -1,    -1,    34,    35,    -1,    37,    -1,    -1,
      -1,    -1,    42,    43,    44,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    -1,    -1,    -1,    -1,   823,    -1,
     825,    61,    62,    63,    -1,   830,    -1,    -1,    68,    -1,
      70,    71,    72,    73,    -1,    -1,    -1,    -1,   346,    -1,
      -1,    -1,    -1,    83,    84,    85,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,    99,
     100,    -1,   102,    -1,   104,   105,    -1,    -1,   108,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   121,    -1,   123,   124,    -1,   126,    -1,   128,    -1,
     130,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
      -1,    10,    11,    12,    13,    14,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    -1,
     925,    30,    -1,    -1,    -1,    34,    35,    -1,    37,    -1,
      -1,    -1,    -1,    42,    43,    44,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    62,    63,    -1,    -1,    -1,    -1,    68,
      -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    83,    84,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,
      99,   100,    -1,   102,    -1,   104,   105,    -1,    -1,   108,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   121,    -1,   123,   124,    -1,   126,    -1,   128,
      -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,     7,
       8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      -1,    -1,    30,    -1,    -1,   573,    34,    35,    -1,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,   589,    -1,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    83,    84,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   121,    -1,   123,   124,    -1,   126,    -1,
     128,   129,   130,     1,    -1,     3,     4,     5,     6,     7,
       8,    -1,    10,    11,    12,    13,    14,    -1,    -1,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      -1,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,    37,
      -1,    -1,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    -1,    -1,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    61,    62,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    83,    84,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   121,    -1,   123,   124,    -1,   126,    -1,
     128,     1,   130,     3,     4,     5,     6,     7,     8,    -1,
      10,    11,    12,    13,    14,    -1,    -1,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    -1,    -1,
      30,    -1,    -1,    -1,    34,    35,    -1,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    -1,
      -1,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    61,    62,    63,    -1,    -1,    -1,    67,    68,    -1,
      70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    83,    84,    85,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,    -1,    -1,   108,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   121,    -1,   123,   124,    -1,   126,    -1,   128,     1,
     130,     3,     4,     5,     6,     7,     8,    -1,    10,    11,
      12,    13,    14,    -1,    -1,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    -1,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    -1,    -1,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      62,    63,    -1,    -1,    -1,    67,    68,    -1,    70,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    83,    84,    85,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,    -1,    -1,   108,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,
      -1,   123,   124,    -1,   126,    -1,   128,     1,   130,     3,
       4,     5,     6,     7,     8,    -1,    10,    11,    12,    13,
      14,    -1,    -1,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    -1,    -1,    30,    -1,    -1,    -1,
      34,    35,    -1,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    -1,    -1,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,
      -1,    -1,    -1,    67,    68,    -1,    70,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    83,
      84,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,    -1,   123,
     124,    -1,   126,    -1,   128,     1,   130,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    -1,
      -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    -1,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    -1,    -1,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    62,    63,    -1,    -1,
      -1,    67,    68,    -1,    70,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    83,    84,    85,
      86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
      -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   121,    -1,   123,   124,    -1,
     126,    -1,   128,     1,   130,     3,     4,     5,     6,     7,
       8,    -1,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      -1,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,    37,
      -1,    -1,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    -1,    -1,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    61,    62,    63,    -1,    -1,    -1,    67,
      68,    -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    83,    84,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   121,    -1,   123,   124,    -1,   126,    -1,
     128,     1,   130,     3,     4,     5,     6,     7,     8,    -1,
      10,    11,    12,    13,    14,    -1,    -1,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    -1,    -1,    -1,
      30,    -1,    -1,    -1,    34,    35,    -1,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    -1,
      -1,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    61,    62,    63,    -1,    -1,    -1,    67,    68,    -1,
      70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    83,    84,    85,    86,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,    -1,    -1,   108,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   121,    -1,   123,   124,    -1,   126,    -1,   128,     1,
     130,     3,     4,     5,     6,     7,     8,    -1,    10,    11,
      12,    13,    14,    -1,    -1,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    -1,    -1,    -1,    30,    -1,
      -1,    -1,    34,    35,    -1,    37,    -1,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    -1,    -1,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      62,    63,    -1,    -1,    -1,    67,    68,    -1,    70,    71,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    83,    84,    85,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,    -1,    -1,   108,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,
      -1,   123,   124,    -1,   126,    -1,   128,     1,   130,     3,
       4,     5,     6,     7,     8,    -1,    10,    11,    12,    13,
      14,    -1,    -1,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    -1,    -1,    -1,    30,    -1,    -1,    -1,
      34,    35,    -1,    37,    -1,    -1,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    -1,    -1,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,
      -1,    -1,    66,    67,    68,    -1,    70,    71,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    83,
      84,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,    -1,   123,
     124,    -1,   126,    -1,   128,     1,   130,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,    12,    13,    14,    -1,
      -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    -1,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    37,    -1,    -1,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    -1,    -1,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    62,    63,    -1,    -1,
      -1,    67,    68,    -1,    70,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    83,    84,    85,
      86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
      -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   121,    -1,   123,   124,    -1,
     126,    -1,   128,     1,   130,     3,     4,     5,     6,     7,
       8,    -1,    10,    11,    12,    13,    14,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      -1,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,    37,
      -1,    -1,    -1,    -1,    42,    43,    44,    45,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    61,    62,    63,    -1,    -1,    -1,    -1,
      68,    -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    83,    84,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,    -1,   102,    -1,   104,   105,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   121,    -1,   123,   124,    -1,   126,    -1,
     128,   129,   130,     5,    -1,     7,     8,    -1,    10,    11,
      12,    13,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    -1,    26,    -1,    -1,    29,    30,    -1,
      -1,    -1,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    -1,    44,    -1,    -1,    47,    48,    -1,    -1,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,    -1,
      -1,    -1,   104,   105,   106,   107,   108,    -1,    -1,    -1,
      -1,    -1,   114,   115,    -1,    -1,    -1,    -1,    -1,   121,
     122,    -1,    -1,    -1,   126,    -1,   128,     5,   130,     7,
       8,    -1,    10,    11,    12,    13,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    -1,    26,    -1,
      -1,    29,    30,    -1,    -1,    -1,    34,    35,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    -1,    44,    -1,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    70,    -1,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    -1,
      -1,    99,    -1,    -1,    -1,    -1,   104,   105,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,   114,   115,    -1,    -1,
      -1,    -1,    -1,   121,   122,    -1,    -1,   125,   126,    -1,
     128,     5,   130,     7,     8,    -1,    10,    11,    12,    13,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    -1,    26,    -1,    -1,    29,    30,    -1,    -1,    -1,
      34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,
      44,    -1,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    95,    96,    -1,    -1,    99,    -1,    -1,    -1,    -1,
     104,   105,   106,    -1,   108,    -1,    -1,    -1,    -1,    -1,
     114,   115,    -1,    -1,    -1,    -1,    -1,   121,   122,    -1,
      -1,    -1,   126,    -1,   128,     5,   130,     7,     8,    -1,
      10,    11,    12,    13,    -1,    -1,    -1,    -1,    -1,    19,
      20,    21,    22,    23,    24,    -1,    26,    -1,    -1,    29,
      30,    -1,    -1,    -1,    34,    35,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    -1,    44,    -1,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      70,    -1,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    95,    96,    -1,    -1,    99,
      -1,    -1,    -1,    -1,   104,   105,   106,    -1,   108,    -1,
      -1,    -1,    -1,    -1,   114,   115,    -1,    -1,    -1,    -1,
      -1,   121,   122,    -1,    -1,    -1,   126,    -1,   128,     5,
     130,     7,     8,    -1,    10,    11,    12,    13,    -1,    -1,
      -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    -1,
      26,    -1,    -1,    29,    30,    -1,    -1,    -1,    34,    35,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    70,    -1,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,
      96,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,   105,
      -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,   114,   115,
      -1,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,
     126,    -1,   128,     5,   130,     7,     8,    -1,    10,    11,
      12,    13,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
      22,    23,    24,    -1,    26,    -1,    -1,    29,    30,    -1,
      -1,    -1,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    -1,    44,    -1,    -1,    47,    48,    -1,    -1,    51,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,
      72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,    -1,
      -1,    -1,   104,   105,    -1,    -1,   108,    -1,    -1,    -1,
      -1,    -1,   114,   115,    -1,    -1,    -1,    -1,    -1,   121,
     122,    -1,    -1,    -1,   126,    -1,   128,     5,   130,     7,
       8,    -1,    10,    11,    12,    13,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    -1,    26,    -1,
      -1,    29,    30,    -1,    -1,    -1,    34,    35,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    -1,    44,    -1,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    70,    -1,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    -1,
      -1,    99,    -1,    -1,    -1,    -1,   104,   105,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,   114,   115,    -1,    -1,
      -1,    -1,    -1,   121,   122,    -1,    -1,    -1,   126,    -1,
     128,     5,   130,     7,     8,    -1,    10,    11,    12,    13,
      -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
      24,    -1,    26,    -1,    -1,    29,    30,    -1,    -1,    -1,
      34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,
      44,    -1,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,    72,    73,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      84,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    95,    96,    -1,    -1,    99,    31,    32,    33,    -1,
     104,   105,    -1,    -1,   108,    -1,    -1,    34,    35,    36,
     114,   115,    -1,    -1,    49,    50,    -1,   121,   122,    -1,
      -1,    -1,   126,    58,   128,    -1,   130,    54,    55,    56,
      57,    -1,    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     9,    -1,    -1,    -1,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    -1,    -1,    -1,    -1,
      87,    88,    89,    90,    91,    92,    93,    94,    34,    35,
      36,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,    -1,    -1,    -1,    54,    55,
      56,    57,    -1,    59,    60,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   130,     9,   132,    -1,    -1,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    -1,    -1,    -1,
      -1,    87,    88,    89,    90,    91,    92,    93,    94,    34,
      35,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,
      55,    56,    57,    -1,    59,    60,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   130,     9,   132,    -1,    -1,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    -1,    -1,
      -1,    -1,    87,    88,    89,    90,    91,    92,    93,    94,
      34,    35,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    55,    56,    57,    -1,    59,    60,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   130,     9,   132,    -1,    -1,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    -1,
      -1,    -1,    -1,    87,    88,    89,    90,    91,    92,    93,
      94,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    54,    55,    56,    57,    -1,    59,    60,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   130,    -1,   132,    -1,
      -1,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      -1,    -1,    -1,    -1,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,     5,    -1,    -1,    -1,    -1,    -1,    11,
      12,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    -1,    26,    -1,    -1,    -1,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,    -1,   132,
      42,    -1,    44,    -1,    -1,    47,    48,     5,    -1,    -1,
      52,    53,    -1,    11,    12,    -1,    -1,    -1,    -1,    61,
      -1,    -1,    -1,    -1,    22,    23,    24,    -1,    26,    -1,
      72,    73,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    -1,    42,    -1,    44,    -1,    -1,    47,
      48,    -1,     5,    95,    52,    53,    -1,    99,    11,    12,
      -1,    -1,    -1,    61,    -1,    -1,   108,    -1,    -1,    22,
      23,    24,    -1,    26,    -1,    -1,    -1,    30,    -1,   121,
      -1,    -1,    -1,    -1,   126,    -1,    84,    -1,    -1,    42,
      -1,    44,    -1,    -1,    47,    48,     5,    95,    -1,    52,
      53,    99,    11,    12,    -1,    -1,    -1,    -1,    61,    -1,
     108,    -1,    -1,    22,    23,    24,    -1,    26,    -1,    -1,
      -1,    30,    -1,    -1,    -1,   123,   124,    -1,    -1,    -1,
      -1,    84,    -1,    42,    -1,    44,    -1,    -1,    47,    48,
      -1,    -1,    95,    52,    53,    -1,    99,    -1,    -1,    -1,
      -1,    -1,    61,   106,    -1,   108,    -1,    -1,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    11,    12,    -1,    -1,   122,
      -1,    -1,    -1,    -1,    -1,    84,    22,    23,    24,    -1,
      26,    -1,    -1,    -1,    30,    -1,    95,    -1,    -1,    -1,
      99,    -1,    -1,    -1,    -1,    -1,    42,   106,    44,   108,
      -1,    47,    48,     5,    -1,    -1,    52,    53,    -1,    11,
      12,    -1,    -1,   122,    -1,    61,    -1,    -1,    -1,    -1,
      22,    23,    24,    -1,    26,    -1,    -1,    -1,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,
      42,    -1,    44,    -1,    -1,    47,    48,    -1,     5,    95,
      52,    53,    -1,    99,    11,    12,    -1,    -1,    -1,    61,
      -1,    -1,   108,    -1,    -1,    22,    23,    24,    -1,    26,
      -1,    -1,    -1,    30,    -1,    -1,   122,    -1,    -1,    -1,
      -1,    -1,    84,    -1,    -1,    42,    -1,    44,    -1,    -1,
      47,    48,     5,    95,    -1,    52,    53,    99,    11,    12,
      -1,    -1,    -1,    -1,    61,    -1,   108,    -1,    -1,    22,
      23,    24,    -1,    26,    -1,    -1,    -1,    30,    -1,    -1,
     122,    -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,    42,
      -1,    44,    -1,    -1,    47,    48,    -1,     5,    95,    52,
      53,    -1,    99,    11,    12,    -1,    -1,    -1,    61,    -1,
      -1,   108,    -1,    -1,    22,    23,    24,    -1,    26,    -1,
      -1,    -1,    30,    -1,    -1,   122,    -1,    -1,    -1,    -1,
      -1,    84,    -1,    -1,    42,    -1,    44,    -1,    -1,    47,
      48,     5,    95,    -1,    52,    53,    99,    11,    12,    -1,
      -1,    -1,    -1,    61,    -1,   108,    -1,    -1,    22,    23,
      24,    -1,    26,    -1,    72,    73,    30,    -1,    -1,   122,
      -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,    42,    -1,
      44,    -1,    -1,    47,    48,    -1,     5,    95,    52,    53,
      -1,    99,    11,    12,    -1,    -1,    -1,    61,    -1,    -1,
     108,    -1,    -1,    22,    23,    24,    -1,    26,    72,    73,
      -1,    30,    -1,   121,    -1,    -1,    -1,    -1,    -1,    -1,
      84,    -1,    -1,    42,    -1,    44,    -1,    -1,    47,    48,
       5,    95,    -1,    52,    53,    99,    11,    12,    -1,    -1,
      -1,    -1,    61,    -1,   108,    -1,    -1,    22,    23,    24,
      -1,    26,    -1,    -1,    -1,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    84,    -1,    42,    -1,    44,
      -1,    -1,    47,    48,    -1,    -1,    95,    52,    53,    -1,
      99,    -1,    -1,    -1,    -1,    -1,    61,   106,    -1,   108,
      -1,    -1,    -1,     5,    -1,    -1,    -1,    -1,    -1,    11,
      12,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,
      22,    23,    24,    -1,    26,    -1,    -1,    -1,    30,    -1,
      95,    27,    28,    -1,    99,    31,    32,    33,    -1,    -1,
      42,   106,    44,   108,    -1,    47,    48,    -1,    -1,    -1,
      52,    53,    -1,    49,    50,    -1,    -1,    -1,    -1,    61,
      -1,    -1,    58,    27,    28,    -1,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    -1,    -1,    49,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    95,    58,    -1,    -1,    99,    -1,    -1,
      -1,    -1,    -1,    27,   106,    -1,   108,    31,    32,    33,
      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,    49,    50,   123,   124,    -1,
      -1,    -1,    -1,    -1,    58,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    -1,    -1,    -1,    -1,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      -1,    -1,    -1,   132,    87,    88,    89,    90,    91,    92,
      93,    94,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    -1,    -1,    -1,    -1,    87,    88,    89,    90,    91,
      92,    93,    94,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    -1,   126,    -1,    -1,    87,    88,    89,    90,
      91,    92,    93,    94,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    -1,   126,    -1,    -1,    87,    88,    89,
      90,    91,    92,    93,    94,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    -1,   126,    -1,    -1,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   126
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     1,     5,     6,     7,     8,    10,    11,    12,    13,
      14,    19,    20,    21,    22,    23,    24,    25,    26,    30,
      34,    35,    37,    42,    43,    44,    45,    47,    48,    51,
      52,    53,    61,    62,    63,    68,    70,    71,    72,    73,
      83,    84,    85,    86,    95,    96,    97,    98,    99,   100,
     102,   104,   105,   108,   121,   123,   124,   126,   128,   130,
     135,   136,   137,   138,   143,   150,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   199,   200,   201,   202,   203,
     204,   206,   211,   213,   214,   215,   216,   222,   224,   225,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   242,
     247,   252,   253,   254,   255,   256,   268,   272,   275,   291,
     299,   300,   312,   315,   317,   327,   330,   333,   345,   350,
     354,   356,   363,   375,   379,   382,   382,   152,   159,   160,
      36,    36,   257,   258,   126,    11,    12,    22,    23,    24,
      26,    29,    30,    42,    44,    51,    53,    61,    95,   108,
     114,   115,   122,   169,   170,   171,   173,   175,   178,   180,
     182,   184,   186,   189,   191,   193,   195,   199,   200,   201,
     204,   205,   211,   215,   217,   218,   222,   224,   225,   226,
     228,   235,   236,   237,   238,   247,   251,   252,   254,   168,
     166,   168,   167,   168,   159,   153,   218,   218,   316,   273,
     159,   168,   191,   193,   199,   200,   201,   204,   211,   215,
     221,   222,   252,   254,    36,   269,   260,   155,   364,   151,
     159,   191,   193,   195,    10,   168,   168,   128,   168,   281,
      19,   158,   243,    69,   376,   168,   199,   252,   341,   342,
     355,   218,    12,   126,   252,   122,   251,   106,   107,   122,
     188,   208,   209,   210,   218,   220,   241,   168,   195,   212,
       0,     1,   137,   138,   150,   275,   382,     3,     4,    36,
     126,   132,   239,   240,   239,   239,   168,   195,   198,   252,
      36,   239,   198,    36,   239,   198,   198,    36,   239,   198,
      36,   239,   198,    36,   239,   198,    36,   198,    36,   239,
     198,   239,   198,   252,    36,   198,   252,    36,   198,   252,
     126,   159,   239,     8,    10,   168,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   190,   192,   194,   198,   247,   252,   253,   254,
     255,   198,   239,   159,   239,    36,   198,    36,   159,   239,
     198,    36,   126,   239,   130,   198,    36,   159,   239,   198,
       9,    34,    35,    54,    55,    56,    57,    59,    60,   110,
     130,   223,   159,   159,   159,   159,   159,   248,   382,    36,
     239,    36,   159,   239,   198,   252,    36,   159,   239,   198,
     159,    15,    16,    17,    18,    40,    41,    46,    67,   101,
     103,   292,   293,   295,   296,   297,   298,   303,   305,   310,
     311,     1,    12,    25,    26,   137,   150,   161,   162,   163,
     164,   275,   382,    17,    18,    38,    39,    40,   292,   294,
     295,   296,   297,   298,   313,   314,   318,   323,   251,   164,
      17,   101,   292,   293,   294,   295,   296,   297,   351,   352,
     353,   159,   218,   382,   168,   261,   264,   261,   218,   218,
     218,   218,   168,   203,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    87,    88,    89,    90,    91,    92,    93,
      94,   147,   148,   147,   147,   147,   147,    27,    28,    31,
      32,    33,    49,    50,    58,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   125,   301,   147,   157,   125,   382,
     125,   382,   191,   262,   263,   264,   382,   168,   274,     9,
     110,   337,   196,   168,   270,   274,   262,    69,   369,   218,
     376,    19,   382,   126,   277,   168,   382,   145,   147,   126,
     382,   114,   127,   106,   168,   244,   245,   125,   168,   205,
     209,   217,   218,   252,   377,   378,    52,   125,   218,   382,
     259,   168,   127,   129,   168,   191,   199,   201,   203,   211,
     125,   129,   107,   125,   129,   382,   168,   168,   207,   210,
     218,   106,   218,   219,   125,   131,   207,   207,   212,   218,
     218,   218,   218,   218,   218,   218,   218,   212,   218,   246,
     250,   382,   306,   310,    16,   303,   310,     3,     4,   161,
     319,   324,    38,   313,   323,    39,   313,   382,    38,    39,
     357,   360,   382,   132,   145,   266,   267,   125,   382,   382,
     125,   168,   168,   218,   218,   218,   218,   218,   218,   218,
     218,   218,   218,   218,   218,   218,   218,   218,   218,   218,
     218,   382,   382,   168,   168,   145,   266,   125,   154,   145,
     125,   382,   218,   145,    52,   125,   271,   382,   156,   218,
     382,   382,   122,   382,   276,   168,   280,   281,   283,   382,
     278,   282,    19,   382,   145,   133,   125,   378,   125,   122,
     218,   343,   344,   341,   382,   380,   261,   127,   218,   220,
     210,   139,   141,   140,   142,   125,   127,   219,   132,   127,
     127,   125,   249,   164,   165,   304,   251,   308,   310,   168,
     168,   251,   382,   321,   313,   326,   328,   218,   361,    38,
     352,   360,   218,   265,   146,   148,   125,   131,   264,   208,
     302,     9,   146,   263,   382,   168,   334,   168,   168,   382,
     382,   165,    19,    84,   122,   168,   285,   289,   290,   284,
     281,   283,   382,   168,   279,   283,   106,   286,   289,   290,
     106,   168,   378,   168,   125,   346,   165,   382,   107,   382,
     126,   382,   126,   210,   219,   218,   129,   129,   165,   382,
     251,   126,   382,   126,   382,   382,   325,   251,   382,   165,
     358,   382,   218,     9,   218,   132,   125,   165,   218,   145,
      47,   145,   365,   382,   122,   168,   168,   145,   127,   125,
     125,   145,   125,   129,   127,   125,   145,   343,    99,   349,
      17,   103,   292,   293,   294,   296,   297,   298,   381,   220,
     106,   144,   149,   168,   144,   307,   382,   144,   144,   320,
     165,   382,   165,   329,   382,   362,   359,   218,   218,   208,
     251,    64,    65,   372,   373,   374,   168,   145,   126,   145,
     145,   122,   168,   290,    84,   283,   382,   145,   106,   290,
     347,   127,   125,   145,   127,   165,   309,   127,   127,   165,
     322,    17,    41,   292,   293,   294,   295,   296,   298,   331,
     332,   165,   165,   382,   127,    48,   338,   168,   366,   382,
     382,   126,   145,   220,   287,   288,   382,   168,   145,   122,
     168,   125,   382,   382,   106,   168,   382,   165,   382,   382,
     165,   165,   251,   335,    66,   370,   371,   165,   165,   287,
     125,   127,   126,   145,   168,   145,   106,   348,   145,   382,
     367,   382,   127,   288,   287,   126,   145,   165,   339,   336,
      17,    67,   292,   293,   294,   295,   297,   298,   368,   165,
     127,   287,    17,    46,   293,   294,   295,   296,   297,   298,
     340,   339,   127,   168
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   134,   135,   135,   136,   136,   136,   136,   136,   136,
     136,   136,   136,   136,   136,   136,   137,   137,   137,   139,
     138,   140,   138,   141,   138,   142,   138,   143,   143,   143,
     143,   144,   144,   144,   144,   145,   145,   146,   146,   147,
     147,   147,   147,   147,   147,   147,   147,   147,   148,   148,
     148,   148,   148,   148,   148,   148,   148,   149,   149,   150,
     150,   150,   150,   150,   150,   150,   150,   150,   150,   150,
     150,   150,   150,   151,   150,   150,   150,   150,   152,   150,
     153,   154,   150,   155,   156,   150,   150,   150,   150,   150,
     150,   157,   150,   150,   158,   158,   160,   159,   161,   161,
     161,   161,   161,   161,   162,   162,   162,   162,   163,   163,
     163,   163,   164,   164,   165,   165,   166,   166,   167,   167,
     168,   168,   168,   168,   168,   168,   168,   168,   168,   168,
     168,   168,   168,   168,   168,   168,   168,   168,   168,   169,
     169,   170,   171,   172,   172,   173,   174,   175,   176,   177,
     178,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     186,   187,   188,   188,   189,   190,   191,   191,   192,   193,
     194,   195,   195,   196,   196,   197,   197,   197,   197,   197,
     197,   197,   197,   197,   197,   197,   197,   197,   197,   198,
     198,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     199,   200,   200,   200,   200,   200,   200,   201,   201,   201,
     201,   201,   201,   201,   201,   201,   201,   201,   201,   201,
     201,   201,   201,   201,   201,   202,   203,   204,   204,   205,
     206,   207,   207,   208,   208,   209,   209,   209,   209,   209,
     210,   210,   211,   211,   211,   212,   212,   213,   214,   215,
     216,   217,   217,   217,   217,   217,   217,   217,   217,   217,
     217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
     217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
     217,   217,   217,   218,   218,   218,   218,   218,   218,   219,
     219,   220,   220,   221,   221,   221,   221,   221,   221,   221,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   223,   223,   224,   225,   225,   226,   226,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   235,   235,
     235,   235,   235,   236,   236,   236,   236,   236,   236,   237,
     237,   238,   238,   238,   238,   238,   238,   238,   238,   238,
     239,   240,   240,   240,   241,   241,   243,   242,   244,   244,
     244,   244,   245,   245,   246,   246,   248,   249,   247,   250,
     247,   251,   251,   252,   253,   254,   255,   257,   256,   258,
     256,   259,   256,   260,   256,   261,   261,   262,   262,   263,
     263,   263,   263,   264,   265,   264,   264,   266,   267,   267,
     267,   269,   268,   270,   270,   271,   271,   273,   272,   274,
     274,   276,   275,   277,   275,   275,   275,   275,   278,   275,
     279,   279,   280,   280,   280,   280,   282,   281,   284,   283,
     285,   285,   285,   285,   286,   286,   286,   286,   286,   286,
     286,   287,   287,   288,   289,   289,   289,   289,   289,   289,
     290,   290,   290,   290,   290,   290,   291,   291,   291,   291,
     291,   291,   291,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   299,   299,   299,   301,   302,   300,   304,   303,
     306,   307,   305,   308,   309,   305,   310,   311,   311,   311,
     311,   311,   311,   311,   311,   312,   312,   312,   312,   313,
     314,   314,   314,   314,   314,   314,   314,   314,   316,   315,
     317,   317,   319,   320,   318,   321,   322,   318,   324,   325,
     323,   326,   323,   328,   329,   327,   330,   331,   332,   332,
     332,   332,   332,   332,   332,   332,   334,   335,   336,   333,
     337,   337,   338,   338,   339,   340,   340,   340,   340,   340,
     340,   340,   340,   340,   341,   341,   342,   342,   343,   343,
     344,   344,   346,   347,   348,   345,   349,   349,   351,   350,
     350,   352,   353,   353,   353,   353,   353,   353,   353,   353,
     355,   354,   356,   356,   358,   357,   359,   357,   357,   357,
     361,   362,   360,   364,   365,   366,   367,   363,   368,   368,
     368,   368,   368,   368,   368,   368,   369,   369,   370,   370,
     371,   372,   372,   372,   373,   374,   375,   375,   376,   376,
     377,   377,   377,   377,   377,   378,   378,   378,   378,   378,
     380,   379,   381,   381,   381,   381,   381,   381,   381,   381,
     382,   382
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     1,     1,     1,     1,     1,     2,
       2,     2,     2,     2,     2,     3,     3,     4,     6,     0,
       5,     0,     5,     0,     8,     0,     8,     0,     1,     1,
       1,     0,     1,     1,     3,     0,     1,     0,     1,     1,
       1,     1,     1,     1,     1,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     4,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     0,     4,     2,     2,     2,     0,     4,
       0,     0,     5,     0,     0,     5,     1,     1,     1,     3,
       3,     0,     4,     4,     1,     3,     0,     2,     1,     1,
       1,     1,     1,     1,     4,     7,     4,     7,     0,     1,
       1,     1,     1,     2,     0,     1,     1,     3,     1,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     1,     2,     1,     2,     2,
       1,     1,     2,     1,     2,     3,     2,     2,     2,     3,
       3,     2,     3,     5,     1,     2,     1,     1,     2,     2,
       2,     1,     1,     2,     3,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     1,
       1,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     4,     1,     4,     2,
       2,     1,     3,     1,     1,     2,     2,     2,     2,     2,
       1,     1,     3,     3,     2,     1,     1,     4,     2,     4,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     2,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     1,
       1,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     2,     2,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     1,
       1,     1,     1,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       2,     2,     3,     4,     1,     3,     0,     4,     0,     1,
       1,     3,     2,     4,     1,     3,     0,     0,     5,     0,
       5,     1,     3,     3,     2,     8,     2,     0,     4,     0,
       4,     0,     5,     0,     4,     1,     3,     1,     3,     1,
       2,     4,     3,     2,     0,     5,     3,     2,     2,     3,
       4,     0,     5,     2,     4,     0,     2,     0,     4,     2,
       4,     0,     8,     0,     5,     3,     4,     3,     0,     7,
       1,     3,     1,     2,     1,     2,     0,     6,     0,     3,
       0,     1,     1,     3,     0,     1,     1,     1,     3,     3,
       5,     1,     3,     1,     2,     3,     5,     4,     5,     7,
       3,     4,     6,     5,     6,     8,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     3,     3,     4,     0,     0,     6,     0,     4,
       0,     0,     6,     0,     0,     7,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     3,     2,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     3,
       1,     2,     0,     0,     6,     0,     0,     7,     0,     0,
       5,     0,     5,     0,     0,     7,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     0,     0,    12,
       1,     1,     0,     2,     2,     1,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     2,     1,
       1,     3,     0,     0,     0,    10,     0,     1,     0,     4,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     4,     1,     2,     0,     5,     0,     6,     1,     2,
       0,     0,     5,     0,     0,     0,     0,    11,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     2,     0,     3,
       1,     0,     3,     3,     1,     2,     3,     2,     0,     2,
       1,     2,     1,     2,     3,     1,     1,     1,     1,     1,
       0,     6,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (pComp, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256



/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)

/* This macro is provided for backward compatibility. */
#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, pComp); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, PHB_COMP pComp)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (pComp);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, PHB_COMP pComp)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, pComp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule, PHB_COMP pComp)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                                              , pComp);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, Rule, pComp); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, PHB_COMP pComp)
{
  YYUSE (yyvaluep);
  YYUSE (pComp);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  switch (yytype)
    {
          case 19: /* LITERAL  */
#line 286 "harbour.y" /* yacc.c:1257  */
      { if( ((*yyvaluep).valChar).dealloc ) hb_xfree( ((*yyvaluep).valChar).string ); }
#line 3557 "harboury.c" /* yacc.c:1257  */
        break;

    case 96: /* CBSTART  */
#line 285 "harbour.y" /* yacc.c:1257  */
      { if( ((*yyvaluep).asCodeblock).string )  hb_xfree( ((*yyvaluep).asCodeblock).string ); }
#line 3563 "harboury.c" /* yacc.c:1257  */
        break;


      default:
        break;
    }
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (PHB_COMP pComp)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yystacksize);

        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, pComp);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 9:
#line 299 "harbour.y" /* yacc.c:1646  */
    { yyclearin; yyerrok; }
#line 3831 "harboury.c" /* yacc.c:1646  */
    break;

  case 15:
#line 305 "harbour.y" /* yacc.c:1646  */
    { yyclearin; yyerrok; }
#line 3837 "harboury.c" /* yacc.c:1646  */
    break;

  case 16:
#line 309 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->currLine = ( int ) (yyvsp[-1].valLong).lNumber;
                    HB_COMP_PARAM->pLex->fEol = HB_FALSE; }
#line 3844 "harboury.c" /* yacc.c:1646  */
    break;

  case 17:
#line 312 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->currModule = hb_compIdentifierNew( HB_COMP_PARAM, (yyvsp[-1].valChar).string, (yyvsp[-1].valChar).dealloc ? HB_IDENT_FREE : HB_IDENT_STATIC );
                    HB_COMP_PARAM->currLine = ( int ) (yyvsp[-2].valLong).lNumber;
                    HB_COMP_PARAM->pLex->fEol = HB_FALSE;
                    (yyvsp[-1].valChar).dealloc = HB_FALSE; }
#line 3853 "harboury.c" /* yacc.c:1646  */
    break;

  case 18:
#line 317 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->currModule = hb_compIdentifierNew( HB_COMP_PARAM, (yyvsp[-1].valChar).string, (yyvsp[-1].valChar).dealloc ? HB_IDENT_FREE : HB_IDENT_STATIC );
                    HB_COMP_PARAM->currLine = ( int ) (yyvsp[-4].valLong).lNumber;
                    HB_COMP_PARAM->pLex->fEol = HB_FALSE;
                    if( (yyvsp[-3].valChar).dealloc ) { hb_xfree( (yyvsp[-3].valChar).string ); (yyvsp[-3].valChar).dealloc = HB_FALSE; }
                    (yyvsp[-1].valChar).dealloc = HB_FALSE; }
#line 3863 "harboury.c" /* yacc.c:1646  */
    break;

  case 19:
#line 324 "harbour.y" /* yacc.c:1646  */
    { hb_compFunctionAdd( HB_COMP_PARAM, (yyvsp[0].string), ( HB_SYMBOLSCOPE ) (yyvsp[-2].iNumber), 0 ); }
#line 3869 "harboury.c" /* yacc.c:1646  */
    break;

  case 21:
#line 325 "harbour.y" /* yacc.c:1646  */
    { hb_compFunctionAdd( HB_COMP_PARAM, (yyvsp[0].string), ( HB_SYMBOLSCOPE ) (yyvsp[-2].iNumber), HB_FUNF_PROCEDURE ); }
#line 3875 "harboury.c" /* yacc.c:1646  */
    break;

  case 23:
#line 326 "harbour.y" /* yacc.c:1646  */
    { hb_compFunctionAdd( HB_COMP_PARAM, (yyvsp[0].string), ( HB_SYMBOLSCOPE ) (yyvsp[-2].iNumber), 0 ); HB_COMP_PARAM->iVarScope = HB_VSCOMP_PARAMETER; }
#line 3881 "harboury.c" /* yacc.c:1646  */
    break;

  case 25:
#line 327 "harbour.y" /* yacc.c:1646  */
    { hb_compFunctionAdd( HB_COMP_PARAM, (yyvsp[0].string), ( HB_SYMBOLSCOPE ) (yyvsp[-2].iNumber), HB_FUNF_PROCEDURE ); HB_COMP_PARAM->iVarScope = HB_VSCOMP_PARAMETER;}
#line 3887 "harboury.c" /* yacc.c:1646  */
    break;

  case 27:
#line 330 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber) = HB_FS_PUBLIC; }
#line 3893 "harboury.c" /* yacc.c:1646  */
    break;

  case 28:
#line 331 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber) = HB_FS_STATIC; }
#line 3899 "harboury.c" /* yacc.c:1646  */
    break;

  case 29:
#line 332 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber) = HB_FS_INIT; }
#line 3905 "harboury.c" /* yacc.c:1646  */
    break;

  case 30:
#line 333 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber) = HB_FS_EXIT; }
#line 3911 "harboury.c" /* yacc.c:1646  */
    break;

  case 31:
#line 336 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber) = 0; }
#line 3917 "harboury.c" /* yacc.c:1646  */
    break;

  case 32:
#line 337 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->functions.pLast->fVParams = HB_TRUE; (yyval.iNumber) = 0; }
#line 3923 "harboury.c" /* yacc.c:1646  */
    break;

  case 34:
#line 339 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->functions.pLast->fVParams = HB_TRUE; (yyval.iNumber) = (yyvsp[-2].iNumber); }
#line 3929 "harboury.c" /* yacc.c:1646  */
    break;

  case 35:
#line 342 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, ' ', NULL ); }
#line 3935 "harboury.c" /* yacc.c:1646  */
    break;

  case 37:
#line 346 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, ' ', NULL ); }
#line 3941 "harboury.c" /* yacc.c:1646  */
    break;

  case 39:
#line 350 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'N', NULL ); }
#line 3947 "harboury.c" /* yacc.c:1646  */
    break;

  case 40:
#line 351 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'C', NULL ); }
#line 3953 "harboury.c" /* yacc.c:1646  */
    break;

  case 41:
#line 352 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'D', NULL ); }
#line 3959 "harboury.c" /* yacc.c:1646  */
    break;

  case 42:
#line 353 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'L', NULL ); }
#line 3965 "harboury.c" /* yacc.c:1646  */
    break;

  case 43:
#line 354 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'B', NULL ); }
#line 3971 "harboury.c" /* yacc.c:1646  */
    break;

  case 44:
#line 355 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'O', NULL ); }
#line 3977 "harboury.c" /* yacc.c:1646  */
    break;

  case 45:
#line 356 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'S', (yyvsp[0].string) );   }
#line 3983 "harboury.c" /* yacc.c:1646  */
    break;

  case 46:
#line 357 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, ' ', NULL ); }
#line 3989 "harboury.c" /* yacc.c:1646  */
    break;

  case 48:
#line 361 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'A', NULL ); }
#line 3995 "harboury.c" /* yacc.c:1646  */
    break;

  case 49:
#line 362 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'n', NULL ); }
#line 4001 "harboury.c" /* yacc.c:1646  */
    break;

  case 50:
#line 363 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'c', NULL ); }
#line 4007 "harboury.c" /* yacc.c:1646  */
    break;

  case 51:
#line 364 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'd', NULL ); }
#line 4013 "harboury.c" /* yacc.c:1646  */
    break;

  case 52:
#line 365 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'l', NULL ); }
#line 4019 "harboury.c" /* yacc.c:1646  */
    break;

  case 53:
#line 366 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'a', NULL ); }
#line 4025 "harboury.c" /* yacc.c:1646  */
    break;

  case 54:
#line 367 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'b', NULL ); }
#line 4031 "harboury.c" /* yacc.c:1646  */
    break;

  case 55:
#line 368 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'o', NULL ); }
#line 4037 "harboury.c" /* yacc.c:1646  */
    break;

  case 56:
#line 369 "harbour.y" /* yacc.c:1646  */
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 's', (yyvsp[0].string) );   }
#line 4043 "harboury.c" /* yacc.c:1646  */
    break;

  case 57:
#line 372 "harbour.y" /* yacc.c:1646  */
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) ); (yyval.iNumber) = 1; }
#line 4049 "harboury.c" /* yacc.c:1646  */
    break;

  case 58:
#line 373 "harbour.y" /* yacc.c:1646  */
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) ); (yyval.iNumber)++; }
#line 4055 "harboury.c" /* yacc.c:1646  */
    break;

  case 60:
#line 382 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[-1].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
#line 4061 "harboury.c" /* yacc.c:1646  */
    break;

  case 61:
#line 383 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[-1].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
#line 4067 "harboury.c" /* yacc.c:1646  */
    break;

  case 62:
#line 384 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[-1].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
#line 4073 "harboury.c" /* yacc.c:1646  */
    break;

  case 63:
#line 385 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[-1].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
#line 4079 "harboury.c" /* yacc.c:1646  */
    break;

  case 64:
#line 386 "harbour.y" /* yacc.c:1646  */
    { if( HB_COMP_ISSUPPORTED( HB_COMPFLAG_XBASE ) )
                                         HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[-1].asExpr), HB_COMP_PARAM ) );
                                      else
                                         HB_COMP_EXPR_FREE( HB_COMP_ERROR_SYNTAX( (yyvsp[-1].asExpr) ) );
                                      HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN;
                                    }
#line 4090 "harboury.c" /* yacc.c:1646  */
    break;

  case 65:
#line 392 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[-1].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
#line 4096 "harboury.c" /* yacc.c:1646  */
    break;

  case 66:
#line 393 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[-1].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
#line 4102 "harboury.c" /* yacc.c:1646  */
    break;

  case 67:
#line 394 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[-1].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
#line 4108 "harboury.c" /* yacc.c:1646  */
    break;

  case 68:
#line 395 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[-1].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
#line 4114 "harboury.c" /* yacc.c:1646  */
    break;

  case 69:
#line 396 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[-1].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
#line 4120 "harboury.c" /* yacc.c:1646  */
    break;

  case 70:
#line 397 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[-1].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
#line 4126 "harboury.c" /* yacc.c:1646  */
    break;

  case 71:
#line 398 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[-1].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
#line 4132 "harboury.c" /* yacc.c:1646  */
    break;

  case 72:
#line 399 "harbour.y" /* yacc.c:1646  */
    { hb_compGenBreak( HB_COMP_PARAM ); hb_compGenPCode2( HB_P_DOSHORT, 0, HB_COMP_PARAM );
                                      HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_BREAK_CODE; }
#line 4139 "harboury.c" /* yacc.c:1646  */
    break;

  case 73:
#line 401 "harbour.y" /* yacc.c:1646  */
    { hb_compLinePushIfInside( HB_COMP_PARAM ); }
#line 4145 "harboury.c" /* yacc.c:1646  */
    break;

  case 74:
#line 402 "harbour.y" /* yacc.c:1646  */
    {
                                       hb_compGenBreak( HB_COMP_PARAM ); HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[-1].asExpr), HB_COMP_PARAM ) );
                                       hb_compGenPCode2( HB_P_DOSHORT, 1, HB_COMP_PARAM );
                                       HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_BREAK_CODE;
                                    }
#line 4155 "harboury.c" /* yacc.c:1646  */
    break;

  case 75:
#line 407 "harbour.y" /* yacc.c:1646  */
    { hb_compLoopExit( HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_BREAK_CODE; }
#line 4161 "harboury.c" /* yacc.c:1646  */
    break;

  case 76:
#line 408 "harbour.y" /* yacc.c:1646  */
    { hb_compLoopLoop( HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_BREAK_CODE; }
#line 4167 "harboury.c" /* yacc.c:1646  */
    break;

  case 77:
#line 409 "harbour.y" /* yacc.c:1646  */
    {
                        if( HB_COMP_PARAM->functions.pLast->wSeqCounter )
                        {
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "RETURN", NULL );
                        }
                        hb_compGenPCode1( HB_P_ENDPROC, HB_COMP_PARAM );
                        if( ( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_PROCEDURE ) == 0 )
                        {
                           /* return from a function without a return value */
                           hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_NO_RETURN_VALUE, NULL, NULL );
                        }
                        HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE;
                     }
#line 4185 "harboury.c" /* yacc.c:1646  */
    break;

  case 78:
#line 422 "harbour.y" /* yacc.c:1646  */
    {  hb_compLinePushIfInside( HB_COMP_PARAM ); }
#line 4191 "harboury.c" /* yacc.c:1646  */
    break;

  case 79:
#line 424 "harbour.y" /* yacc.c:1646  */
    {
                        if( HB_COMP_PARAM->functions.pLast->wSeqCounter )
                        {
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "RETURN", NULL );
                        }
                        /* TODO: check if return value agree with declared value */
                        HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[-1].asExpr), HB_COMP_PARAM ) );
                        if( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_EXTBLOCK )
                           /* extended clodeblock, use HB_P_ENDBLOCK to return value and stop execution */
                           hb_compGenPCode1( HB_P_ENDBLOCK, HB_COMP_PARAM );
                        else
                           hb_compGenPCode2( HB_P_RETVALUE, HB_P_ENDPROC, HB_COMP_PARAM );
                        if( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_PROCEDURE )
                        {
                           /* procedure returns a value */
                           hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_PROC_RETURN_VALUE, NULL, NULL );
                        }
                        HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE;
                     }
#line 4215 "harboury.c" /* yacc.c:1646  */
    break;

  case 80:
#line 443 "harbour.y" /* yacc.c:1646  */
    {  hb_compLinePushIfInside( HB_COMP_PARAM ); HB_COMP_PARAM->iVarScope = HB_VSCOMP_PUBLIC; }
#line 4221 "harboury.c" /* yacc.c:1646  */
    break;

  case 81:
#line 445 "harbour.y" /* yacc.c:1646  */
    {  hb_compRTVariableGen( HB_COMP_PARAM, "__MVPUBLIC" );
                        HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE;
                        HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN;
                     }
#line 4230 "harboury.c" /* yacc.c:1646  */
    break;

  case 83:
#line 449 "harbour.y" /* yacc.c:1646  */
    {  hb_compLinePushIfInside( HB_COMP_PARAM ); HB_COMP_PARAM->iVarScope = HB_VSCOMP_PRIVATE; }
#line 4236 "harboury.c" /* yacc.c:1646  */
    break;

  case 84:
#line 451 "harbour.y" /* yacc.c:1646  */
    {  hb_compRTVariableGen( HB_COMP_PARAM, "__MVPRIVATE" );
                        HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE;
                        HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN;
                     }
#line 4245 "harboury.c" /* yacc.c:1646  */
    break;

  case 91:
#line 460 "harbour.y" /* yacc.c:1646  */
    {
                  if( HB_COMP_PARAM->szAnnounce == NULL )
                     HB_COMP_PARAM->szAnnounce = (yyvsp[0].string);
                  else
                     hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_DUPL_ANNOUNCE, (yyvsp[0].string), NULL );
               }
#line 4256 "harboury.c" /* yacc.c:1646  */
    break;

  case 94:
#line 469 "harbour.y" /* yacc.c:1646  */
    {
               if( (yyvsp[0].valChar).dealloc )
               {
                  (yyvsp[0].valChar).string = ( char * ) HB_UNCONST( hb_compIdentifierNew( HB_COMP_PARAM, (yyvsp[0].valChar).string, HB_IDENT_FREE ) );
                  (yyvsp[0].valChar).dealloc = HB_FALSE;
               }
               hb_compModuleAdd( HB_COMP_PARAM, (yyvsp[0].valChar).string, HB_FALSE );
            }
#line 4269 "harboury.c" /* yacc.c:1646  */
    break;

  case 95:
#line 477 "harbour.y" /* yacc.c:1646  */
    {
               {
                  char szFileName[ HB_PATH_MAX ];
                  hb_strncat( hb_strncpy( szFileName, (yyvsp[-2].valChar).string, sizeof( szFileName ) - 1 ), (yyvsp[0].valChar).string, sizeof( szFileName ) - 1 );
                  hb_compModuleAdd( HB_COMP_PARAM, hb_compIdentifierNew( HB_COMP_PARAM, szFileName, HB_IDENT_COPY ), HB_FALSE );
                  if( (yyvsp[-2].valChar).dealloc )
                  {
                     hb_xfree( (yyvsp[-2].valChar).string );
                     (yyvsp[-2].valChar).dealloc = HB_FALSE;
                  }
                  if( (yyvsp[0].valChar).dealloc )
                  {
                     hb_xfree( (yyvsp[0].valChar).string );
                     (yyvsp[0].valChar).dealloc = HB_FALSE;
                  }
               }
            }
#line 4291 "harboury.c" /* yacc.c:1646  */
    break;

  case 96:
#line 496 "harbour.y" /* yacc.c:1646  */
    { hb_compLinePushIfInside( HB_COMP_PARAM ); }
#line 4297 "harboury.c" /* yacc.c:1646  */
    break;

  case 98:
#line 499 "harbour.y" /* yacc.c:1646  */
    { (yyval.lNumber) = 0; }
#line 4303 "harboury.c" /* yacc.c:1646  */
    break;

  case 99:
#line 500 "harbour.y" /* yacc.c:1646  */
    { (yyval.lNumber) = 1; }
#line 4309 "harboury.c" /* yacc.c:1646  */
    break;

  case 100:
#line 501 "harbour.y" /* yacc.c:1646  */
    { (yyval.lNumber) = 1; }
#line 4315 "harboury.c" /* yacc.c:1646  */
    break;

  case 101:
#line 502 "harbour.y" /* yacc.c:1646  */
    { (yyval.lNumber) = 0; }
#line 4321 "harboury.c" /* yacc.c:1646  */
    break;

  case 102:
#line 503 "harbour.y" /* yacc.c:1646  */
    { (yyval.lNumber) = 0; hb_compCheckUnclosedStru( HB_COMP_PARAM, HB_COMP_PARAM->functions.pLast ); }
#line 4327 "harboury.c" /* yacc.c:1646  */
    break;

  case 103:
#line 504 "harbour.y" /* yacc.c:1646  */
    { if( HB_COMP_PARAM->ilastLineErr && HB_COMP_PARAM->ilastLineErr == HB_COMP_PARAM->currLine )
                             {
                                yyclearin;
                             }
                             else
                             {
                                yyerrok;
                                HB_COMP_PARAM->ilastLineErr = HB_COMP_PARAM->currLine;
                             }
                             (yyval.lNumber) = 0;
                           }
#line 4343 "harboury.c" /* yacc.c:1646  */
    break;

  case 113:
#line 530 "harbour.y" /* yacc.c:1646  */
    { (yyval.lNumber) += (yyvsp[0].lNumber); }
#line 4349 "harboury.c" /* yacc.c:1646  */
    break;

  case 114:
#line 533 "harbour.y" /* yacc.c:1646  */
    { (yyval.lNumber) = 0; }
#line 4355 "harboury.c" /* yacc.c:1646  */
    break;

  case 116:
#line 537 "harbour.y" /* yacc.c:1646  */
    { hb_compExternAdd( HB_COMP_PARAM, (yyvsp[0].string), 0 ); }
#line 4361 "harboury.c" /* yacc.c:1646  */
    break;

  case 117:
#line 538 "harbour.y" /* yacc.c:1646  */
    { hb_compExternAdd( HB_COMP_PARAM, (yyvsp[0].string), 0 ); }
#line 4367 "harboury.c" /* yacc.c:1646  */
    break;

  case 118:
#line 541 "harbour.y" /* yacc.c:1646  */
    { hb_compExternAdd( HB_COMP_PARAM, (yyvsp[0].string), HB_FS_DEFERRED ); }
#line 4373 "harboury.c" /* yacc.c:1646  */
    break;

  case 119:
#line 542 "harbour.y" /* yacc.c:1646  */
    { hb_compExternAdd( HB_COMP_PARAM, (yyvsp[0].string), HB_FS_DEFERRED ); }
#line 4379 "harboury.c" /* yacc.c:1646  */
    break;

  case 121:
#line 546 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = "STEP"; }
#line 4385 "harboury.c" /* yacc.c:1646  */
    break;

  case 122:
#line 547 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = "TO"; }
#line 4391 "harboury.c" /* yacc.c:1646  */
    break;

  case 123:
#line 548 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = "LOOP"; }
#line 4397 "harboury.c" /* yacc.c:1646  */
    break;

  case 124:
#line 549 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = "EXIT"; }
#line 4403 "harboury.c" /* yacc.c:1646  */
    break;

  case 125:
#line 550 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = "IN"; }
#line 4409 "harboury.c" /* yacc.c:1646  */
    break;

  case 126:
#line 551 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4415 "harboury.c" /* yacc.c:1646  */
    break;

  case 127:
#line 552 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4421 "harboury.c" /* yacc.c:1646  */
    break;

  case 128:
#line 553 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4427 "harboury.c" /* yacc.c:1646  */
    break;

  case 129:
#line 554 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4433 "harboury.c" /* yacc.c:1646  */
    break;

  case 130:
#line 555 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4439 "harboury.c" /* yacc.c:1646  */
    break;

  case 131:
#line 556 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4445 "harboury.c" /* yacc.c:1646  */
    break;

  case 132:
#line 557 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4451 "harboury.c" /* yacc.c:1646  */
    break;

  case 133:
#line 558 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4457 "harboury.c" /* yacc.c:1646  */
    break;

  case 134:
#line 559 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4463 "harboury.c" /* yacc.c:1646  */
    break;

  case 135:
#line 560 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4469 "harboury.c" /* yacc.c:1646  */
    break;

  case 136:
#line 561 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4475 "harboury.c" /* yacc.c:1646  */
    break;

  case 137:
#line 562 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4481 "harboury.c" /* yacc.c:1646  */
    break;

  case 138:
#line 563 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 4487 "harboury.c" /* yacc.c:1646  */
    break;

  case 139:
#line 568 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewDouble( (yyvsp[0].valDouble).dNumber, (yyvsp[0].valDouble).bWidth, (yyvsp[0].valDouble).bDec, HB_COMP_PARAM ); }
#line 4493 "harboury.c" /* yacc.c:1646  */
    break;

  case 140:
#line 569 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewLong( (yyvsp[0].valLong).lNumber, HB_COMP_PARAM ); }
#line 4499 "harboury.c" /* yacc.c:1646  */
    break;

  case 141:
#line 572 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewDate( ( long ) (yyvsp[0].valLong).lNumber, HB_COMP_PARAM ); }
#line 4505 "harboury.c" /* yacc.c:1646  */
    break;

  case 142:
#line 575 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewTimeStamp( (yyvsp[0].valTimeStamp).date, (yyvsp[0].valTimeStamp).time, HB_COMP_PARAM ); }
#line 4511 "harboury.c" /* yacc.c:1646  */
    break;

  case 143:
#line 578 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewLong( (yyvsp[-1].valLong).lNumber, HB_COMP_PARAM ); }
#line 4517 "harboury.c" /* yacc.c:1646  */
    break;

  case 144:
#line 579 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, hb_compExprNewDouble( (yyvsp[-1].valDouble).dNumber, (yyvsp[-1].valDouble).bWidth, (yyvsp[-1].valDouble).bDec, HB_COMP_PARAM ) ); }
#line 4523 "harboury.c" /* yacc.c:1646  */
    break;

  case 145:
#line 584 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewNil( HB_COMP_PARAM ); }
#line 4529 "harboury.c" /* yacc.c:1646  */
    break;

  case 147:
#line 592 "harbour.y" /* yacc.c:1646  */
    {
                                 (yyval.asExpr) = hb_compExprNewString( (yyvsp[0].valChar).string, (yyvsp[0].valChar).length, (yyvsp[0].valChar).dealloc, HB_COMP_PARAM );
                                 (yyvsp[0].valChar).dealloc = HB_FALSE;
                              }
#line 4538 "harboury.c" /* yacc.c:1646  */
    break;

  case 150:
#line 608 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewLogical( HB_TRUE, HB_COMP_PARAM ); }
#line 4544 "harboury.c" /* yacc.c:1646  */
    break;

  case 151:
#line 609 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewLogical( HB_FALSE, HB_COMP_PARAM ); }
#line 4550 "harboury.c" /* yacc.c:1646  */
    break;

  case 153:
#line 617 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewSelf( HB_COMP_PARAM ); }
#line 4556 "harboury.c" /* yacc.c:1646  */
    break;

  case 155:
#line 631 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewArray( (yyvsp[-1].asExpr), HB_COMP_PARAM ); }
#line 4562 "harboury.c" /* yacc.c:1646  */
    break;

  case 157:
#line 639 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4568 "harboury.c" /* yacc.c:1646  */
    break;

  case 159:
#line 645 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewHash( NULL, HB_COMP_PARAM ); }
#line 4574 "harboury.c" /* yacc.c:1646  */
    break;

  case 160:
#line 646 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewHash( (yyvsp[-1].asExpr), HB_COMP_PARAM ); }
#line 4580 "harboury.c" /* yacc.c:1646  */
    break;

  case 162:
#line 652 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprNewList( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr) ); }
#line 4586 "harboury.c" /* yacc.c:1646  */
    break;

  case 163:
#line 653 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprAddListExpr( (yyvsp[-4].asExpr), (yyvsp[-2].asExpr) ), (yyvsp[0].asExpr) ); }
#line 4592 "harboury.c" /* yacc.c:1646  */
    break;

  case 164:
#line 658 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewVar( (yyvsp[0].string), HB_COMP_PARAM ); }
#line 4598 "harboury.c" /* yacc.c:1646  */
    break;

  case 165:
#line 661 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAlias( (yyvsp[-1].string), HB_COMP_PARAM ); }
#line 4604 "harboury.c" /* yacc.c:1646  */
    break;

  case 166:
#line 666 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewMacro( NULL, '&', (yyvsp[0].string), HB_COMP_PARAM ); }
#line 4610 "harboury.c" /* yacc.c:1646  */
    break;

  case 167:
#line 667 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewMacro( NULL, 0, (yyvsp[0].string), HB_COMP_PARAM ); }
#line 4616 "harboury.c" /* yacc.c:1646  */
    break;

  case 169:
#line 675 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewMacro( (yyvsp[0].asExpr), 0, NULL, HB_COMP_PARAM ); }
#line 4622 "harboury.c" /* yacc.c:1646  */
    break;

  case 173:
#line 689 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAlias( "FIELD", HB_COMP_PARAM ); }
#line 4628 "harboury.c" /* yacc.c:1646  */
    break;

  case 174:
#line 690 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4634 "harboury.c" /* yacc.c:1646  */
    break;

  case 175:
#line 695 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4640 "harboury.c" /* yacc.c:1646  */
    break;

  case 176:
#line 696 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4646 "harboury.c" /* yacc.c:1646  */
    break;

  case 177:
#line 697 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4652 "harboury.c" /* yacc.c:1646  */
    break;

  case 178:
#line 698 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4658 "harboury.c" /* yacc.c:1646  */
    break;

  case 179:
#line 699 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4664 "harboury.c" /* yacc.c:1646  */
    break;

  case 180:
#line 700 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4670 "harboury.c" /* yacc.c:1646  */
    break;

  case 181:
#line 701 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4676 "harboury.c" /* yacc.c:1646  */
    break;

  case 182:
#line 702 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4682 "harboury.c" /* yacc.c:1646  */
    break;

  case 183:
#line 703 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4688 "harboury.c" /* yacc.c:1646  */
    break;

  case 184:
#line 704 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4694 "harboury.c" /* yacc.c:1646  */
    break;

  case 185:
#line 705 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4700 "harboury.c" /* yacc.c:1646  */
    break;

  case 186:
#line 706 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4706 "harboury.c" /* yacc.c:1646  */
    break;

  case 187:
#line 707 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4712 "harboury.c" /* yacc.c:1646  */
    break;

  case 188:
#line 708 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4718 "harboury.c" /* yacc.c:1646  */
    break;

  case 189:
#line 711 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewVar( (yyvsp[0].string), HB_COMP_PARAM ); }
#line 4724 "harboury.c" /* yacc.c:1646  */
    break;

  case 191:
#line 715 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4730 "harboury.c" /* yacc.c:1646  */
    break;

  case 192:
#line 716 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4736 "harboury.c" /* yacc.c:1646  */
    break;

  case 193:
#line 717 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4742 "harboury.c" /* yacc.c:1646  */
    break;

  case 194:
#line 718 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4748 "harboury.c" /* yacc.c:1646  */
    break;

  case 195:
#line 719 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4754 "harboury.c" /* yacc.c:1646  */
    break;

  case 196:
#line 720 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4760 "harboury.c" /* yacc.c:1646  */
    break;

  case 197:
#line 721 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4766 "harboury.c" /* yacc.c:1646  */
    break;

  case 198:
#line 722 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4772 "harboury.c" /* yacc.c:1646  */
    break;

  case 199:
#line 723 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4778 "harboury.c" /* yacc.c:1646  */
    break;

  case 200:
#line 724 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4784 "harboury.c" /* yacc.c:1646  */
    break;

  case 201:
#line 725 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4790 "harboury.c" /* yacc.c:1646  */
    break;

  case 202:
#line 726 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4796 "harboury.c" /* yacc.c:1646  */
    break;

  case 203:
#line 727 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4802 "harboury.c" /* yacc.c:1646  */
    break;

  case 204:
#line 728 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4808 "harboury.c" /* yacc.c:1646  */
    break;

  case 205:
#line 729 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4814 "harboury.c" /* yacc.c:1646  */
    break;

  case 206:
#line 730 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4820 "harboury.c" /* yacc.c:1646  */
    break;

  case 207:
#line 731 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[-1].asExpr) ); }
#line 4826 "harboury.c" /* yacc.c:1646  */
    break;

  case 208:
#line 732 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4832 "harboury.c" /* yacc.c:1646  */
    break;

  case 209:
#line 733 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4838 "harboury.c" /* yacc.c:1646  */
    break;

  case 210:
#line 734 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4844 "harboury.c" /* yacc.c:1646  */
    break;

  case 211:
#line 743 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4850 "harboury.c" /* yacc.c:1646  */
    break;

  case 212:
#line 744 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4856 "harboury.c" /* yacc.c:1646  */
    break;

  case 213:
#line 745 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4862 "harboury.c" /* yacc.c:1646  */
    break;

  case 214:
#line 746 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4868 "harboury.c" /* yacc.c:1646  */
    break;

  case 215:
#line 747 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 4874 "harboury.c" /* yacc.c:1646  */
    break;

  case 216:
#line 748 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 4880 "harboury.c" /* yacc.c:1646  */
    break;

  case 217:
#line 753 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4886 "harboury.c" /* yacc.c:1646  */
    break;

  case 218:
#line 754 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4892 "harboury.c" /* yacc.c:1646  */
    break;

  case 219:
#line 755 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4898 "harboury.c" /* yacc.c:1646  */
    break;

  case 220:
#line 756 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4904 "harboury.c" /* yacc.c:1646  */
    break;

  case 221:
#line 757 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4910 "harboury.c" /* yacc.c:1646  */
    break;

  case 222:
#line 758 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4916 "harboury.c" /* yacc.c:1646  */
    break;

  case 223:
#line 759 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4922 "harboury.c" /* yacc.c:1646  */
    break;

  case 224:
#line 760 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4928 "harboury.c" /* yacc.c:1646  */
    break;

  case 225:
#line 761 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4934 "harboury.c" /* yacc.c:1646  */
    break;

  case 226:
#line 762 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4940 "harboury.c" /* yacc.c:1646  */
    break;

  case 227:
#line 763 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4946 "harboury.c" /* yacc.c:1646  */
    break;

  case 228:
#line 764 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4952 "harboury.c" /* yacc.c:1646  */
    break;

  case 229:
#line 765 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4958 "harboury.c" /* yacc.c:1646  */
    break;

  case 230:
#line 766 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4964 "harboury.c" /* yacc.c:1646  */
    break;

  case 231:
#line 767 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4970 "harboury.c" /* yacc.c:1646  */
    break;

  case 232:
#line 768 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4976 "harboury.c" /* yacc.c:1646  */
    break;

  case 233:
#line 769 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4982 "harboury.c" /* yacc.c:1646  */
    break;

  case 234:
#line 770 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 4988 "harboury.c" /* yacc.c:1646  */
    break;

  case 236:
#line 777 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewFunCall( hb_compExprNewFunName( (yyvsp[-3].string), HB_COMP_PARAM ), (yyvsp[-1].asExpr), HB_COMP_PARAM ); }
#line 4994 "harboury.c" /* yacc.c:1646  */
    break;

  case 238:
#line 781 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewFunCall( (yyvsp[-3].asExpr), (yyvsp[-1].asExpr), HB_COMP_PARAM ); }
#line 5000 "harboury.c" /* yacc.c:1646  */
    break;

  case 239:
#line 785 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, (yyvsp[0].asExpr) ); }
#line 5006 "harboury.c" /* yacc.c:1646  */
    break;

  case 241:
#line 791 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5012 "harboury.c" /* yacc.c:1646  */
    break;

  case 242:
#line 792 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[-2].asExpr), (yyvsp[0].asExpr) ); }
#line 5018 "harboury.c" /* yacc.c:1646  */
    break;

  case 245:
#line 799 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, hb_compExprNewVarRef( (yyvsp[0].string), HB_COMP_PARAM ) ); }
#line 5024 "harboury.c" /* yacc.c:1646  */
    break;

  case 246:
#line 800 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, hb_compExprNewRef( (yyvsp[0].asExpr), HB_COMP_PARAM ) ); }
#line 5030 "harboury.c" /* yacc.c:1646  */
    break;

  case 247:
#line 801 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, hb_compExprNewRef( (yyvsp[0].asExpr), HB_COMP_PARAM ) ); }
#line 5036 "harboury.c" /* yacc.c:1646  */
    break;

  case 248:
#line 802 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, hb_compExprNewRef( (yyvsp[0].asExpr), HB_COMP_PARAM ) ); }
#line 5042 "harboury.c" /* yacc.c:1646  */
    break;

  case 249:
#line 803 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, (yyvsp[0].asExpr) ); (yyval.asExpr)->value.asList.reference = HB_TRUE; }
#line 5048 "harboury.c" /* yacc.c:1646  */
    break;

  case 250:
#line 806 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewArgRef( HB_COMP_PARAM ); }
#line 5054 "harboury.c" /* yacc.c:1646  */
    break;

  case 252:
#line 812 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compCheckMethod( HB_COMP_PARAM, hb_compExprNewMethodObject( (yyvsp[0].asExpr), (yyvsp[-2].asExpr) ) ); }
#line 5060 "harboury.c" /* yacc.c:1646  */
    break;

  case 253:
#line 813 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewMethodObject( (yyvsp[0].asExpr), (yyvsp[-2].asExpr) ); }
#line 5066 "harboury.c" /* yacc.c:1646  */
    break;

  case 254:
#line 814 "harbour.y" /* yacc.c:1646  */
    {  if( HB_COMP_PARAM->functions.pLast->wWithObjectCnt == 0 )
                                                hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_WITHOBJECT, NULL, NULL );
                                             (yyval.asExpr) = (yyvsp[0].asExpr);
                                          }
#line 5075 "harboury.c" /* yacc.c:1646  */
    break;

  case 255:
#line 820 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewSend( (yyvsp[0].string), HB_COMP_PARAM ); }
#line 5081 "harboury.c" /* yacc.c:1646  */
    break;

  case 256:
#line 821 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewMacroSend( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5087 "harboury.c" /* yacc.c:1646  */
    break;

  case 257:
#line 824 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[-1].string), HB_COMP_PARAM ); }
#line 5093 "harboury.c" /* yacc.c:1646  */
    break;

  case 259:
#line 832 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewMethodCall( (yyvsp[-3].asExpr), (yyvsp[-1].asExpr) ); }
#line 5099 "harboury.c" /* yacc.c:1646  */
    break;

  case 269:
#line 852 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-1].asExpr); }
#line 5105 "harboury.c" /* yacc.c:1646  */
    break;

  case 279:
#line 862 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-1].asExpr); }
#line 5111 "harboury.c" /* yacc.c:1646  */
    break;

  case 282:
#line 865 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-1].asExpr); }
#line 5117 "harboury.c" /* yacc.c:1646  */
    break;

  case 284:
#line 867 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-1].asExpr); }
#line 5123 "harboury.c" /* yacc.c:1646  */
    break;

  case 296:
#line 881 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-1].asExpr); }
#line 5129 "harboury.c" /* yacc.c:1646  */
    break;

  case 297:
#line 882 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-1].asExpr); }
#line 5135 "harboury.c" /* yacc.c:1646  */
    break;

  case 299:
#line 886 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewArgRef( HB_COMP_PARAM ); }
#line 5141 "harboury.c" /* yacc.c:1646  */
    break;

  case 301:
#line 890 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewEmpty( HB_COMP_PARAM ); }
#line 5147 "harboury.c" /* yacc.c:1646  */
    break;

  case 303:
#line 894 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewVar( (yyvsp[0].string), HB_COMP_PARAM ); }
#line 5153 "harboury.c" /* yacc.c:1646  */
    break;

  case 309:
#line 900 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprListStrip( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5159 "harboury.c" /* yacc.c:1646  */
    break;

  case 331:
#line 933 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewPostInc( (yyvsp[-1].asExpr), HB_COMP_PARAM ); }
#line 5165 "harboury.c" /* yacc.c:1646  */
    break;

  case 332:
#line 934 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewPostDec( (yyvsp[-1].asExpr), HB_COMP_PARAM ); }
#line 5171 "harboury.c" /* yacc.c:1646  */
    break;

  case 333:
#line 937 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 5177 "harboury.c" /* yacc.c:1646  */
    break;

  case 334:
#line 940 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewPreInc( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5183 "harboury.c" /* yacc.c:1646  */
    break;

  case 335:
#line 941 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewPreDec( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5189 "harboury.c" /* yacc.c:1646  */
    break;

  case 336:
#line 944 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewNot( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5195 "harboury.c" /* yacc.c:1646  */
    break;

  case 337:
#line 945 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewNegate( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5201 "harboury.c" /* yacc.c:1646  */
    break;

  case 338:
#line 946 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 5207 "harboury.c" /* yacc.c:1646  */
    break;

  case 339:
#line 949 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[-2].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5213 "harboury.c" /* yacc.c:1646  */
    break;

  case 340:
#line 952 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[-2].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5219 "harboury.c" /* yacc.c:1646  */
    break;

  case 341:
#line 955 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5225 "harboury.c" /* yacc.c:1646  */
    break;

  case 342:
#line 958 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5231 "harboury.c" /* yacc.c:1646  */
    break;

  case 343:
#line 961 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5237 "harboury.c" /* yacc.c:1646  */
    break;

  case 344:
#line 964 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5243 "harboury.c" /* yacc.c:1646  */
    break;

  case 345:
#line 967 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5249 "harboury.c" /* yacc.c:1646  */
    break;

  case 346:
#line 970 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5255 "harboury.c" /* yacc.c:1646  */
    break;

  case 353:
#line 981 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlus( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5261 "harboury.c" /* yacc.c:1646  */
    break;

  case 354:
#line 982 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinus( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5267 "harboury.c" /* yacc.c:1646  */
    break;

  case 355:
#line 983 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMult( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5273 "harboury.c" /* yacc.c:1646  */
    break;

  case 356:
#line 984 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDiv( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5279 "harboury.c" /* yacc.c:1646  */
    break;

  case 357:
#line 985 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMod( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5285 "harboury.c" /* yacc.c:1646  */
    break;

  case 358:
#line 986 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPower( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5291 "harboury.c" /* yacc.c:1646  */
    break;

  case 359:
#line 989 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewAnd( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5297 "harboury.c" /* yacc.c:1646  */
    break;

  case 360:
#line 990 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewOr( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5303 "harboury.c" /* yacc.c:1646  */
    break;

  case 361:
#line 993 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewEQ( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5309 "harboury.c" /* yacc.c:1646  */
    break;

  case 362:
#line 994 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewLT( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5315 "harboury.c" /* yacc.c:1646  */
    break;

  case 363:
#line 995 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewGT( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5321 "harboury.c" /* yacc.c:1646  */
    break;

  case 364:
#line 996 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewLE( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5327 "harboury.c" /* yacc.c:1646  */
    break;

  case 365:
#line 997 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewGE( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5333 "harboury.c" /* yacc.c:1646  */
    break;

  case 366:
#line 998 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewNE( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5339 "harboury.c" /* yacc.c:1646  */
    break;

  case 367:
#line 999 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewNE( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5345 "harboury.c" /* yacc.c:1646  */
    break;

  case 368:
#line 1000 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewIN( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5351 "harboury.c" /* yacc.c:1646  */
    break;

  case 369:
#line 1001 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewEqual( (yyvsp[-2].asExpr), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5357 "harboury.c" /* yacc.c:1646  */
    break;

  case 371:
#line 1010 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewArrayAt( (yyvsp[-2].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5363 "harboury.c" /* yacc.c:1646  */
    break;

  case 372:
#line 1011 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewArrayAt( (yyvsp[-2].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5369 "harboury.c" /* yacc.c:1646  */
    break;

  case 373:
#line 1012 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewArrayAt( (yyvsp[-3].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5375 "harboury.c" /* yacc.c:1646  */
    break;

  case 374:
#line 1015 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewList( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5381 "harboury.c" /* yacc.c:1646  */
    break;

  case 375:
#line 1016 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[-2].asExpr), (yyvsp[0].asExpr) ); }
#line 5387 "harboury.c" /* yacc.c:1646  */
    break;

  case 376:
#line 1019 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewCodeBlock( (yyvsp[0].asCodeblock).string, (yyvsp[0].asCodeblock).length, (yyvsp[0].asCodeblock).flags, HB_COMP_PARAM ); (yyvsp[0].asCodeblock).string = NULL; }
#line 5393 "harboury.c" /* yacc.c:1646  */
    break;

  case 377:
#line 1020 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-2].asExpr); }
#line 5399 "harboury.c" /* yacc.c:1646  */
    break;

  case 378:
#line 1025 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = NULL; }
#line 5405 "harboury.c" /* yacc.c:1646  */
    break;

  case 379:
#line 1026 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = NULL; (yyvsp[-1].asExpr)->value.asCodeblock.flags |= HB_BLOCK_VPARAMS; }
#line 5411 "harboury.c" /* yacc.c:1646  */
    break;

  case 380:
#line 1027 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr);   }
#line 5417 "harboury.c" /* yacc.c:1646  */
    break;

  case 381:
#line 1028 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-2].asExpr);   (yyvsp[-3].asExpr)->value.asCodeblock.flags |= HB_BLOCK_VPARAMS; }
#line 5423 "harboury.c" /* yacc.c:1646  */
    break;

  case 382:
#line 1031 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_LOCAL; (yyval.asExpr) = hb_compExprCBVarAdd( (yyvsp[-2].asExpr), (yyvsp[-1].string), (yyvsp[0].asVarType)->cVarType, HB_COMP_PARAM ); }
#line 5429 "harboury.c" /* yacc.c:1646  */
    break;

  case 383:
#line 1032 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_LOCAL; (yyval.asExpr) = hb_compExprCBVarAdd( (yyvsp[-4].asExpr), (yyvsp[-1].string), (yyvsp[0].asVarType)->cVarType, HB_COMP_PARAM ); }
#line 5435 "harboury.c" /* yacc.c:1646  */
    break;

  case 384:
#line 1035 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddCodeblockExpr( (yyvsp[(-1) - (1)].asExpr), (yyvsp[0].asExpr) ); }
#line 5441 "harboury.c" /* yacc.c:1646  */
    break;

  case 385:
#line 1036 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddCodeblockExpr( (yyvsp[(-1) - (3)].asExpr), (yyvsp[0].asExpr) ); }
#line 5447 "harboury.c" /* yacc.c:1646  */
    break;

  case 386:
#line 1040 "harbour.y" /* yacc.c:1646  */
    { (yyval.bTrue) = HB_COMP_PARAM->functions.pLast->bBlock;
                HB_COMP_PARAM->functions.pLast->bBlock = HB_TRUE; }
#line 5454 "harboury.c" /* yacc.c:1646  */
    break;

  case 387:
#line 1043 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->functions.pLast->bBlock = (yyvsp[-1].bTrue); }
#line 5460 "harboury.c" /* yacc.c:1646  */
    break;

  case 389:
#line 1046 "harbour.y" /* yacc.c:1646  */
    {  /* 3 */
               PHB_CBVAR pVar;
               (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
               (yyvsp[0].sNumber) = HB_COMP_PARAM->lastLine;
               hb_compCodeBlockStart( HB_COMP_PARAM, 0 );
               HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_EXTBLOCK;
               HB_COMP_PARAM->functions.pLast->fVParams =
                  ( (yyvsp[-1].asExpr)->value.asCodeblock.flags & HB_BLOCK_VPARAMS ) != 0;

               (yyvsp[-1].asExpr)->value.asCodeblock.flags |= HB_BLOCK_EXT;
               if( (yyvsp[-1].asExpr)->value.asCodeblock.string )
               {
                  hb_xfree( (yyvsp[-1].asExpr)->value.asCodeblock.string );
                  (yyvsp[-1].asExpr)->value.asCodeblock.string = NULL;
                  (yyvsp[-1].asExpr)->nLength = 0;
               }

               HB_COMP_PARAM->iVarScope = HB_VSCOMP_PARAMETER;
               pVar = (yyvsp[-1].asExpr)->value.asCodeblock.pLocals;
               while( pVar )
               {
                  hb_compVariableAdd( HB_COMP_PARAM, pVar->szName, hb_compVarTypeNew( HB_COMP_PARAM, pVar->bType, NULL ) );
                  pVar =pVar->pNext;
               }
            }
#line 5490 "harboury.c" /* yacc.c:1646  */
    break;

  case 390:
#line 1072 "harbour.y" /* yacc.c:1646  */
    {  /* 6 */
               hb_compCodeBlockEnd( HB_COMP_PARAM );
               (yyval.asExpr) = hb_compExprSetCodeblockBody( (yyvsp[-4].asExpr),
                     HB_COMP_PARAM->functions.pLast->pCode + (yyvsp[-2].sNumber),
                     HB_COMP_PARAM->functions.pLast->nPCodePos - (yyvsp[-2].sNumber) );
               HB_COMP_PARAM->functions.pLast->nPCodePos = (yyvsp[-2].sNumber);
               HB_COMP_PARAM->lastLine = (yyvsp[-3].sNumber);
            }
#line 5503 "harboury.c" /* yacc.c:1646  */
    break;

  case 391:
#line 1082 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewList( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5509 "harboury.c" /* yacc.c:1646  */
    break;

  case 392:
#line 1083 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[-2].asExpr), (yyvsp[0].asExpr) ); }
#line 5515 "harboury.c" /* yacc.c:1646  */
    break;

  case 393:
#line 1085 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[-1].asExpr); }
#line 5521 "harboury.c" /* yacc.c:1646  */
    break;

  case 395:
#line 1098 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewIIF( hb_compExprAddListExpr( hb_compExprAddListExpr( hb_compExprNewList( (yyvsp[-5].asExpr), HB_COMP_PARAM ), (yyvsp[-3].asExpr) ), (yyvsp[-1].asExpr) ) ); }
#line 5527 "harboury.c" /* yacc.c:1646  */
    break;

  case 397:
#line 1104 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_LOCAL; hb_compLinePush( HB_COMP_PARAM ); }
#line 5533 "harboury.c" /* yacc.c:1646  */
    break;

  case 399:
#line 1106 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_STATIC; hb_compLinePush( HB_COMP_PARAM ); }
#line 5539 "harboury.c" /* yacc.c:1646  */
    break;

  case 401:
#line 1108 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_TH_STATIC; hb_compLinePush( HB_COMP_PARAM ); }
#line 5545 "harboury.c" /* yacc.c:1646  */
    break;

  case 403:
#line 1110 "harbour.y" /* yacc.c:1646  */
    { if( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_USES_LOCAL_PARAMS )
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_PARAMETERS_NOT_ALLOWED, NULL, NULL );
                        else
                        {
                           HB_COMP_PARAM->functions.pLast->wParamNum = 0;
                           HB_COMP_PARAM->iVarScope = ( HB_VSCOMP_PRIVATE | HB_VSCOMP_PARAMETER );
                        }
                      }
#line 5558 "harboury.c" /* yacc.c:1646  */
    break;

  case 404:
#line 1117 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE; }
#line 5564 "harboury.c" /* yacc.c:1646  */
    break;

  case 405:
#line 1120 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber) = 1; }
#line 5570 "harboury.c" /* yacc.c:1646  */
    break;

  case 406:
#line 1121 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber)++; }
#line 5576 "harboury.c" /* yacc.c:1646  */
    break;

  case 407:
#line 1124 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber) = 1; }
#line 5582 "harboury.c" /* yacc.c:1646  */
    break;

  case 408:
#line 1125 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber)++; }
#line 5588 "harboury.c" /* yacc.c:1646  */
    break;

  case 410:
#line 1135 "harbour.y" /* yacc.c:1646  */
    { hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( NULL, (yyvsp[-1].asExpr), HB_COMP_PARAM ), HB_FALSE ); }
#line 5594 "harboury.c" /* yacc.c:1646  */
    break;

  case 411:
#line 1137 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[0].asExpr), HB_COMP_PARAM ) );
                 hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( NULL, (yyvsp[-3].asExpr), HB_COMP_PARAM ), HB_TRUE );
               }
#line 5602 "harboury.c" /* yacc.c:1646  */
    break;

  case 412:
#line 1141 "harbour.y" /* yacc.c:1646  */
    {
                  HB_COMP_EXPR_FREE( hb_compArrayDimPush( (yyvsp[-1].asExpr), HB_COMP_PARAM ) );
                  hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( NULL, (yyvsp[-2].asExpr), HB_COMP_PARAM ), HB_TRUE );
               }
#line 5611 "harboury.c" /* yacc.c:1646  */
    break;

  case 413:
#line 1148 "harbour.y" /* yacc.c:1646  */
    {
                  hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) );
                  if( HB_COMP_PARAM->iVarScope & HB_VSCOMP_STATIC )
                  {
                     hb_compStaticDefStart( HB_COMP_PARAM );   /* switch to statics pcode buffer */
                     hb_compStaticDefEnd( HB_COMP_PARAM, (yyvsp[-1].string) );
                  }
                  else if( HB_COMP_PARAM->iVarScope == HB_VSCOMP_PUBLIC || HB_COMP_PARAM->iVarScope == HB_VSCOMP_PRIVATE )
                  {
                     hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( (yyvsp[-1].string), NULL, HB_COMP_PARAM ), HB_FALSE );
                  }
                  else if( HB_COMP_PARAM->iVarScope == HB_VSCOMP_LOCAL &&
                           ( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_EXTBLOCK ) )
                  {
                     HB_COMP_EXPR_FREE( hb_compExprGenPush( hb_compExprNewNil( HB_COMP_PARAM ), HB_COMP_PARAM ) );
                  }
               }
#line 5633 "harboury.c" /* yacc.c:1646  */
    break;

  case 414:
#line 1165 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber) = HB_COMP_PARAM->iVarScope;
                                hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) );
                              }
#line 5641 "harboury.c" /* yacc.c:1646  */
    break;

  case 415:
#line 1169 "harbour.y" /* yacc.c:1646  */
    {
                  HB_COMP_PARAM->iVarScope = (yyvsp[-2].iNumber);
                  if( HB_COMP_PARAM->iVarScope & HB_VSCOMP_STATIC )
                  {
                     hb_compStaticDefStart( HB_COMP_PARAM );   /* switch to statics pcode buffer */
                     HB_COMP_EXPR_FREE( hb_compExprGenStatement( hb_compExprAssignStatic( hb_compExprNewVar( (yyvsp[-4].string), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ) );
                     hb_compStaticDefEnd( HB_COMP_PARAM, (yyvsp[-4].string) );
                  }
                  else if( HB_COMP_PARAM->iVarScope == HB_VSCOMP_PUBLIC || HB_COMP_PARAM->iVarScope == HB_VSCOMP_PRIVATE )
                  {
                     HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[0].asExpr), HB_COMP_PARAM ) );
                     hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( (yyvsp[-4].string), NULL, HB_COMP_PARAM ), HB_TRUE );
                  }
                  else if( HB_COMP_PARAM->iVarScope == HB_VSCOMP_LOCAL &&
                           ( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_EXTBLOCK ) )
                  {
                     HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[0].asExpr), HB_COMP_PARAM ) );
                  }
                  else
                  {
                     HB_COMP_EXPR_FREE( hb_compExprGenStatement( hb_compExprAssign( hb_compExprNewVar( (yyvsp[-4].string), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ) );
                  }
                  HB_COMP_PARAM->iVarScope = (yyvsp[-2].iNumber);
               }
#line 5670 "harboury.c" /* yacc.c:1646  */
    break;

  case 416:
#line 1194 "harbour.y" /* yacc.c:1646  */
    { hb_compVariableDim( (yyvsp[-2].string), (yyvsp[-1].asExpr), HB_COMP_PARAM ); }
#line 5676 "harboury.c" /* yacc.c:1646  */
    break;

  case 418:
#line 1203 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 5682 "harboury.c" /* yacc.c:1646  */
    break;

  case 419:
#line 1204 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[-2].asExpr), (yyvsp[0].asExpr) ); }
#line 5688 "harboury.c" /* yacc.c:1646  */
    break;

  case 420:
#line 1205 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[-3].asExpr), (yyvsp[0].asExpr) ); }
#line 5694 "harboury.c" /* yacc.c:1646  */
    break;

  case 421:
#line 1208 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_FIELD; }
#line 5700 "harboury.c" /* yacc.c:1646  */
    break;

  case 422:
#line 1210 "harbour.y" /* yacc.c:1646  */
    {
               if( (yyvsp[-1].string) ) hb_compFieldSetAlias( HB_COMP_PARAM, (yyvsp[-1].string), (yyvsp[-2].iNumber) );
             }
#line 5708 "harboury.c" /* yacc.c:1646  */
    break;

  case 423:
#line 1215 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber) = hb_compFieldsCount( HB_COMP_PARAM ); hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) ); }
#line 5714 "harboury.c" /* yacc.c:1646  */
    break;

  case 424:
#line 1216 "harbour.y" /* yacc.c:1646  */
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) ); }
#line 5720 "harboury.c" /* yacc.c:1646  */
    break;

  case 425:
#line 1219 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = NULL; }
#line 5726 "harboury.c" /* yacc.c:1646  */
    break;

  case 426:
#line 1220 "harbour.y" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 5732 "harboury.c" /* yacc.c:1646  */
    break;

  case 427:
#line 1223 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_MEMVAR; }
#line 5738 "harboury.c" /* yacc.c:1646  */
    break;

  case 429:
#line 1226 "harbour.y" /* yacc.c:1646  */
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) ); }
#line 5744 "harboury.c" /* yacc.c:1646  */
    break;

  case 430:
#line 1227 "harbour.y" /* yacc.c:1646  */
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) ); }
#line 5750 "harboury.c" /* yacc.c:1646  */
    break;

  case 431:
#line 1230 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredAdd( HB_COMP_PARAM, (yyvsp[-1].string) ); HB_COMP_PARAM->szDeclaredFun = (yyvsp[-1].string); }
#line 5756 "harboury.c" /* yacc.c:1646  */
    break;

  case 432:
#line 1231 "harbour.y" /* yacc.c:1646  */
    {
               if( HB_COMP_PARAM->pLastDeclared )
               {
                 HB_COMP_PARAM->pLastDeclared->cType = (yyvsp[-1].asVarType)->cVarType;

                 if( HB_TOUPPER( (yyvsp[-1].asVarType)->cVarType ) == 'S' )
                 {
                   HB_COMP_PARAM->pLastDeclared->pClass = hb_compClassFind( HB_COMP_PARAM, (yyvsp[-1].asVarType)->szFromClass );
                   if( ! HB_COMP_PARAM->pLastDeclared->pClass )
                   {
                     hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_CLASS_NOT_FOUND, (yyvsp[-1].asVarType)->szFromClass, HB_COMP_PARAM->pLastDeclared->szName );
                     HB_COMP_PARAM->pLastDeclared->cType = ( HB_ISUPPER( ( HB_UCHAR ) (yyvsp[-1].asVarType)->cVarType ) ? 'O' : 'o' );
                   }
                 }
               }
               HB_COMP_PARAM->szDeclaredFun = NULL;
               HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE;
             }
#line 5779 "harboury.c" /* yacc.c:1646  */
    break;

  case 433:
#line 1249 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->pLastClass = hb_compClassAdd( HB_COMP_PARAM, (yyvsp[0].string), NULL ); }
#line 5785 "harboury.c" /* yacc.c:1646  */
    break;

  case 434:
#line 1249 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE; }
#line 5791 "harboury.c" /* yacc.c:1646  */
    break;

  case 435:
#line 1250 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->pLastClass = hb_compClassAdd( HB_COMP_PARAM, (yyvsp[-1].string), NULL ); HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE; }
#line 5797 "harboury.c" /* yacc.c:1646  */
    break;

  case 436:
#line 1251 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->pLastClass = hb_compClassAdd( HB_COMP_PARAM, (yyvsp[-2].string), (yyvsp[-1].string) ); HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE; }
#line 5803 "harboury.c" /* yacc.c:1646  */
    break;

  case 437:
#line 1252 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE; }
#line 5809 "harboury.c" /* yacc.c:1646  */
    break;

  case 438:
#line 1253 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->cDataListType = (yyvsp[0].asVarType)->cVarType; }
#line 5815 "harboury.c" /* yacc.c:1646  */
    break;

  case 439:
#line 1253 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->cDataListType = 0; HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE; }
#line 5821 "harboury.c" /* yacc.c:1646  */
    break;

  case 446:
#line 1266 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->pLastMethod = hb_compMethodAdd( HB_COMP_PARAM, HB_COMP_PARAM->pLastClass, (yyvsp[-1].string) ); }
#line 5827 "harboury.c" /* yacc.c:1646  */
    break;

  case 447:
#line 1267 "harbour.y" /* yacc.c:1646  */
    {
               if( HB_COMP_PARAM->pLastMethod )
               {
                 HB_COMP_PARAM->pLastMethod->cType = (yyvsp[0].asVarType)->cVarType;
                 if( HB_TOUPPER( (yyvsp[0].asVarType)->cVarType ) == 'S' )
                 {
                   HB_COMP_PARAM->pLastMethod->pClass = hb_compClassFind( HB_COMP_PARAM, (yyvsp[0].asVarType)->szFromClass );
                   if( ! HB_COMP_PARAM->pLastMethod->pClass )
                   {
                     hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_CLASS_NOT_FOUND, (yyvsp[0].asVarType)->szFromClass, HB_COMP_PARAM->pLastMethod->szName );
                     HB_COMP_PARAM->pLastMethod->cType = ( HB_ISUPPER( ( HB_UCHAR ) (yyvsp[0].asVarType)->cVarType ) ? 'O' : 'o' );
                   }
                 }
               }
               HB_COMP_PARAM->pLastMethod = NULL;
             }
#line 5848 "harboury.c" /* yacc.c:1646  */
    break;

  case 448:
#line 1285 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->pLastMethod = hb_compMethodAdd( HB_COMP_PARAM, HB_COMP_PARAM->pLastClass, (yyvsp[0].string) ); }
#line 5854 "harboury.c" /* yacc.c:1646  */
    break;

  case 449:
#line 1286 "harbour.y" /* yacc.c:1646  */
    {
               if( HB_COMP_PARAM->pLastMethod )
               {
                  PHB_HCLASS pClass;
                  char       szSetData[ HB_SYMBOL_NAME_LEN + 1 ];
                  int        iLen;
                  HB_BYTE    cVarType = (yyvsp[0].asVarType)->cVarType;

                  /* List Type overrides if exists. */
                  if( HB_COMP_PARAM->cDataListType )
                     cVarType = HB_COMP_PARAM->cDataListType;

                  HB_COMP_PARAM->pLastMethod->cType = cVarType;
                  if( HB_TOUPPER( cVarType ) == 'S' )
                  {
                     pClass = hb_compClassFind( HB_COMP_PARAM, (yyvsp[0].asVarType)->szFromClass );
                     HB_COMP_PARAM->pLastMethod->pClass = pClass;
                     if( ! HB_COMP_PARAM->pLastMethod->pClass )
                     {
                        hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_CLASS_NOT_FOUND, (yyvsp[0].asVarType)->szFromClass, HB_COMP_PARAM->pLastMethod->szName );
                        HB_COMP_PARAM->pLastMethod->cType = ( HB_ISUPPER( ( HB_UCHAR ) cVarType ) ? 'O' :'o' );
                     }
                  }
                  else
                     pClass = NULL;

                  iLen = ( int ) strlen( (yyvsp[-2].string) );
                  if( iLen >= HB_SYMBOL_NAME_LEN )
                     iLen = HB_SYMBOL_NAME_LEN - 1;
                  szSetData[ 0 ] = '_';
                  memcpy( szSetData + 1, (yyvsp[-2].string), iLen );
                  szSetData[ iLen + 1 ] = '\0';

                  HB_COMP_PARAM->pLastMethod = hb_compMethodAdd( HB_COMP_PARAM, HB_COMP_PARAM->pLastClass,
                     hb_compIdentifierNew( HB_COMP_PARAM, szSetData, HB_IDENT_COPY ) );
                  HB_COMP_PARAM->pLastMethod->cType = cVarType;
                  HB_COMP_PARAM->pLastMethod->iParamCount = 1;

                  HB_COMP_PARAM->pLastMethod->cParamTypes = ( HB_BYTE * ) hb_xgrab( 1 );
                  HB_COMP_PARAM->pLastMethod->pParamClasses = ( PHB_HCLASS * ) hb_xgrab( sizeof( HB_HCLASS ) );

                  HB_COMP_PARAM->pLastMethod->cParamTypes[ 0 ] = cVarType;
                  HB_COMP_PARAM->pLastMethod->pParamClasses[ 0 ] = pClass;

                  if( HB_TOUPPER( cVarType ) == 'S' )
                  {
                     HB_COMP_PARAM->pLastMethod->pClass = pClass;
                  }
               }

               HB_COMP_PARAM->pLastMethod = NULL;
             }
#line 5911 "harboury.c" /* yacc.c:1646  */
    break;

  case 463:
#line 1359 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( (yyvsp[0].asExpr) ); }
#line 5917 "harboury.c" /* yacc.c:1646  */
    break;

  case 464:
#line 1362 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) ); }
#line 5923 "harboury.c" /* yacc.c:1646  */
    break;

  case 465:
#line 1363 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[-1].string), hb_compVarTypeNew( HB_COMP_PARAM, (yyvsp[0].asVarType)->cVarType + HB_VT_OFFSET_BYREF, NULL ) ); }
#line 5929 "harboury.c" /* yacc.c:1646  */
    break;

  case 466:
#line 1364 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[-3].string), hb_compVarTypeNew( HB_COMP_PARAM, 'F', NULL ) ); }
#line 5935 "harboury.c" /* yacc.c:1646  */
    break;

  case 467:
#line 1365 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[-1].string), (yyvsp[0].asVarType) ); }
#line 5941 "harboury.c" /* yacc.c:1646  */
    break;

  case 468:
#line 1366 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[-1].string), hb_compVarTypeNew( HB_COMP_PARAM, (yyvsp[0].asVarType)->cVarType + HB_VT_OFFSET_BYREF, NULL ) ); }
#line 5947 "harboury.c" /* yacc.c:1646  */
    break;

  case 469:
#line 1367 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[-3].string), hb_compVarTypeNew( HB_COMP_PARAM, 'F', NULL ) ); }
#line 5953 "harboury.c" /* yacc.c:1646  */
    break;

  case 470:
#line 1370 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[-1].string), hb_compVarTypeNew( HB_COMP_PARAM, (yyvsp[0].asVarType)->cVarType + HB_VT_OFFSET_OPTIONAL, NULL ) ); }
#line 5959 "harboury.c" /* yacc.c:1646  */
    break;

  case 471:
#line 1371 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[-1].string), hb_compVarTypeNew( HB_COMP_PARAM, (yyvsp[0].asVarType)->cVarType + HB_VT_OFFSET_OPTIONAL + HB_VT_OFFSET_BYREF, NULL ) ); }
#line 5965 "harboury.c" /* yacc.c:1646  */
    break;

  case 472:
#line 1372 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[-3].string), hb_compVarTypeNew( HB_COMP_PARAM, 'F' + HB_VT_OFFSET_OPTIONAL + HB_VT_OFFSET_BYREF, NULL ) ); }
#line 5971 "harboury.c" /* yacc.c:1646  */
    break;

  case 473:
#line 1373 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[-1].string), hb_compVarTypeNew( HB_COMP_PARAM, (yyvsp[0].asVarType)->cVarType + HB_VT_OFFSET_OPTIONAL, NULL ) ); }
#line 5977 "harboury.c" /* yacc.c:1646  */
    break;

  case 474:
#line 1374 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[-1].string), hb_compVarTypeNew( HB_COMP_PARAM, (yyvsp[0].asVarType)->cVarType + HB_VT_OFFSET_OPTIONAL + HB_VT_OFFSET_BYREF, NULL ) ); }
#line 5983 "harboury.c" /* yacc.c:1646  */
    break;

  case 475:
#line 1375 "harbour.y" /* yacc.c:1646  */
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[-3].string), hb_compVarTypeNew( HB_COMP_PARAM, 'F' + HB_VT_OFFSET_OPTIONAL + HB_VT_OFFSET_BYREF, NULL ) ); }
#line 5989 "harboury.c" /* yacc.c:1646  */
    break;

  case 484:
#line 1388 "harbour.y" /* yacc.c:1646  */
    { hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_NEXTFOR ); }
#line 5995 "harboury.c" /* yacc.c:1646  */
    break;

  case 485:
#line 1391 "harbour.y" /* yacc.c:1646  */
    { hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDCASE ); }
#line 6001 "harboury.c" /* yacc.c:1646  */
    break;

  case 486:
#line 1394 "harbour.y" /* yacc.c:1646  */
    { hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDIF ); }
#line 6007 "harboury.c" /* yacc.c:1646  */
    break;

  case 487:
#line 1397 "harbour.y" /* yacc.c:1646  */
    { hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDWITH ); }
#line 6013 "harboury.c" /* yacc.c:1646  */
    break;

  case 488:
#line 1400 "harbour.y" /* yacc.c:1646  */
    { hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDSEQ ); }
#line 6019 "harboury.c" /* yacc.c:1646  */
    break;

  case 489:
#line 1403 "harbour.y" /* yacc.c:1646  */
    { hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDDO ); }
#line 6025 "harboury.c" /* yacc.c:1646  */
    break;

  case 490:
#line 1406 "harbour.y" /* yacc.c:1646  */
    { hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDSWITCH ); }
#line 6031 "harboury.c" /* yacc.c:1646  */
    break;

  case 491:
#line 1409 "harbour.y" /* yacc.c:1646  */
    { hb_compGenJumpHere( (yyvsp[-1].sNumber), HB_COMP_PARAM ); }
#line 6037 "harboury.c" /* yacc.c:1646  */
    break;

  case 492:
#line 1410 "harbour.y" /* yacc.c:1646  */
    { hb_compGenJumpHere( (yyvsp[-2].sNumber), HB_COMP_PARAM ); }
#line 6043 "harboury.c" /* yacc.c:1646  */
    break;

  case 493:
#line 1411 "harbour.y" /* yacc.c:1646  */
    { hb_compGenJumpHere( (yyvsp[-2].sNumber), HB_COMP_PARAM ); hb_compElseIfFix( HB_COMP_PARAM, (yyvsp[-1].pVoid) ); }
#line 6049 "harboury.c" /* yacc.c:1646  */
    break;

  case 494:
#line 1412 "harbour.y" /* yacc.c:1646  */
    { hb_compGenJumpHere( (yyvsp[-3].sNumber), HB_COMP_PARAM ); hb_compElseIfFix( HB_COMP_PARAM, (yyvsp[-2].pVoid) ); }
#line 6055 "harboury.c" /* yacc.c:1646  */
    break;

  case 495:
#line 1416 "harbour.y" /* yacc.c:1646  */
    { ++HB_COMP_PARAM->functions.pLast->wIfCounter; hb_compLinePushIfInside( HB_COMP_PARAM ); }
#line 6061 "harboury.c" /* yacc.c:1646  */
    break;

  case 496:
#line 1418 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[-2].asExpr), HB_COMP_PARAM ) ); (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM ); }
#line 6067 "harboury.c" /* yacc.c:1646  */
    break;

  case 497:
#line 1420 "harbour.y" /* yacc.c:1646  */
    { (yyval.sNumber) = hb_compGenJump( 0, HB_COMP_PARAM ); hb_compGenJumpHere( (yyvsp[-1].sNumber), HB_COMP_PARAM ); }
#line 6073 "harboury.c" /* yacc.c:1646  */
    break;

  case 498:
#line 1423 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; }
#line 6079 "harboury.c" /* yacc.c:1646  */
    break;

  case 500:
#line 1427 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; hb_compLinePush( HB_COMP_PARAM ); }
#line 6085 "harboury.c" /* yacc.c:1646  */
    break;

  case 501:
#line 1429 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[-1].asExpr), HB_COMP_PARAM ) );
                  (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               }
#line 6093 "harboury.c" /* yacc.c:1646  */
    break;

  case 502:
#line 1433 "harbour.y" /* yacc.c:1646  */
    { (yyval.pVoid) = hb_compElseIfGen( HB_COMP_PARAM, NULL, hb_compGenJump( 0, HB_COMP_PARAM ) );
                  hb_compGenJumpHere( (yyvsp[-1].sNumber), HB_COMP_PARAM );
               }
#line 6101 "harboury.c" /* yacc.c:1646  */
    break;

  case 503:
#line 1437 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; hb_compLinePush( HB_COMP_PARAM ); }
#line 6107 "harboury.c" /* yacc.c:1646  */
    break;

  case 504:
#line 1439 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[-1].asExpr), HB_COMP_PARAM ) );
                  (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               }
#line 6115 "harboury.c" /* yacc.c:1646  */
    break;

  case 505:
#line 1443 "harbour.y" /* yacc.c:1646  */
    { (yyval.pVoid) = hb_compElseIfGen( HB_COMP_PARAM, (yyvsp[-6].pVoid), hb_compGenJump( 0, HB_COMP_PARAM ) );
                  hb_compGenJumpHere( (yyvsp[-1].sNumber), HB_COMP_PARAM );
               }
#line 6123 "harboury.c" /* yacc.c:1646  */
    break;

  case 506:
#line 1449 "harbour.y" /* yacc.c:1646  */
    {
                  if( HB_COMP_PARAM->functions.pLast->wIfCounter )
                     --HB_COMP_PARAM->functions.pLast->wIfCounter;
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
               }
#line 6133 "harboury.c" /* yacc.c:1646  */
    break;

  case 515:
#line 1468 "harbour.y" /* yacc.c:1646  */
    { hb_compElseIfFix( HB_COMP_PARAM, (yyvsp[-1].pVoid) ); }
#line 6139 "harboury.c" /* yacc.c:1646  */
    break;

  case 518:
#line 1480 "harbour.y" /* yacc.c:1646  */
    { hb_compElseIfFix( HB_COMP_PARAM, (yyvsp[-2].pVoid) ); }
#line 6145 "harboury.c" /* yacc.c:1646  */
    break;

  case 519:
#line 1484 "harbour.y" /* yacc.c:1646  */
    {  if( HB_COMP_PARAM->functions.pLast->wCaseCounter )
                     --HB_COMP_PARAM->functions.pLast->wCaseCounter;
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
               }
#line 6154 "harboury.c" /* yacc.c:1646  */
    break;

  case 528:
#line 1500 "harbour.y" /* yacc.c:1646  */
    { ++HB_COMP_PARAM->functions.pLast->wCaseCounter; hb_compLinePushIfDebugger( HB_COMP_PARAM );}
#line 6160 "harboury.c" /* yacc.c:1646  */
    break;

  case 531:
#line 1504 "harbour.y" /* yacc.c:1646  */
    {
                        if( (yyvsp[0].lNumber) > 0 )
                        {
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL );
                        }
                     }
#line 6171 "harboury.c" /* yacc.c:1646  */
    break;

  case 532:
#line 1512 "harbour.y" /* yacc.c:1646  */
    { hb_compLinePushIfInside( HB_COMP_PARAM ); }
#line 6177 "harboury.c" /* yacc.c:1646  */
    break;

  case 533:
#line 1513 "harbour.y" /* yacc.c:1646  */
    {
                  HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[-1].asExpr), HB_COMP_PARAM ) );
                  (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               }
#line 6186 "harboury.c" /* yacc.c:1646  */
    break;

  case 534:
#line 1518 "harbour.y" /* yacc.c:1646  */
    {
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE;
                  (yyval.pVoid) = hb_compElseIfGen( HB_COMP_PARAM, NULL, hb_compGenJump( 0, HB_COMP_PARAM ) );
                  hb_compGenJumpHere( (yyvsp[-1].sNumber), HB_COMP_PARAM );
               }
#line 6196 "harboury.c" /* yacc.c:1646  */
    break;

  case 535:
#line 1524 "harbour.y" /* yacc.c:1646  */
    { hb_compLinePushIfInside( HB_COMP_PARAM ); }
#line 6202 "harboury.c" /* yacc.c:1646  */
    break;

  case 536:
#line 1525 "harbour.y" /* yacc.c:1646  */
    {
                  HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[-1].asExpr), HB_COMP_PARAM ) );
                  (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               }
#line 6211 "harboury.c" /* yacc.c:1646  */
    break;

  case 537:
#line 1530 "harbour.y" /* yacc.c:1646  */
    {
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE;
                  (yyval.pVoid) = hb_compElseIfGen( HB_COMP_PARAM, (yyvsp[-6].pVoid), hb_compGenJump( 0, HB_COMP_PARAM ) );
                  hb_compGenJumpHere( (yyvsp[-1].sNumber), HB_COMP_PARAM );
               }
#line 6221 "harboury.c" /* yacc.c:1646  */
    break;

  case 538:
#line 1537 "harbour.y" /* yacc.c:1646  */
    {hb_compLinePushIfDebugger( HB_COMP_PARAM ); }
#line 6227 "harboury.c" /* yacc.c:1646  */
    break;

  case 539:
#line 1537 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; }
#line 6233 "harboury.c" /* yacc.c:1646  */
    break;

  case 541:
#line 1539 "harbour.y" /* yacc.c:1646  */
    { hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL ); }
#line 6239 "harboury.c" /* yacc.c:1646  */
    break;

  case 543:
#line 1544 "harbour.y" /* yacc.c:1646  */
    {
                  HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[-1].asExpr), HB_COMP_PARAM ) );
                  (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               }
#line 6248 "harboury.c" /* yacc.c:1646  */
    break;

  case 544:
#line 1549 "harbour.y" /* yacc.c:1646  */
    {
                  hb_compLoopHere( HB_COMP_PARAM );
                  hb_compGenJump( (yyvsp[-4].sNumber) - HB_COMP_PARAM->functions.pLast->nPCodePos, HB_COMP_PARAM );
               }
#line 6257 "harboury.c" /* yacc.c:1646  */
    break;

  case 545:
#line 1554 "harbour.y" /* yacc.c:1646  */
    {
                  hb_compGenJumpHere( (yyvsp[-3].sNumber), HB_COMP_PARAM );
                  if( HB_COMP_PARAM->functions.pLast->wWhileCounter )
                     --HB_COMP_PARAM->functions.pLast->wWhileCounter;
                  hb_compLoopEnd( HB_COMP_PARAM );
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN;
               }
#line 6269 "harboury.c" /* yacc.c:1646  */
    break;

  case 546:
#line 1564 "harbour.y" /* yacc.c:1646  */
    {
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  ++HB_COMP_PARAM->functions.pLast->wWhileCounter;
                  hb_compLoopStart( HB_COMP_PARAM, HB_TRUE );
               }
#line 6280 "harboury.c" /* yacc.c:1646  */
    break;

  case 547:
#line 1573 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; }
#line 6286 "harboury.c" /* yacc.c:1646  */
    break;

  case 556:
#line 1587 "harbour.y" /* yacc.c:1646  */
    {                                      /* 5 */
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  (yyvsp[-3].iNumber) = HB_COMP_PARAM->currLine;
                  hb_compDebugStart();
                  ++HB_COMP_PARAM->functions.pLast->wForCounter;
                  (yyvsp[-2].asExpr) = hb_compExprReduce( (yyvsp[-2].asExpr), HB_COMP_PARAM );
                  (yyval.asExpr) = hb_compExprGenPush( hb_compExprAssign( (yyvsp[-2].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                  if( hb_compExprAsSymbol( (yyvsp[-2].asExpr) ) )
                  {
                     hb_compForStart( HB_COMP_PARAM, hb_compExprAsSymbol( (yyvsp[-2].asExpr) ), 0 );
                  }
               }
#line 6303 "harboury.c" /* yacc.c:1646  */
    break;

  case 557:
#line 1600 "harbour.y" /* yacc.c:1646  */
    {                                      /* 9 */
                  hb_compLoopStart( HB_COMP_PARAM, HB_TRUE );
                  (yyval.sNumber) = hb_compGenJump( 0, HB_COMP_PARAM );
               }
#line 6312 "harboury.c" /* yacc.c:1646  */
    break;

  case 558:
#line 1605 "harbour.y" /* yacc.c:1646  */
    {                                      /* 11 */
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
               }
#line 6320 "harboury.c" /* yacc.c:1646  */
    break;

  case 559:
#line 1609 "harbour.y" /* yacc.c:1646  */
    {
                  int iSign, iLine;

                  hb_compLoopHere( HB_COMP_PARAM );

                  iLine = HB_COMP_PARAM->currLine;
                  HB_COMP_PARAM->currLine = (yyvsp[-11].iNumber);
                  hb_compLinePush( HB_COMP_PARAM );
                  HB_COMP_PARAM->currLine = iLine;

                  if( (yyvsp[-4].asExpr) )
                  {
                     (yyvsp[-4].asExpr) = hb_compExprReduce( (yyvsp[-4].asExpr), HB_COMP_PARAM );
                     iSign = hb_compExprAsNumSign( (yyvsp[-4].asExpr) );
                     HB_COMP_EXPR_CLEAR( hb_compExprGenPush( hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[-10].asExpr), HB_COMP_PARAM ), (yyvsp[-4].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ) );
                  }
                  else
                  {
                     iSign = 1;
                     HB_COMP_EXPR_CLEAR( hb_compExprGenPush( hb_compExprNewPreInc( (yyvsp[-10].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ) );
                  }
                  hb_compGenJumpHere( (yyvsp[-3].sNumber), HB_COMP_PARAM );
                  HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[-5].asExpr), HB_COMP_PARAM ) );   /* end */
                  if( iSign )
                  {
                     hb_compGenPCode1( ( HB_BYTE ) ( iSign > 0 ? HB_P_GREATER : HB_P_LESS ), HB_COMP_PARAM );
                     if( (yyvsp[-4].asExpr) )
                        HB_COMP_EXPR_FREE( (yyvsp[-4].asExpr) );
                  }
                  else
                  {
                     HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[-4].asExpr), HB_COMP_PARAM ) );   /* step */
                     hb_compGenPCode1( HB_P_FORTEST, HB_COMP_PARAM );
                  }

                  hb_compGenJumpFalse( (yyvsp[-1].sNumber) - HB_COMP_PARAM->functions.pLast->nPCodePos, HB_COMP_PARAM );
                  hb_compLoopEnd( HB_COMP_PARAM );
                  if( hb_compExprAsSymbol( (yyvsp[-10].asExpr) ) )
                     hb_compForEnd( HB_COMP_PARAM, hb_compExprAsSymbol( (yyvsp[-10].asExpr) ) );
                  HB_COMP_EXPR_FREE( (yyvsp[-7].asExpr) );  /* deletes $5, $2, $4 */
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
               }
#line 6367 "harboury.c" /* yacc.c:1646  */
    break;

  case 562:
#line 1657 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = NULL; }
#line 6373 "harboury.c" /* yacc.c:1646  */
    break;

  case 563:
#line 1658 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprReduce( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 6379 "harboury.c" /* yacc.c:1646  */
    break;

  case 564:
#line 1662 "harbour.y" /* yacc.c:1646  */
    {
                     hb_compLinePush( HB_COMP_PARAM );
                     if( HB_COMP_PARAM->functions.pLast->wForCounter )
                        --HB_COMP_PARAM->functions.pLast->wForCounter;
                  }
#line 6389 "harboury.c" /* yacc.c:1646  */
    break;

  case 574:
#line 1680 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[0].string), HB_COMP_PARAM ); }
#line 6395 "harboury.c" /* yacc.c:1646  */
    break;

  case 575:
#line 1681 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewRef( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 6401 "harboury.c" /* yacc.c:1646  */
    break;

  case 576:
#line 1684 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 6407 "harboury.c" /* yacc.c:1646  */
    break;

  case 577:
#line 1685 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[-2].asExpr), (yyvsp[0].asExpr) ); }
#line 6413 "harboury.c" /* yacc.c:1646  */
    break;

  case 578:
#line 1688 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[0].string), HB_COMP_PARAM ); }
#line 6419 "harboury.c" /* yacc.c:1646  */
    break;

  case 580:
#line 1692 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 6425 "harboury.c" /* yacc.c:1646  */
    break;

  case 581:
#line 1693 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[-2].asExpr), (yyvsp[0].asExpr) ); }
#line 6431 "harboury.c" /* yacc.c:1646  */
    break;

  case 582:
#line 1698 "harbour.y" /* yacc.c:1646  */
    {
                ++HB_COMP_PARAM->functions.pLast->wForCounter;    /* 5 */
                hb_compLinePushIfInside( HB_COMP_PARAM );
                hb_compDebugStart();
             }
#line 6441 "harboury.c" /* yacc.c:1646  */
    break;

  case 583:
#line 1704 "harbour.y" /* yacc.c:1646  */
    {
                /* 7 */
                (yyvsp[-4].asExpr) = hb_compExprReduce( (yyvsp[-4].asExpr), HB_COMP_PARAM );
                (yyvsp[-2].asExpr) = hb_compExprReduce( (yyvsp[-2].asExpr), HB_COMP_PARAM );
                hb_compEnumStart( HB_COMP_PARAM, (yyvsp[-4].asExpr), (yyvsp[-2].asExpr), (yyvsp[0].iNumber) );

                hb_compLoopStart( HB_COMP_PARAM, HB_TRUE );
                (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
             }
#line 6455 "harboury.c" /* yacc.c:1646  */
    break;

  case 584:
#line 1714 "harbour.y" /* yacc.c:1646  */
    {
                /* 9 */
                (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
             }
#line 6464 "harboury.c" /* yacc.c:1646  */
    break;

  case 585:
#line 1719 "harbour.y" /* yacc.c:1646  */
    {
                hb_compLoopHere( HB_COMP_PARAM );
                hb_compEnumNext( HB_COMP_PARAM, (yyvsp[-8].asExpr), (yyvsp[-4].iNumber) );
                hb_compGenJump( (yyvsp[-3].sNumber) - HB_COMP_PARAM->functions.pLast->nPCodePos, HB_COMP_PARAM );

                hb_compGenJumpHere( (yyvsp[-1].sNumber), HB_COMP_PARAM );
                hb_compLoopEnd( HB_COMP_PARAM );
                HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
                hb_compEnumEnd( HB_COMP_PARAM, (yyvsp[-8].asExpr) );
                HB_COMP_EXPR_FREE( (yyvsp[-8].asExpr) );
                HB_COMP_EXPR_FREE( (yyvsp[-6].asExpr) );
             }
#line 6481 "harboury.c" /* yacc.c:1646  */
    break;

  case 586:
#line 1733 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber) =  1; }
#line 6487 "harboury.c" /* yacc.c:1646  */
    break;

  case 587:
#line 1734 "harbour.y" /* yacc.c:1646  */
    { (yyval.iNumber) = -1; }
#line 6493 "harboury.c" /* yacc.c:1646  */
    break;

  case 588:
#line 1738 "harbour.y" /* yacc.c:1646  */
    {
                  hb_compLoopStart( HB_COMP_PARAM, HB_FALSE );
                  hb_compSwitchStart( HB_COMP_PARAM, (yyvsp[0].asExpr) );
                  hb_compGenJump( 0, HB_COMP_PARAM );
               }
#line 6503 "harboury.c" /* yacc.c:1646  */
    break;

  case 589:
#line 1745 "harbour.y" /* yacc.c:1646  */
    {
                  hb_compSwitchEnd( HB_COMP_PARAM );
                  hb_compLoopEnd( HB_COMP_PARAM );
               }
#line 6512 "harboury.c" /* yacc.c:1646  */
    break;

  case 590:
#line 1752 "harbour.y" /* yacc.c:1646  */
    {
                  HB_COMP_EXPR_FREE( (yyvsp[-1].asExpr) );
               }
#line 6520 "harboury.c" /* yacc.c:1646  */
    break;

  case 591:
#line 1758 "harbour.y" /* yacc.c:1646  */
    {
                  if( HB_COMP_PARAM->functions.pLast->wSwitchCounter )
                     --HB_COMP_PARAM->functions.pLast->wSwitchCounter;
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
               }
#line 6530 "harboury.c" /* yacc.c:1646  */
    break;

  case 600:
#line 1776 "harbour.y" /* yacc.c:1646  */
    {
                  ++HB_COMP_PARAM->functions.pLast->wSwitchCounter;
                  hb_compLinePushIfInside( HB_COMP_PARAM );
               }
#line 6539 "harboury.c" /* yacc.c:1646  */
    break;

  case 601:
#line 1781 "harbour.y" /* yacc.c:1646  */
    {
                  (yyval.asExpr) = hb_compExprReduce( (yyvsp[-1].asExpr), HB_COMP_PARAM );
               }
#line 6547 "harboury.c" /* yacc.c:1646  */
    break;

  case 603:
#line 1788 "harbour.y" /* yacc.c:1646  */
    {
                  if( (yyvsp[0].lNumber) > 0 )
                  {
                     hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL );
                  }
               }
#line 6558 "harboury.c" /* yacc.c:1646  */
    break;

  case 604:
#line 1796 "harbour.y" /* yacc.c:1646  */
    { hb_compSwitchAdd( HB_COMP_PARAM, (yyvsp[0].asExpr) ); hb_compLinePush( HB_COMP_PARAM ); }
#line 6564 "harboury.c" /* yacc.c:1646  */
    break;

  case 606:
#line 1799 "harbour.y" /* yacc.c:1646  */
    { hb_compSwitchAdd( HB_COMP_PARAM, (yyvsp[0].asExpr) ); hb_compLinePush( HB_COMP_PARAM ); }
#line 6570 "harboury.c" /* yacc.c:1646  */
    break;

  case 610:
#line 1807 "harbour.y" /* yacc.c:1646  */
    { hb_compSwitchAdd( HB_COMP_PARAM, NULL ); hb_compLinePush( HB_COMP_PARAM ); }
#line 6576 "harboury.c" /* yacc.c:1646  */
    break;

  case 611:
#line 1807 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; }
#line 6582 "harboury.c" /* yacc.c:1646  */
    break;

  case 613:
#line 1812 "harbour.y" /* yacc.c:1646  */
    {              /* 2 */
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  ++HB_COMP_PARAM->functions.pLast->wSeqCounter;
                  (yyval.sNumber) = hb_compSequenceBegin( HB_COMP_PARAM );
               }
#line 6592 "harboury.c" /* yacc.c:1646  */
    break;

  case 614:
#line 1820 "harbour.y" /* yacc.c:1646  */
    {              /* 6 */
                  /* Set jump address for HB_P_SEQBEGIN opcode - this address
                   * will be used in BREAK code if there is no RECOVER clause
                   */
                  if( (yyvsp[-2].sNumber) )
                     hb_compGenPCode1( HB_P_POP, HB_COMP_PARAM );
                  hb_compGenJumpHere( (yyvsp[-3].sNumber), HB_COMP_PARAM );
                  (yyval.sNumber) = hb_compSequenceEnd( HB_COMP_PARAM );
                  (yyvsp[-1].lNumber) = hb_compLoopCount( HB_COMP_PARAM );
               }
#line 6607 "harboury.c" /* yacc.c:1646  */
    break;

  case 615:
#line 1831 "harbour.y" /* yacc.c:1646  */
    {              /* 8 */
                  /* Replace END address with RECOVER address in
                   * HB_P_SEQBEGIN opcode if there is RECOVER clause
                   */
                  if( (yyvsp[0].sNumber) )
                     hb_compGenJumpThere( (yyvsp[-5].sNumber), (yyvsp[0].sNumber), HB_COMP_PARAM );
                  else if( HB_COMP_PARAM->functions.pLast->wSeqCounter )
                     --HB_COMP_PARAM->functions.pLast->wSeqCounter;
               }
#line 6621 "harboury.c" /* yacc.c:1646  */
    break;

  case 616:
#line 1841 "harbour.y" /* yacc.c:1646  */
    {              /* 10 */
                  long lLoopCount = hb_compLoopCount( HB_COMP_PARAM );
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
                  if( (yyvsp[0].sNumber) )
                  {
                     if( (yyvsp[-5].lNumber) != lLoopCount )
                     {
                        /* ALWAYS statement after RECOVER with EXIT/LOOP statments */
                        hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_ALWAYS_AFTER_EXIT, "EXIT/LOOP", NULL );
                     }
                     --HB_COMP_PARAM->functions.pLast->wAlwaysCounter;
                     /* replace END address with ALWAYS address in
                        HB_P_SEQEND opcode */
                     hb_compGenJumpThere( (yyvsp[-3].sNumber), (yyvsp[0].sNumber), HB_COMP_PARAM );
                     /* Fix ALWAYS address in HB_P_SEQALWAYS opcode */
                     hb_compGenJumpThere( (yyvsp[-7].sNumber) - 4, (yyvsp[0].sNumber), HB_COMP_PARAM );
                     /* Fix ALWAYSEND address in HB_P_ALWAYSBEGIN opcode */
                     hb_compGenJumpHere( (yyvsp[0].sNumber) + 1, HB_COMP_PARAM );
                     hb_compGenPCode1( HB_P_ALWAYSEND, HB_COMP_PARAM );
                  }
                  else
                  {
                     /* Fix END address in HB_P_SEQEND opcode */
                     hb_compGenJumpHere( (yyvsp[-3].sNumber), HB_COMP_PARAM );
                  }
                  hb_compSequenceFinish( HB_COMP_PARAM, (yyvsp[-7].sNumber), (yyvsp[-3].sNumber), (yyvsp[0].sNumber),
                                         (yyvsp[-4].lNumber) != 0, (yyvsp[-2].sNumber) != 0, (yyvsp[-5].lNumber) == lLoopCount );
               }
#line 6654 "harboury.c" /* yacc.c:1646  */
    break;

  case 626:
#line 1882 "harbour.y" /* yacc.c:1646  */
    { (yyval.sNumber) = 0; }
#line 6660 "harboury.c" /* yacc.c:1646  */
    break;

  case 627:
#line 1884 "harbour.y" /* yacc.c:1646  */
    {
                  HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[0].asExpr), HB_COMP_PARAM ) );
                  hb_compGenPCode1( HB_P_SEQBLOCK, HB_COMP_PARAM );
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
               }
#line 6670 "harboury.c" /* yacc.c:1646  */
    break;

  case 628:
#line 1891 "harbour.y" /* yacc.c:1646  */
    { (yyval.sNumber) = 0; }
#line 6676 "harboury.c" /* yacc.c:1646  */
    break;

  case 630:
#line 1896 "harbour.y" /* yacc.c:1646  */
    {
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
                  ++HB_COMP_PARAM->functions.pLast->wAlwaysCounter;
                  hb_compSequenceAlways( HB_COMP_PARAM );
               }
#line 6687 "harboury.c" /* yacc.c:1646  */
    break;

  case 631:
#line 1904 "harbour.y" /* yacc.c:1646  */
    { (yyval.sNumber) = 0; HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; }
#line 6693 "harboury.c" /* yacc.c:1646  */
    break;

  case 634:
#line 1910 "harbour.y" /* yacc.c:1646  */
    {
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE;
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
                  if( HB_COMP_PARAM->functions.pLast->wSeqCounter )
                     --HB_COMP_PARAM->functions.pLast->wSeqCounter;
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  hb_compGenPCode2( HB_P_SEQRECOVER, HB_P_POP, HB_COMP_PARAM );
               }
#line 6706 "harboury.c" /* yacc.c:1646  */
    break;

  case 635:
#line 1921 "harbour.y" /* yacc.c:1646  */
    {
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE;
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
                  if( HB_COMP_PARAM->functions.pLast->wSeqCounter )
                     --HB_COMP_PARAM->functions.pLast->wSeqCounter;
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  hb_compGenPCode1( HB_P_SEQRECOVER, HB_COMP_PARAM );
                  hb_compGenPopVar( (yyvsp[0].string), HB_COMP_PARAM );
               }
#line 6720 "harboury.c" /* yacc.c:1646  */
    break;

  case 636:
#line 1939 "harbour.y" /* yacc.c:1646  */
    {
                  (yyval.asExpr) = hb_compExprNewFunCall( (yyvsp[-1].asExpr), (yyvsp[0].asExpr), HB_COMP_PARAM );
               }
#line 6728 "harboury.c" /* yacc.c:1646  */
    break;

  case 637:
#line 1943 "harbour.y" /* yacc.c:1646  */
    {
                  hb_compModuleAdd( HB_COMP_PARAM, (yyvsp[-1].string), HB_FALSE );
                  /* DOIDENT is the only one identifier which can be returned in lower letters */
                  (yyval.asExpr) = hb_compExprNewFunCall( hb_compExprNewFunName( hb_compIdentifierNew( HB_COMP_PARAM, hb_strupr( hb_strdup( (yyvsp[-1].string) ) ), HB_IDENT_FREE ), HB_COMP_PARAM ), (yyvsp[0].asExpr), HB_COMP_PARAM );
               }
#line 6738 "harboury.c" /* yacc.c:1646  */
    break;

  case 638:
#line 1950 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = NULL; }
#line 6744 "harboury.c" /* yacc.c:1646  */
    break;

  case 639:
#line 1951 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = (yyvsp[0].asExpr); }
#line 6750 "harboury.c" /* yacc.c:1646  */
    break;

  case 640:
#line 1954 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprNewArgList( hb_compExprNewNil( HB_COMP_PARAM ), HB_COMP_PARAM ), hb_compExprNewNil( HB_COMP_PARAM ) ); }
#line 6756 "harboury.c" /* yacc.c:1646  */
    break;

  case 641:
#line 1955 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprNewArgList( hb_compExprNewNil( HB_COMP_PARAM ), HB_COMP_PARAM ), (yyvsp[0].asExpr) ); }
#line 6762 "harboury.c" /* yacc.c:1646  */
    break;

  case 642:
#line 1956 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[0].asExpr), HB_COMP_PARAM ); }
#line 6768 "harboury.c" /* yacc.c:1646  */
    break;

  case 643:
#line 1957 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[-1].asExpr), hb_compExprNewNil( HB_COMP_PARAM ) ); }
#line 6774 "harboury.c" /* yacc.c:1646  */
    break;

  case 644:
#line 1958 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[-2].asExpr), (yyvsp[0].asExpr) ); }
#line 6780 "harboury.c" /* yacc.c:1646  */
    break;

  case 645:
#line 1961 "harbour.y" /* yacc.c:1646  */
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[0].string), HB_COMP_PARAM ); }
#line 6786 "harboury.c" /* yacc.c:1646  */
    break;

  case 650:
#line 1969 "harbour.y" /* yacc.c:1646  */
    {
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[-1].asExpr), HB_COMP_PARAM ) );
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
                  hb_compGenPCode1( HB_P_WITHOBJECTSTART, HB_COMP_PARAM );
                  HB_COMP_PARAM->functions.pLast->wWithObjectCnt++;
               }
#line 6798 "harboury.c" /* yacc.c:1646  */
    break;

  case 651:
#line 1978 "harbour.y" /* yacc.c:1646  */
    {  if( HB_COMP_PARAM->functions.pLast->wWithObjectCnt )
                    --HB_COMP_PARAM->functions.pLast->wWithObjectCnt;
                  if( (yyvsp[-1].lNumber) )
                     hb_compGenPCode1( HB_P_WITHOBJECTEND, HB_COMP_PARAM );
                  else
                  {
                     hb_compNOOPfill( HB_COMP_PARAM->functions.pLast,
                                      (yyvsp[-2].sNumber), 1, HB_FALSE, HB_TRUE );
                     hb_compGenPCode1( HB_P_POP, HB_COMP_PARAM );
                  }
               }
#line 6814 "harboury.c" /* yacc.c:1646  */
    break;

  case 660:
#line 2001 "harbour.y" /* yacc.c:1646  */
    { HB_COMP_PARAM->fError = HB_FALSE; }
#line 6820 "harboury.c" /* yacc.c:1646  */
    break;


#line 6824 "harboury.c" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (pComp, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (pComp, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, pComp);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, pComp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (pComp, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, pComp);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, pComp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 2005 "harbour.y" /* yacc.c:1906  */


/*
 ** ------------------------------------------------------------------------ **
 */

/*
 * Avoid tracing in preprocessor/compiler.
 */
#if ! defined( HB_TRACE_UTILS )
   #if defined( HB_TRACE_LEVEL )
      #undef HB_TRACE_LEVEL
   #endif
#endif


/* ************************************************************************* */

/*
 * This function stores the position in pcode buffer where the FOR/WHILE
 * loop starts. It will be used to fix any LOOP/EXIT statements
 */
static void hb_compLoopStart( HB_COMP_DECL, HB_BOOL fCanLoop )
{
   PHB_LOOPEXIT pLoop = ( PHB_LOOPEXIT ) hb_xgrab( sizeof( HB_LOOPEXIT ) );
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   if( pFunc->pLoops )
   {
      PHB_LOOPEXIT pLast = pFunc->pLoops;

      while( pLast->pNext )
         pLast = pLast->pNext;
      pLast->pNext = pLoop;
   }
   else
      pFunc->pLoops = pLoop;

   pLoop->nOffset          = pFunc->nPCodePos;  /* store the start position */
   pLoop->fCanLoop         = fCanLoop;    /* can we use LOOP inside */
   pLoop->wSeqCounter      = pFunc->wSeqCounter;      /* store current SEQUENCE counter */
   pLoop->wWithObjectCnt   = pFunc->wWithObjectCnt;   /* store current WITH OBJECT counter */
   pLoop->wAlwaysCounter   = pFunc->wAlwaysCounter;   /* store current ALWAYS counter */
   pLoop->pExitList        = NULL;
   pLoop->pLoopList        = NULL;
   pLoop->pNext            = NULL;
}

/*
 * return number of LOOP of EXIT statement in the top most structure
 */
static long hb_compLoopCount( HB_COMP_DECL )
{
   PHB_LOOPEXIT pLastLoop, pLastExit, pLoop;
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;
   long lCount = 0;

   pLastLoop = pLastExit = NULL;
   pLoop = pFunc->pLoops;
   while( pLoop )
   {
      if( pLoop->fCanLoop )
         pLastLoop = pLoop;
      pLastExit = pLoop;
      pLoop = pLoop->pNext;
   }

   if( pLastLoop )
   {
      while( pLastLoop->pLoopList )
      {
         ++lCount;
         pLastLoop = pLastLoop->pLoopList;
      }
   }
   if( pLastExit )
   {
      while( pLastExit->pExitList )
      {
         ++lCount;
         pLastExit = pLastExit->pExitList;
      }
   }

   return lCount;
}

/*
 * Stores the position of LOOP statement to fix it later at the end of loop
 */
static void hb_compLoopLoop( HB_COMP_DECL )
{
   PHB_LOOPEXIT pLast = NULL, pLoop;
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   pLoop = pFunc->pLoops;
   while( pLoop )
   {
      if( pLoop->fCanLoop )
         pLast = pLoop;
      pLoop = pLoop->pNext;
   }

   if( ! pLast )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNMATCHED_EXIT, "LOOP", NULL );
   }
   else
   {
      if( pLast->wSeqCounter != pFunc->wSeqCounter )
      {
         /* Attempt to LOOP from BEGIN/END sequence
          * Current SEQUENCE counter is different then at the beginning of loop
          * Notice that LOOP is allowed in RECOVER code when there is no
          * ALWAYS block
          */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "LOOP", NULL );
      }
      else if( pLast->wAlwaysCounter != pFunc->wAlwaysCounter )
      {
         /* Attempt to LOOP from ALWAYS block of BEGIN/END sequence
          */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "LOOP", NULL );
      }
      else
      {
         HB_USHORT wWithObjectCnt = pLast->wWithObjectCnt;

         pLoop = ( PHB_LOOPEXIT ) hb_xgrab( sizeof( HB_LOOPEXIT ) );
         pLoop->pLoopList = NULL;
         while( pLast->pLoopList )
            pLast = pLast->pLoopList;
         pLast->pLoopList = pLoop;

         while( wWithObjectCnt < pFunc->wWithObjectCnt )
         {
            hb_compGenPCode1( HB_P_WITHOBJECTEND, HB_COMP_PARAM );
            wWithObjectCnt++;
         }
         /* store the position to fix */
         pLoop->nOffset = pFunc->nPCodePos;
         hb_compGenJump( 0, HB_COMP_PARAM );
      }
   }
}

/*
 * Stores the position of EXIT statement to fix it later at the end of loop
 */
static void hb_compLoopExit( HB_COMP_DECL )
{
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   if( ! pFunc->pLoops )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNMATCHED_EXIT, "EXIT", NULL );
   }
   else
   {
      PHB_LOOPEXIT pLast, pLoop;

      pLast = pFunc->pLoops;
      while( pLast->pNext )
         pLast = pLast->pNext;

      if( pLast->wSeqCounter != pFunc->wSeqCounter )
      {
         /* Attempt to EXIT from BEGIN/END sequence
          * Current SEQUENCE counter is different then at the beginning of loop
          * Notice that EXIT is allowed in RECOVER code when there is no
          * ALWAYS block
          */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "EXIT", NULL );
      }
      else if( pLast->wAlwaysCounter != pFunc->wAlwaysCounter )
      {
         /* Attempt to EXIT from ALWAYS block of BEGIN/END sequence
          */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "EXIT", NULL );
      }
      else
      {
         HB_USHORT wWithObjectCnt = pLast->wWithObjectCnt;

         pLoop = ( PHB_LOOPEXIT ) hb_xgrab( sizeof( HB_LOOPEXIT ) );
         pLoop->pExitList = NULL;
         while( pLast->pExitList )
            pLast = pLast->pExitList;
         pLast->pExitList = pLoop;

         while( wWithObjectCnt < pFunc->wWithObjectCnt )
         {
            hb_compGenPCode1( HB_P_WITHOBJECTEND, HB_COMP_PARAM );
            wWithObjectCnt++;
         }
         /* store the position to fix */
         pLoop->nOffset = pFunc->nPCodePos;
         hb_compGenJump( 0, HB_COMP_PARAM );
      }
   }
}

/*
 * Fixes the LOOP statement
 */
static void hb_compLoopHere( HB_COMP_DECL )
{
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;
   PHB_LOOPEXIT pLoop = pFunc->pLoops, pFree, pLast;

   if( pLoop )
   {
      while( pLoop->pNext )
         pLoop = pLoop->pNext;

      pLast = pLoop;
      pLoop = pLoop->pLoopList;
      while( pLoop )
      {
         hb_compGenJumpHere( pLoop->nOffset + 1, HB_COMP_PARAM );
         pFree = pLoop;
         pLoop = pLoop->pLoopList;
         hb_xfree( pFree );
      }
      pLast->pLoopList = NULL;
   }
}

/*
 * Fixes the EXIT statements and releases memory allocated for current loop
 */
static void hb_compLoopEnd( HB_COMP_DECL )
{
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;
   PHB_LOOPEXIT pLoop = pFunc->pLoops, pLast = pFunc->pLoops, pExit, pFree;

   if( pLoop )
   {
      while( pLoop->pNext )
      {
         pLast = pLoop;
         pLoop = pLoop->pNext;
      }

      pExit = pLoop->pExitList;
      while( pExit )
      {
         hb_compGenJumpHere( pExit->nOffset + 1, HB_COMP_PARAM );
         pFree = pExit;
         pExit = pExit->pExitList;
         hb_xfree( pFree );
      }

      pLast->pNext = NULL;
      if( pLoop == pFunc->pLoops )
         pFunc->pLoops = NULL;
      hb_xfree( pLoop );
   }
}

void hb_compLoopKill( PHB_HFUNC pFunc )
{
   PHB_LOOPEXIT pLoop, pFree;

   while( pFunc->pLoops )
   {
      pLoop = pFunc->pLoops;
      while( pLoop->pExitList )
      {
         pFree = pLoop->pExitList;
         pLoop->pExitList = pFree->pExitList;
         hb_xfree( pFree );
      }
      while( pLoop->pLoopList )
      {
         pFree = pLoop->pLoopList;
         pLoop->pLoopList = pFree->pLoopList;
         hb_xfree( pFree );
      }
      pFunc->pLoops = pLoop->pNext;
      hb_xfree( pLoop );
   }
}

static void * hb_compElseIfGen( HB_COMP_DECL, void * pFirst, HB_SIZE nOffset )
{
   PHB_ELSEIF pElseIf = ( PHB_ELSEIF ) hb_xgrab( sizeof( HB_ELSEIF ) ), pLast;
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   pElseIf->nOffset = nOffset;
   pElseIf->pPrev   = NULL;
   pElseIf->pElseif = NULL;

   if( pFirst )
   {
      pLast = ( PHB_ELSEIF ) pFirst;
      while( pLast->pElseif )
         pLast = pLast->pElseif;
      pLast->pElseif = pElseIf;
   }
   else
   {
      if( pFunc->elseif )
      {
         pElseIf->pPrev = pFunc->elseif;
      }
      pFirst = pElseIf;
      pFunc->elseif = pElseIf;
   }
   return pFirst;
}


static void hb_compElseIfFix( HB_COMP_DECL, void * pFixElseIfs )
{
   PHB_ELSEIF pFix = ( PHB_ELSEIF ) pFixElseIfs;
   PHB_ELSEIF pDel;

   HB_COMP_PARAM->functions.pLast->elseif = pFix->pPrev;
   while( pFix )
   {
      hb_compGenJumpHere( pFix->nOffset, HB_COMP_PARAM );
      pDel = pFix;
      pFix = pFix->pElseif;
      hb_xfree( pDel );
   }
}

void hb_compElseIfKill( PHB_HFUNC pFunc )
{
   PHB_ELSEIF pFix;
   PHB_ELSEIF pDel;

   while( pFunc->elseif )
   {
      pFix = pFunc->elseif;
      pFunc->elseif = pFix->pPrev;
      while( pFix )
      {
         pDel = pFix;
         pFix = pFix->pElseif;
         hb_xfree( pDel );
      }
   }
}

static void hb_compRTVariableAdd( HB_COMP_DECL, PHB_EXPR pVar, HB_BOOL bPopInitValue )
{
   PHB_RTVAR pRTvar = ( PHB_RTVAR ) hb_xgrab( sizeof( HB_RTVAR ) );
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   pRTvar->pVar = pVar;
   pRTvar->bPopValue = bPopInitValue;
   pRTvar->pNext = NULL;
   pRTvar->pPrev = NULL;

   if( pFunc->rtvars )
   {
      PHB_RTVAR pLast = pFunc->rtvars;
      while( pLast->pNext )
         pLast = pLast->pNext;
      pLast->pNext = pRTvar;
      pRTvar->pPrev = pLast;
   }
   else
      pFunc->rtvars = pRTvar;
}

static void hb_compRTVariableGen( HB_COMP_DECL, const char * szCreateFun )
{
   HB_USHORT usCount = 0;
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;
   PHB_RTVAR pVar = pFunc->rtvars;
   PHB_RTVAR pDel;

   /* generate the function call frame */
   hb_compGenPushFunCall( szCreateFun, HB_FN_UDF, HB_COMP_PARAM );

   /* push variable names to create */
   while( pVar->pNext )
   {
      pVar->pVar = hb_compExprGenPush( pVar->pVar, HB_COMP_PARAM );
      pVar = pVar->pNext;
      ++usCount;
   }
   pVar->pVar = hb_compExprGenPush( pVar->pVar, HB_COMP_PARAM );
   ++usCount;

   /* call function that will create either PUBLIC or PRIVATE variables */
   if( usCount > 255 )
      hb_compGenPCode3( HB_P_DO, HB_LOBYTE( usCount ), HB_HIBYTE( usCount ), HB_COMP_PARAM );
   else
      hb_compGenPCode2( HB_P_DOSHORT, ( HB_BYTE ) usCount, HB_COMP_PARAM );

   /* pop initial values */
   while( pVar )
   {
      if( pVar->bPopValue )
         HB_COMP_EXPR_FREE( hb_compExprGenPop( pVar->pVar, HB_COMP_PARAM ) );
      else
         HB_COMP_EXPR_FREE( pVar->pVar );
      pDel = pVar;
      pVar = pVar->pPrev;
      hb_xfree( pDel );
   }
   pFunc->rtvars = NULL;
}

void hb_compRTVariableKill( HB_COMP_DECL, PHB_HFUNC pFunc )
{
   PHB_RTVAR pVar;

   while( pFunc->rtvars )
   {
      pVar = pFunc->rtvars;

      HB_COMP_EXPR_FREE( pVar->pVar );
      pFunc->rtvars = pVar->pPrev;
      hb_xfree( pVar );
   }
   pFunc->rtvars = NULL;
}

static PHB_EXPR hb_compArrayDimPush( PHB_EXPR pInitValue, HB_COMP_DECL )
{
   HB_USHORT uCount = ( HB_USHORT ) hb_compExprListLen( pInitValue );

   if( uCount == 1 && hb_compExprIsInteger( pInitValue->value.asList.pExprList ) &&
       hb_compExprAsInteger( pInitValue->value.asList.pExprList ) == 0 )
   {
      hb_compGenPCode3( HB_P_ARRAYGEN, 0, 0, HB_COMP_PARAM );
   }
   else
   {
      pInitValue = hb_compExprGenPush( pInitValue, HB_COMP_PARAM );
      hb_compGenPCode3( HB_P_ARRAYDIM, HB_LOBYTE( uCount ), HB_HIBYTE( uCount ), HB_COMP_PARAM );
   }
   return pInitValue;
}

static void hb_compVariableDim( const char * szName, PHB_EXPR pInitValue, HB_COMP_DECL )
{
   if( HB_COMP_PARAM->iVarScope == HB_VSCOMP_PUBLIC || HB_COMP_PARAM->iVarScope == HB_VSCOMP_PRIVATE )
   {
      hb_compVariableAdd( HB_COMP_PARAM, szName, hb_compVarTypeNew( HB_COMP_PARAM, 'A', NULL ) );
      HB_COMP_EXPR_FREE( hb_compArrayDimPush( pInitValue, HB_COMP_PARAM ) );
      hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( szName, NULL, HB_COMP_PARAM ), HB_TRUE );
   }
   else if( HB_COMP_PARAM->iVarScope & HB_VSCOMP_STATIC )
   {
      PHB_EXPR pVar = hb_compExprNewVar( szName, HB_COMP_PARAM );
      PHB_EXPR pAssign;

      /* create a static variable */
      hb_compVariableAdd( HB_COMP_PARAM, szName, hb_compVarTypeNew( HB_COMP_PARAM, 'A', NULL ) );

      hb_compStaticDefStart( HB_COMP_PARAM );   /* switch to statics pcode buffer */
      /* create an array */
      pInitValue = hb_compArrayDimPush( pInitValue, HB_COMP_PARAM );
      /* now pop an array */
      pVar = hb_compExprGenPop( pVar, HB_COMP_PARAM );
      /* check if valid initializers were used but don't generate any code */
      pAssign = hb_compExprAssignStatic( pVar, pInitValue, HB_COMP_PARAM );
      /* delete all used expressions */
      HB_COMP_EXPR_FREE( pAssign );
      hb_compStaticDefEnd( HB_COMP_PARAM, szName );
   }
   else
   {
      hb_compVariableAdd( HB_COMP_PARAM, szName, hb_compVarTypeNew( HB_COMP_PARAM, 'A', NULL ) );
      HB_COMP_EXPR_FREE( hb_compArrayDimPush( pInitValue, HB_COMP_PARAM ) );
      if( HB_COMP_PARAM->iVarScope != HB_VSCOMP_LOCAL ||
          !( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_EXTBLOCK ) )
      {
         HB_COMP_EXPR_FREE( hb_compExprGenPop( hb_compExprNewVar( szName, HB_COMP_PARAM ), HB_COMP_PARAM ) );
      }
   }
}

static void hb_compForStart( HB_COMP_DECL, const char *szVarName, int iForEachDir )
{
   PHB_ENUMERATOR pEnumVar;

   pEnumVar = HB_COMP_PARAM->functions.pLast->pEnum;
   if( pEnumVar == NULL )
   {
      HB_COMP_PARAM->functions.pLast->pEnum = ( PHB_ENUMERATOR ) hb_xgrab( sizeof( HB_ENUMERATOR ) );
      pEnumVar = HB_COMP_PARAM->functions.pLast->pEnum;
   }
   else
   {
      HB_BOOL bWarn = HB_TRUE;
      PHB_ENUMERATOR pLast = pEnumVar;

      while( pEnumVar )
      {
         if( strcmp( pEnumVar->szName, szVarName ) == 0 )
         {
            /* Enumerator variable exists already - throw warning */
            if( bWarn )
            {
               hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_FORVAR_DUPL, szVarName, NULL );
               bWarn = HB_FALSE;
            }
         }
         pLast = pEnumVar;
         pEnumVar = pEnumVar->pNext;
      }
      pLast->pNext = ( PHB_ENUMERATOR ) hb_xgrab( sizeof( HB_ENUMERATOR ) );
      pEnumVar = pLast->pNext;
   }
   pEnumVar->szName      = szVarName;
   pEnumVar->iForEachDir = iForEachDir;
   pEnumVar->pNext       = NULL;
}

static HB_BOOL hb_compForEachVarError( HB_COMP_DECL, const char *szVarName, int * piDir )
{
   PHB_ENUMERATOR pEnumVar;

   pEnumVar = HB_COMP_PARAM->functions.pLast->pEnum;
   if( pEnumVar && ! HB_COMP_PARAM->functions.pLast->bBlock )
   {
      while( pEnumVar )
      {
         if( strcmp( pEnumVar->szName, szVarName ) == 0 )
         {
            * piDir = pEnumVar->iForEachDir;
            if( * piDir != 0 )
            {
               /* only if it is FOR EACH enumerator
                * generate warning if it is FOR/NEXT loop
               */
               return HB_FALSE;
            }
         }
         pEnumVar = pEnumVar->pNext;
      }
   }

   hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_ENUM_INVALID, szVarName, NULL );
   return HB_TRUE;
}

static void hb_compForEnd( HB_COMP_DECL, const char *szVar )
{
   PHB_ENUMERATOR * pEnumVar;

   HB_SYMBOL_UNUSED( szVar );

   pEnumVar = &HB_COMP_PARAM->functions.pLast->pEnum;
   if( *pEnumVar )
   {
      while( ( *pEnumVar )->pNext )
         pEnumVar = &( *pEnumVar )->pNext;

      hb_xfree( *pEnumVar );
      *pEnumVar = NULL;
   }
}

static HB_COMP_CARGO2_FUNC( hb_compEnumEvalStart )
{
   const char * szName = hb_compExprAsSymbol( ( PHB_EXPR ) cargo );

   if( szName )
      hb_compForStart( HB_COMP_PARAM, szName, HB_COMP_PARAM->fDescend ? -1 : 1 );

   hb_compExprGenPush( ( PHB_EXPR ) dummy, HB_COMP_PARAM );  /* expression */
   hb_compExprGenPush( ( PHB_EXPR ) cargo, HB_COMP_PARAM );  /* variable */
}

static void hb_compEnumStart( HB_COMP_DECL, PHB_EXPR pVars, PHB_EXPR pExprs, int descend )
{
   HB_SIZE ulLen;

   if( hb_compExprListLen( pVars ) != hb_compExprListLen( pExprs ) )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_FORVAR_DIFF, NULL, NULL );
   }

   HB_COMP_PARAM->fDescend = descend < 0;
   ulLen = hb_compExprListEval2( HB_COMP_PARAM, pVars, pExprs, hb_compEnumEvalStart );

   if( ulLen > 255 )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_FORVAR_TOOMANY, NULL, NULL );
   }
   else
   {
      hb_compGenPCode3( HB_P_ENUMSTART, ( HB_BYTE ) ( ulLen & 0xFF ), ( HB_BYTE ) ( descend > 0 ? 1 : 0 ), HB_COMP_PARAM );
   }
}

static void hb_compEnumNext( HB_COMP_DECL, PHB_EXPR pExpr, int descend )
{
   HB_SYMBOL_UNUSED( pExpr );
   if( descend > 0 )
   {
      hb_compGenPCode1( HB_P_ENUMNEXT, HB_COMP_PARAM );
   }
   else
   {
      hb_compGenPCode1( HB_P_ENUMPREV, HB_COMP_PARAM );
   }
}

static HB_COMP_CARGO_FUNC( hb_compEnumEvalEnd )
{
   const char * szName = hb_compExprAsSymbol( ( PHB_EXPR ) cargo );

   if( szName )
      hb_compForEnd( HB_COMP_PARAM, szName );
}

static void hb_compEnumEnd( HB_COMP_DECL, PHB_EXPR pExpr )
{
   hb_compExprListEval( HB_COMP_PARAM, pExpr, hb_compEnumEvalEnd );
   hb_compGenPCode1( HB_P_ENUMEND, HB_COMP_PARAM );
}

static void hb_compSwitchStart( HB_COMP_DECL, PHB_EXPR pExpr )
{
   PHB_SWITCHCMD pSwitch = ( PHB_SWITCHCMD ) hb_xgrab( sizeof( HB_SWITCHCMD ) );
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   pSwitch->pCases = NULL;
   pSwitch->pLast  = NULL;
   pSwitch->nDefault = 0;
   pSwitch->nOffset = pFunc->nPCodePos;
   pSwitch->pExpr = pExpr;
   pSwitch->pPrev = pFunc->pSwitch;
   pFunc->pSwitch = pSwitch;
}

static void hb_compSwitchAdd( HB_COMP_DECL, PHB_EXPR pExpr )
{
   PHB_SWITCHCASE pCase;
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   pFunc->funFlags &= ~HB_FUNF_BREAK_CODE;

   if( pExpr )
   {
      /* normal CASE */
      pCase = ( PHB_SWITCHCASE ) hb_xgrab( sizeof( HB_SWITCHCASE ) );
      pCase->nOffset = pFunc->nPCodePos;
      pCase->pNext = NULL;
      pCase->pExpr = pExpr = hb_compExprReduce( pExpr, HB_COMP_PARAM );
      if( !( hb_compExprIsLong( pExpr ) || hb_compExprIsString( pExpr ) ) )
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_NOT_LITERAL_CASE, NULL, NULL );
      else if( pFunc->pSwitch->pCases )
      {
         PHB_SWITCHCASE pCases = pFunc->pSwitch->pCases;
         while( pCases )
         {
            HB_BOOL fEqual = HB_FALSE;

            if( hb_compExprIsLong( pExpr ) )
            {
               if( hb_compExprIsLong( pCases->pExpr ) )
                  fEqual = hb_compExprAsLongNum( pExpr ) == hb_compExprAsLongNum( pCases->pExpr );
            }
            else
            {
               if( hb_compExprIsString( pCases->pExpr ) )
                  fEqual = hb_compExprAsStringLen( pExpr ) == hb_compExprAsStringLen( pCases->pExpr ) &&
                           memcmp( hb_compExprAsString( pExpr ),
                                   hb_compExprAsString( pCases->pExpr ),
                                   hb_compExprAsStringLen( pExpr ) ) == 0;
            }
            if( fEqual )
               hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_DUPL_CASE, NULL, NULL );
            pCases = pCases->pNext;
         }
      }

      if( pFunc->pSwitch->pLast )
      {
         pFunc->pSwitch->pLast->pNext = pCase;
         pFunc->pSwitch->pLast = pCase;
      }
      else
      {
         pFunc->pSwitch->pCases = pFunc->pSwitch->pLast = pCase;
      }
      if( hb_compExprIsString( pExpr ) && hb_compExprAsStringLen( pExpr ) > 255 )
      {
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_INVALID_STR, NULL, NULL );
      }
   }
   else
   {
      /* DEFAULT */
      if( pFunc->pSwitch->nDefault )
      {
         /* more than one default clause */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL );
      }
      else
      {
         pFunc->pSwitch->nDefault = pFunc->nPCodePos;
      }
   }
}

static void hb_compSwitchEnd( HB_COMP_DECL )
{
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;
   PHB_SWITCHCMD pSwitch = pFunc->pSwitch;
   PHB_EXPR pExpr = pSwitch->pExpr;
   PHB_SWITCHCASE pCase, pTmp;
   HB_SIZE ulExitPos, ulCountPos;
   int iCount = 0;

   /* skip switch pcode if there was no EXIT in the last CASE
    * or in the DEFAULT case
   */
   ulExitPos = hb_compGenJump( 0, HB_COMP_PARAM );
   hb_compGenJumpHere( pSwitch->nOffset + 1, HB_COMP_PARAM );

   pCase = pSwitch->pCases;
   if( hb_compExprIsLong( pExpr ) || hb_compExprIsString( pExpr ) )
   {
      HB_BOOL fGen = HB_FALSE;
      while( pCase )
      {
         if( hb_compExprIsLong( pCase->pExpr ) )
         {
            fGen = hb_compExprIsLong( pExpr ) &&
                   hb_compExprAsLongNum( pExpr ) ==
                   hb_compExprAsLongNum( pCase->pExpr );
         }
         else if( hb_compExprIsString( pCase->pExpr ) )
         {
            fGen = hb_compExprIsString( pExpr ) &&
                   hb_compExprAsStringLen( pExpr ) ==
                   hb_compExprAsStringLen( pCase->pExpr ) &&
                   memcmp( hb_compExprAsString( pExpr ),
                           hb_compExprAsString( pCase->pExpr ),
                           hb_compExprAsStringLen( pExpr ) ) == 0;
         }
         if( fGen )
         {
            hb_compGenJumpThere( hb_compGenJump( 0, HB_COMP_PARAM ),
                                 pCase->nOffset, HB_COMP_PARAM );
            break;
         }
         pCase = pCase->pNext;
      }
      if( pSwitch->nDefault && ! fGen )
      {
         hb_compGenJumpThere( hb_compGenJump( 0, HB_COMP_PARAM ),
                              pSwitch->nDefault, HB_COMP_PARAM );
      }
   }
   else
   {
      HB_BOOL fSwitchCase = HB_COMP_PARAM->fSwitchCase;
      HB_BOOL fMacroText = ( HB_COMP_PARAM->supported & HB_COMPFLAG_MACROTEXT ) != 0;

      pExpr = hb_compExprGenPush( pExpr, HB_COMP_PARAM );
      ulCountPos = pFunc->nPCodePos + 1;
      hb_compGenPCode3( HB_P_SWITCH, 0, 0, HB_COMP_PARAM );
      HB_COMP_PARAM->fSwitchCase = HB_TRUE;
      HB_COMP_PARAM->supported &= ~HB_COMPFLAG_MACROTEXT;
      while( pCase )
      {
         if( hb_compExprIsLong( pCase->pExpr ) || hb_compExprIsString( pCase->pExpr ) )
         {
            iCount++;
            pCase->pExpr = hb_compExprGenPush( pCase->pExpr, HB_COMP_PARAM );
            hb_compGenJumpThere( hb_compGenJump( 0, HB_COMP_PARAM ),
                                 pCase->nOffset, HB_COMP_PARAM );
         }
         pCase = pCase->pNext;
      }
      if( pSwitch->nDefault )
      {
         iCount++;
         hb_compGenPCode1( HB_P_PUSHNIL, HB_COMP_PARAM );
         hb_compGenJumpThere( hb_compGenJump( 0, HB_COMP_PARAM ),
                              pSwitch->nDefault, HB_COMP_PARAM );
      }
      HB_PUT_LE_UINT16( pFunc->pCode + ulCountPos, iCount );

      HB_COMP_PARAM->fSwitchCase = fSwitchCase;
      if( fMacroText )
         HB_COMP_PARAM->supported |= HB_COMPFLAG_MACROTEXT;
   }

   hb_compGenJumpHere( ulExitPos, HB_COMP_PARAM );

   if( pExpr )
      HB_COMP_EXPR_FREE( pExpr );

   pCase = pSwitch->pCases;
   while( pCase )
   {
      HB_COMP_EXPR_FREE( pCase->pExpr );
      pTmp = pCase->pNext;
      hb_xfree( pCase );
      pCase = pTmp;
   }
   pFunc->pSwitch = pSwitch->pPrev;
   hb_xfree( pSwitch );
}

/* Release all switch statements
*/
void hb_compSwitchKill( HB_COMP_DECL, PHB_HFUNC pFunc )
{
   PHB_SWITCHCASE pCase;
   PHB_SWITCHCMD pSwitch;

   while( pFunc->pSwitch )
   {
      while( pFunc->pSwitch->pCases )
      {
         pCase = pFunc->pSwitch->pCases;
         HB_COMP_EXPR_FREE( pCase->pExpr );
         pFunc->pSwitch->pCases = pCase->pNext;
         hb_xfree( pCase );
      }
      pSwitch = pFunc->pSwitch;
      pFunc->pSwitch = pSwitch->pPrev;
      if( pSwitch->pExpr )
         HB_COMP_EXPR_FREE( pSwitch->pExpr );
      hb_xfree( pSwitch );
   }
}

static PHB_EXPR hb_compCheckPassByRef( HB_COMP_DECL, PHB_EXPR pExpr )
{
   if( pExpr->ExprType == HB_ET_FUNCALL )
   {
      if( hb_compExprParamListLen( pExpr->value.asFunCall.pParms ) == 0 )
      {
         PHB_EXPR pDelExpr = pExpr;
         if( pExpr->value.asFunCall.pFunName->ExprType == HB_ET_MACRO )
         {
            pExpr = pExpr->value.asFunCall.pFunName;
            HB_COMP_EXPR_CLEAR( pDelExpr );
         }
         else
         {
            pExpr = hb_compExprNewFunRef( hb_compExprAsSymbol( pExpr ), HB_COMP_PARAM );
            HB_COMP_EXPR_FREE( pDelExpr );
         }
         return pExpr;
      }
      else
      {
         const char * szDesc;

         szDesc = hb_compExprAsSymbol( pExpr );
         if( ! szDesc )
            szDesc = hb_compExprDescription( pExpr );

         return hb_compErrorRefer( HB_COMP_PARAM, pExpr, szDesc );
      }
   }

   return pExpr;
}

static PHB_EXPR hb_compCheckMethod( HB_COMP_DECL, PHB_EXPR pExpr )
{
   if( pExpr->value.asMessage.szMessage &&
       pExpr->value.asMessage.pObject &&
       pExpr->value.asMessage.pObject->ExprType == HB_ET_VARIABLE &&
       pExpr->value.asMessage.szMessage[ 0 ] == '_' &&
       strncmp( "__ENUM", pExpr->value.asMessage.szMessage, 6 ) == 0 )
   {
      const char * szMessage = pExpr->value.asMessage.szMessage + 6;

      if( strcmp( "INDEX",   szMessage ) == 0 ||
          strcmp( "KEY",     szMessage ) == 0 ||
          strcmp( "BASE",    szMessage ) == 0 ||
          strcmp( "VALUE",   szMessage ) == 0 ||
          strcmp( "ISFIRST", szMessage ) == 0 ||
          strcmp( "ISLAST",  szMessage ) == 0 )
      {
         int iDir = 0;
         if( ! hb_compForEachVarError( HB_COMP_PARAM, pExpr->value.asMessage.pObject->value.asSymbol.name, &iDir ) )
         {
            pExpr->value.asMessage.pObject->ExprType = HB_ET_VARREF;
#if 0
            if( iDir < 0 )
            {
               if( strcmp( "ISFIRST", szMessage ) == 0 )
                  pExpr->value.asMessage.szMessage = "__ENUMISLAST";
               else if( strcmp( "ISLAST",  szMessage ) == 0 )
                  pExpr->value.asMessage.szMessage = "__ENUMISFIRST";
            }
#endif
         }
      }
   }

   return pExpr;
}

static void hb_compErrStru( HB_COMP_DECL, int iError )
{
   hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', iError, NULL, NULL );
}

/* ************************************************************************* */

HB_BOOL hb_compCheckUnclosedStru( HB_COMP_DECL, PHB_HFUNC pFunc )
{
   HB_BOOL fUnclosed = HB_TRUE;

   if( pFunc->wIfCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "IF", NULL );
      pFunc->wIfCounter = 0;
   }
   else if( pFunc->wForCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "FOR", NULL );
      pFunc->wForCounter = 0;
   }
   else if( pFunc->wWhileCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "WHILE", NULL );
      pFunc->wWhileCounter = 0;
   }
   else if( pFunc->wCaseCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "CASE", NULL );
      pFunc->wCaseCounter = 0;
   }
   else if( pFunc->wSwitchCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "SWITCH", NULL );
      pFunc->wSwitchCounter = 0;
   }
   else if( pFunc->wWithObjectCnt )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "WITH OBJECT", NULL );
      pFunc->wWithObjectCnt = 0;
   }
   else if( pFunc->wSeqCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "BEGIN SEQUENCE", NULL );
      pFunc->wSeqCounter = 0;
   }
   else if( pFunc->funFlags & HB_FUNF_EXTBLOCK )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "{||...}", NULL );
      pFunc->funFlags &= ~HB_FUNF_EXTBLOCK;
   }
   else
      fUnclosed = HB_FALSE;

   return fUnclosed;
}

void yyerror( HB_COMP_DECL, const char * s )
{
   if( ! HB_COMP_PARAM->pLex->lasttok || HB_COMP_PARAM->pLex->lasttok[ 0 ] == '\n' )
   {
      if( HB_COMP_PARAM->iErrorCount == 0 || ! hb_pp_eof( HB_COMP_PARAM->pLex->pPP ) )
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_INCOMPLETE_STMT, NULL, NULL );
   }
   else if( HB_COMP_PARAM->pLex->iState == NEXT )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_NEXTFOR );
   else if( HB_COMP_PARAM->pLex->iState == ELSE )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_UNMATCHED_ELSE );
   else if( HB_COMP_PARAM->pLex->iState == ELSEIF )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_UNMATCHED_ELSEIF );
   else if( HB_COMP_PARAM->pLex->iState == ENDIF || HB_COMP_PARAM->pLex->iState == END )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDIF );
   else if( HB_COMP_PARAM->pLex->iState == CASE || HB_COMP_PARAM->pLex->iState == OTHERWISE )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_CASE );
   else if( HB_COMP_PARAM->pLex->iState == ENDCASE )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDCASE );
   else if( HB_COMP_PARAM->pLex->iState == ENDDO )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDDO );
   else if( HB_COMP_PARAM->pLex->iState == ENDWITH )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDWITH );
   else if( HB_COMP_PARAM->pLex->iState == ENDSEQ )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDSEQ );
   else if( HB_COMP_PARAM->pLex->iState == ENDSWITCH )
      hb_compErrStru( HB_COMP_PARAM, HB_COMP_ERR_ENDSWITCH );
   else
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_YACC, s, HB_COMP_PARAM->pLex->lasttok );
}
